15
{"last_modification_time":1548168586,"language":2,"import_file":"/home/dark/proj/faust/architecture/api/DspFaust.cpp","args":["clang++","-working-directory=/home/dark/proj/faust/","/home/dark/proj/faust/architecture/api/DspFaust.cpp","-resource-dir=/usr/lib/clang/7.0.1","-Wno-unknown-warning-option","-fparse-all-comments","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/x86_64-pc-linux-gnu","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/backward","-isystem/usr/local/include","-isystem/usr/lib/clang/7.0.1/include","-isystem/usr/include"],"includes":[],"dependencies":["/home/dark/proj/faust/architecture/api/DspFaust.cpp","/usr/include/c++/8.2.1/cmath","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++config.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/os_defines.h","/usr/include/features.h","/usr/include/sys/cdefs.h","/usr/include/gnu/stubs.h","/usr/include/c++/8.2.1/bits/cpp_type_traits.h","/usr/include/c++/8.2.1/ext/type_traits.h","/usr/include/math.h","/usr/include/bits/libc-header-start.h","/usr/include/bits/types.h","/usr/include/bits/math-vector.h","/usr/include/bits/floatn.h","/usr/include/bits/floatn-common.h","/usr/include/c++/8.2.1/bits/std_abs.h","/usr/include/stdlib.h","/usr/include/bits/types/locale_t.h","/usr/include/sys/types.h","/usr/include/bits/types/clock_t.h","/usr/include/bits/types/clockid_t.h","/usr/include/bits/types/time_t.h","/usr/include/bits/types/timer_t.h","/usr/include/bits/stdint-intn.h","/usr/include/endian.h","/usr/include/bits/byteswap.h","/usr/include/bits/uintn-identity.h","/usr/include/sys/select.h","/usr/include/bits/select.h","/usr/include/bits/types/sigset_t.h","/usr/include/bits/types/struct_timeval.h","/usr/include/bits/types/struct_timespec.h","/usr/include/bits/pthreadtypes.h","/usr/include/bits/thread-shared-types.h","/usr/include/bits/pthreadtypes-arch.h","/usr/include/alloca.h","/usr/include/c++/8.2.1/cstring","/usr/include/string.h","/usr/include/strings.h","/usr/local/include/faust/misc.h","/usr/include/c++/8.2.1/algorithm","/usr/include/c++/8.2.1/utility","/usr/include/c++/8.2.1/bits/stl_pair.h","/usr/include/c++/8.2.1/bits/move.h","/usr/include/c++/8.2.1/bits/concept_check.h","/usr/include/c++/8.2.1/type_traits","/usr/include/c++/8.2.1/initializer_list","/usr/include/c++/8.2.1/bits/stl_algobase.h","/usr/include/c++/8.2.1/bits/functexcept.h","/usr/include/c++/8.2.1/ext/numeric_traits.h","/usr/include/c++/8.2.1/bits/stl_iterator_base_types.h","/usr/include/c++/8.2.1/bits/stl_iterator_base_funcs.h","/usr/include/c++/8.2.1/bits/stl_iterator.h","/usr/include/c++/8.2.1/bits/ptr_traits.h","/usr/include/c++/8.2.1/debug/debug.h","/usr/include/c++/8.2.1/bits/stl_algo.h","/usr/include/c++/8.2.1/cstdlib","/usr/include/c++/8.2.1/bits/algorithmfwd.h","/usr/include/c++/8.2.1/bits/stl_heap.h","/usr/include/c++/8.2.1/bits/stl_tempbuf.h","/usr/include/c++/8.2.1/bits/stl_construct.h","/usr/include/c++/8.2.1/new","/usr/include/c++/8.2.1/exception","/usr/include/c++/8.2.1/bits/exception.h","/usr/include/c++/8.2.1/bits/exception_ptr.h","/usr/include/c++/8.2.1/bits/cxxabi_init_exception.h","/usr/lib/clang/7.0.1/include/stddef.h","/usr/include/c++/8.2.1/typeinfo","/usr/include/c++/8.2.1/bits/hash_bytes.h","/usr/include/c++/8.2.1/bits/nested_exception.h","/usr/include/c++/8.2.1/ext/alloc_traits.h","/usr/include/c++/8.2.1/bits/alloc_traits.h","/usr/include/c++/8.2.1/bits/memoryfwd.h","/usr/include/c++/8.2.1/bits/uniform_int_dist.h","/usr/include/c++/8.2.1/limits","/usr/include/c++/8.2.1/map","/usr/include/c++/8.2.1/bits/stl_tree.h","/usr/include/c++/8.2.1/bits/allocator.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++allocator.h","/usr/include/c++/8.2.1/ext/new_allocator.h","/usr/include/c++/8.2.1/bits/stl_function.h","/usr/include/c++/8.2.1/ext/aligned_buffer.h","/usr/include/c++/8.2.1/bits/stl_map.h","/usr/include/c++/8.2.1/tuple","/usr/include/c++/8.2.1/array","/usr/include/c++/8.2.1/stdexcept","/usr/include/c++/8.2.1/string","/usr/include/c++/8.2.1/bits/stringfwd.h","/usr/include/c++/8.2.1/bits/char_traits.h","/usr/include/c++/8.2.1/bits/postypes.h","/usr/include/c++/8.2.1/cwchar","/usr/include/wchar.h","/usr/include/bits/types/mbstate_t.h","/usr/include/c++/8.2.1/cstdint","/usr/lib/clang/7.0.1/include/stdint.h","/usr/include/stdint.h","/usr/include/bits/stdint-uintn.h","/usr/include/c++/8.2.1/bits/localefwd.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++locale.h","/usr/include/c++/8.2.1/clocale","/usr/include/locale.h","/usr/include/c++/8.2.1/iosfwd","/usr/include/c++/8.2.1/cctype","/usr/include/ctype.h","/usr/include/c++/8.2.1/bits/ostream_insert.h","/usr/include/c++/8.2.1/bits/range_access.h","/usr/include/c++/8.2.1/bits/basic_string.h","/usr/include/c++/8.2.1/ext/atomicity.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/gthr.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h","/usr/include/pthread.h","/usr/include/sched.h","/usr/include/bits/sched.h","/usr/include/time.h","/usr/include/bits/time.h","/usr/include/bits/timex.h","/usr/include/bits/types/struct_tm.h","/usr/include/bits/types/struct_itimerspec.h","/usr/include/bits/setjmp.h","/usr/include/c++/8.2.1/ext/string_conversions.h","/usr/include/c++/8.2.1/cstdio","/usr/include/stdio.h","/usr/include/bits/types/__fpos_t.h","/usr/include/bits/types/__fpos64_t.h","/usr/include/bits/types/struct_FILE.h","/usr/include/bits/types/cookie_io_functions_t.h","/usr/include/c++/8.2.1/cerrno","/usr/include/errno.h","/usr/include/bits/errno.h","/usr/include/linux/errno.h","/usr/include/asm/errno.h","/usr/include/asm-generic/errno.h","/usr/include/c++/8.2.1/bits/functional_hash.h","/usr/include/c++/8.2.1/bits/basic_string.tcc","/usr/include/c++/8.2.1/bits/uses_allocator.h","/usr/include/c++/8.2.1/bits/invoke.h","/usr/include/c++/8.2.1/bits/stl_multimap.h","/usr/local/include/faust/gui/JSONUIDecoder.h","/usr/include/c++/8.2.1/vector","/usr/include/c++/8.2.1/bits/stl_uninitialized.h","/usr/include/c++/8.2.1/bits/stl_vector.h","/usr/include/c++/8.2.1/bits/stl_bvector.h","/usr/include/c++/8.2.1/sstream","/usr/include/c++/8.2.1/istream","/usr/include/c++/8.2.1/ios","/usr/include/c++/8.2.1/bits/ios_base.h","/usr/include/c++/8.2.1/bits/locale_classes.h","/usr/include/c++/8.2.1/system_error","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/error_constants.h","/usr/include/c++/8.2.1/streambuf","/usr/include/c++/8.2.1/bits/basic_ios.h","/usr/include/c++/8.2.1/bits/locale_facets.h","/usr/include/c++/8.2.1/cwctype","/usr/include/wctype.h","/usr/include/bits/wctype-wchar.h","/usr/include/c++/8.2.1/bits/streambuf_iterator.h","/usr/include/c++/8.2.1/ostream","/usr/include/c++/8.2.1/bits/ostream.tcc","/usr/include/c++/8.2.1/bits/istream.tcc","/usr/local/include/faust/gui/SimpleParser.h","/usr/include/c++/8.2.1/fstream","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/basic_file.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++io.h","/usr/include/c++/8.2.1/bits/fstream.tcc","/usr/include/c++/8.2.1/iostream","/usr/local/include/faust/dsp/dsp.h","/usr/lib/clang/7.0.1/include/xmmintrin.h","/usr/lib/clang/7.0.1/include/mm_malloc.h","/usr/include/c++/8.2.1/stdlib.h","/usr/lib/clang/7.0.1/include/emmintrin.h","/usr/local/include/faust/dsp/dsp-adapter.h","/usr/local/include/faust/dsp/faust-poly-engine.h","/usr/include/c++/8.2.1/math.h","/usr/local/include/faust/audio/audio.h","/usr/include/c++/8.2.1/set","/usr/include/c++/8.2.1/bits/stl_set.h","/usr/include/c++/8.2.1/bits/stl_multiset.h","/usr/local/include/faust/gui/JSONUI.h","/usr/local/include/faust/gui/PathBuilder.h","/usr/local/include/faust/gui/APIUI.h","/usr/local/include/faust/gui/ValueConverter.h","/usr/include/assert.h","/usr/local/include/faust/gui/MidiUI.h","/usr/local/include/faust/gui/GUI.h","/usr/include/c++/8.2.1/list","/usr/include/c++/8.2.1/bits/stl_list.h","/usr/include/c++/8.2.1/bits/allocated_ptr.h","/usr/local/include/faust/gui/ring-buffer.h","/usr/local/include/faust/midi/midi.h","/usr/local/include/faust/dsp/poly-dsp.h","/usr/lib/clang/7.0.1/include/limits.h","/usr/include/limits.h","/usr/include/bits/posix1_lim.h","/usr/include/bits/local_lim.h","/usr/include/bits/xopen_lim.h","/usr/local/include/faust/dsp/dsp-combiner.h","/usr/local/include/faust/gui/MapUI.h","/usr/local/include/faust/dsp/proxy-dsp.h","/usr/include/bits/mathcalls-helper-functions.h","/usr/include/bits/mathcalls.h","/usr/include/bits/mathcalls-narrow.h","/usr/include/bits/iscanonical.h","/usr/include/bits/types/__locale_t.h","/usr/include/bits/types/__sigset_t.h","/usr/include/c++/8.2.1/bits/stl_relops.h","/usr/include/c++/8.2.1/bits/predefined_ops.h","/usr/lib/clang/7.0.1/include/__stddef_max_align_t.h","/usr/include/c++/8.2.1/backward/binders.h","/usr/lib/clang/7.0.1/include/stdarg.h","/usr/include/bits/types/wint_t.h","/usr/include/bits/types/__mbstate_t.h","/usr/include/bits/types/__FILE.h","/usr/include/bits/types/FILE.h","/usr/include/c++/8.2.1/bits/cxxabi_forced.h","/usr/include/bits/types/struct_sched_param.h","/usr/include/bits/cpu-set.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/atomic_word.h","/usr/include/bits/sys_errlist.h","/usr/include/bits/types/error_t.h","/usr/local/include/faust/gui/meta.h","/usr/local/include/faust/gui/UI.h","/usr/include/c++/8.2.1/bits/vector.tcc","/usr/include/c++/8.2.1/bits/locale_classes.tcc","/usr/include/c++/8.2.1/bits/streambuf.tcc","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/ctype_base.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/ctype_inline.h","/usr/include/c++/8.2.1/bits/locale_facets.tcc","/usr/include/c++/8.2.1/bits/basic_ios.tcc","/usr/include/c++/8.2.1/bits/sstream.tcc","/usr/include/c++/8.2.1/bits/codecvt.h","/usr/lib/clang/7.0.1/include/mmintrin.h","/usr/include/c++/8.2.1/bits/list.tcc","/usr/local/include/faust/dsp/faust-engine.h","/usr/include/stdc-predef.h","/usr/include/bits/wordsize.h","/usr/include/gnu/stubs-64.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/cpu_defines.h","/usr/include/bits/typesizes.h","/usr/include/bits/libm-simd-decl-stubs.h","/usr/include/bits/flt-eval-method.h","/usr/include/bits/fp-logb.h","/usr/include/bits/fp-fast.h","/usr/include/bits/waitflags.h","/usr/include/bits/waitstatus.h","/usr/include/bits/endian.h","/usr/include/bits/stdlib-float.h","/usr/include/c++/8.2.1/bits/exception_defines.h","/usr/include/c++/8.2.1/debug/assertions.h","/usr/include/bits/wchar.h","/usr/include/bits/locale.h","/usr/include/bits/stdio_lim.h","/usr/include/asm-generic/errno-base.h","/usr/lib/clang/7.0.1/include/float.h","/usr/include/linux/limits.h","/usr/include/bits/posix2_lim.h","/usr/include/bits/uio_lim.h"],"skipped_by_preprocessor":["42:5-48:11","50:5-52:11","54:5-56:11","58:5-60:11","94:5-96:11"],"types":[{"id":0,"usr":7752526380943074086,"detailed_name":"FaustPolyEngine","short_name_offset":0,"short_name_size":15,"kind":5,"hover":"","comments":"===============API Reference==============\n==========================================","declarations":["26:7-26:22|-1|1|1"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0],"uses":["40:9-40:24|-1|1|4"]},{"id":1,"usr":15961796468509997752,"detailed_name":"MidiUI","short_name_offset":0,"short_name_size":6,"kind":5,"hover":"","comments":"","declarations":["27:7-27:13|-1|1|1"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":2,"usr":414569558205327076,"detailed_name":"OSCUI","short_name_offset":0,"short_name_size":5,"kind":5,"hover":"","comments":"","declarations":["28:7-28:12|-1|1|1"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":3,"usr":12788003789716806373,"detailed_name":"JuceOSCUI","short_name_offset":0,"short_name_size":9,"kind":5,"hover":"","comments":"","declarations":["29:7-29:16|-1|1|1"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":4,"usr":6961796207096948707,"detailed_name":"SoundUI","short_name_offset":0,"short_name_size":7,"kind":5,"hover":"","comments":"","declarations":["30:7-30:14|-1|1|1"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":5,"usr":4283351316868325195,"detailed_name":"audio","short_name_offset":0,"short_name_size":5,"kind":5,"hover":"","comments":"","declarations":["31:7-31:12|-1|1|1"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["62:34-62:39|-1|1|4","63:9-63:14|-1|1|4"]},{"id":6,"usr":1412586585224299744,"detailed_name":"dsp","short_name_offset":0,"short_name_size":3,"kind":5,"hover":"","comments":"","declarations":["32:7-32:10|-1|1|1"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["62:19-62:22|-1|1|4"]},{"id":7,"usr":14882262833107122786,"detailed_name":"dsp_factory","short_name_offset":0,"short_name_size":11,"kind":5,"hover":"","comments":"","declarations":["33:7-33:18|-1|1|1"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":8,"usr":3490980061013170351,"detailed_name":"DspFaust","short_name_offset":0,"short_name_size":8,"kind":5,"hover":"","comments":"","declarations":["73:9-73:17|-1|1|4","83:9-83:17|-1|1|4","99:10-99:18|-1|1|4"],"spell":"35:7-35:15|-1|1|2","extent":"35:1-492:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"vars":[0],"instances":[],"uses":["73:9-73:17|8|2|4","83:9-83:17|8|2|4"]}],"funcs":[{"id":0,"usr":6599136265164977173,"detailed_name":"void DspFaust::init(dsp *mono_dsp, audio *driver)","short_name_offset":15,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"62:14-62:18|8|2|1","param_spellings":["62:24-62:32","62:41-62:47"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":4847363252295094368,"detailed_name":"audio *DspFaust::createDriver(int sample_rate, int buffer_size)","short_name_offset":17,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"63:16-63:28|8|2|1","param_spellings":["63:33-63:44","63:50-63:61"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":11684694716026855312,"detailed_name":"DspFaust::DspFaust()","short_name_offset":0,"short_name_size":8,"kind":9,"storage":1,"hover":"","comments":"--------------`DspFaust()`----------------\n Default constructor, to be used wih audio drivers\n/ that impose their sample rate and buffer size\n (like JACK and JUCE)\n\n----","declarations":[{"spell":"73:9-73:17|8|2|1","param_spellings":[]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":15823415009364064670,"detailed_name":"DspFaust::DspFaust(int, int)","short_name_offset":0,"short_name_size":8,"kind":9,"storage":1,"hover":"","comments":"--------------`DspFaust(int SR, int BS)`----------------\n Constructor.\n\n #### Arguments\n\n * `SR`: sampling rate\n * `BS`: buffer size\n--------------------------------------------------------","declarations":[{"spell":"83:9-83:17|8|2|1","param_spellings":["83:21-83:21","83:26-83:26"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":2589300918931720192,"detailed_name":"DspFaust::~DspFaust() noexcept","short_name_offset":10,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"No virtual destructor since DspFaust does not have any virtual methods and is not supposed to be subclassed","declarations":[{"spell":"99:9-99:18|8|2|1","param_spellings":[]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":4356706849868435105,"detailed_name":"bool DspFaust::start()","short_name_offset":15,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"---------------------`bool start()`---------------------\n Start the audio processing.\n\n Returns `true` if successful and `false` if not.\n--------------------------------------------------------","declarations":[{"spell":"106:14-106:19|8|2|1","param_spellings":[]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":5094520133552742199,"detailed_name":"void DspFaust::stop()","short_name_offset":15,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"-----------------`void stop()`--------------------------\n Stop the audio processing. \n--------------------------------------------------------","declarations":[{"spell":"111:14-111:18|8|2|1","param_spellings":[]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":17104438810090010394,"detailed_name":"bool DspFaust::isRunning()","short_name_offset":15,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"---------------------`bool isRunning()`-----------------\n Returns `true` if audio is running.\n--------------------------------------------------------","declarations":[{"spell":"116:14-116:23|8|2|1","param_spellings":[]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":3551852365125404255,"detailed_name":"unsigned long DspFaust::keyOn(int, int)","short_name_offset":24,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"--------`long keyOn(int pitch, int velocity)`-----------\n Instantiate a new polyphonic voice. This method can\n only be used if the `[style:poly]` metadata is used in\n the Faust code or if the `-polyvoices` flag has been\n provided before compilation.\n\n `keyOn` will return 0 if the Faust object is not\n polyphonic or the address to the allocated voice as\n a `long` otherwise. This value can be used later with\n [`setVoiceParamValue`](#setvoiceparamvalue) or\n [`getVoiceParamValue`](#getvoiceparamvalue) to access\n the parameters of a specific voice.\n\n #### Arguments\n\n * `pitch`: MIDI note number (0-127)\n * `velocity`: MIDI velocity (0-127)\n--------------------------------------------------------","declarations":[{"spell":"136:23-136:28|8|2|1","param_spellings":["136:32-136:32","136:37-136:37"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":12808877263687393086,"detailed_name":"int DspFaust::keyOff(int)","short_name_offset":14,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"----------------`int keyOff(int pitch)`-----------------\n De-instantiate a polyphonic voice. This method can\n only be used if the `[style:poly]` metadata is used in\n the Faust code or if the `-nvoices` flag has been\n provided before compilation.\n\n `keyOff` will return 0 if the object is not polyphonic\n and 1 otherwise.\n\n #### Arguments\n\n * `pitch`: MIDI note number (0-127), should be the same\n as the one used for `keyOn`\n--------------------------------------------------------","declarations":[{"spell":"152:13-152:19|8|2|1","param_spellings":["152:23-152:23"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":10135871274029775907,"detailed_name":"unsigned long DspFaust::newVoice()","short_name_offset":24,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"-------------------`long newVoice()`--------------------\n Instantiate a new polyphonic voice. This method can\n only be used if the `[style:poly]` metadata is used in\n the Faust code or if `-nvoices` flag has been\n provided before compilation.\n\n `newVoice` will return 0 if the Faust object is not\n polyphonic or the address to the allocated voice as\n a `long` otherwise. This value can be used later with\n `setVoiceParamValue`, `getVoiceParamValue` or\n `deleteVoice` to access the parameters of a specific\n voice.\n--------------------------------------------------------","declarations":[{"spell":"167:23-167:31|8|2|1","param_spellings":[]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":2265949224941444670,"detailed_name":"int DspFaust::deleteVoice(unsigned long)","short_name_offset":14,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"---------`int deleteVoice(long voice)`------------------\n De-instantiate a polyphonic voice. This method can\n only be used if the `[style:poly]` metadata is used in\n the Faust code or if `-polyvoices` flag has been\n provided before compilation.\n\n `deleteVoice` will return 0 if the object is not polyphonic\n and 1 otherwise.\n\n #### Arguments\n\n * `voice`: the address of the voice given by `newVoice`\n--------------------------------------------------------","declarations":[{"spell":"182:13-182:24|8|2|1","param_spellings":["182:38-182:38"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":18419305604847959953,"detailed_name":"void DspFaust::allNotesOff()","short_name_offset":15,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"-----------------`void allNotesOff()`----------------\n Gently terminates all the active voices. \n--------------------------------------------------------","declarations":[{"spell":"187:14-187:25|8|2|1","param_spellings":[]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":14082261526327254895,"detailed_name":"void DspFaust::propagateMidi(int, double, int, int, int, int)","short_name_offset":15,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"-------`void propagateMidi(int count, double time, int type, int channel, int data1, int data2)`--------\n Take a raw MIDI message and propagate it to the Faust\n DSP object. This method can be used concurrently with\n [`keyOn`](#keyOn) and [`keyOff`](#keyOff).\n\n `propagateMidi` can\n only be used if the `[style:poly]` metadata is used in\n the Faust code or if `-polyvoices` flag has been\n provided before compilation.\n\n #### Arguments\n\n * `count`: size of the message (1-3)\n * `time`: time stamp\n * `type`: message type (byte)\n * `channel`: channel number\n * `data1`: first data byte (should be `null` if `count<2`)\n * `data2`: second data byte (should be `null` if `count<3`)\n--------------------------------------------------------","declarations":[{"spell":"208:14-208:27|8|2|1","param_spellings":["208:31-208:31","208:39-208:39","208:44-208:44","208:49-208:49","208:54-208:54","208:59-208:59"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":9655077807872238993,"detailed_name":"const char *DspFaust::getJSONUI()","short_name_offset":22,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"-----------------`const char* getJSONUI()`----------------\n Returns the JSON description of the UI of the Faust object. \n--------------------------------------------------------","declarations":[{"spell":"213:21-213:30|8|2|1","param_spellings":[]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":8287386567392890107,"detailed_name":"const char *DspFaust::getJSONMeta()","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"-----------------`const char* getJSONMeta()`----------------\n Returns the JSON description of the metadata of the Faust object. \n--------------------------------------------------------","declarations":[{"spell":"218:21-218:32|8|2|1","param_spellings":[]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":14213332142671981527,"detailed_name":"int DspFaust::getParamsCount()","short_name_offset":14,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"-----------------`int getParamsCount()`-----------------\n Returns the number of parameters of the Faust object. \n--------------------------------------------------------","declarations":[{"spell":"223:13-223:27|8|2|1","param_spellings":[]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":14424907317889581164,"detailed_name":"void DspFaust::setParamValue(const char *, float)","short_name_offset":15,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"----`void setParamValue(const char* address, float value)`------\n Set the value of one of the parameters of the Faust\n object in function of its address (path).\n\n #### Arguments\n\n * `address`: address (path) of the parameter\n * `value`: value of the parameter\n--------------------------------------------------------","declarations":[{"spell":"234:14-234:27|8|2|1","param_spellings":["234:39-234:39","234:46-234:46"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":17775290647325297093,"detailed_name":"void DspFaust::setParamValue(int, float)","short_name_offset":15,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"----`void setParamValue(int id, float value)`---\n Set the value of one of the parameters of the Faust\n object in function of its id.\n\n #### Arguments\n\n * `id`: id of the parameter\n * `value`: value of the parameter\n--------------------------------------------------------","declarations":[{"spell":"245:14-245:27|8|2|1","param_spellings":["245:31-245:31","245:38-245:38"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":3566039854478759457,"detailed_name":"float DspFaust::getParamValue(const char *)","short_name_offset":16,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"----`float getParamValue(const char* address)`----------\n Returns the value of a parameter in function of its\n address (path).\n\n #### Arguments\n\n * `address`: address (path) of the parameter\n--------------------------------------------------------","declarations":[{"spell":"255:15-255:28|8|2|1","param_spellings":["255:40-255:40"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":16512579664151443258,"detailed_name":"float DspFaust::getParamValue(int)","short_name_offset":16,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"---------`float getParamValue(int id)`----------\n Returns the value of a parameter in function of its\n id.\n\n #### Arguments\n\n * `id`: id of the parameter\n--------------------------------------------------------","declarations":[{"spell":"265:15-265:28|8|2|1","param_spellings":["265:32-265:32"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":3801538726817130384,"detailed_name":"void DspFaust::setVoiceParamValue(const char *, unsigned long, float)","short_name_offset":15,"short_name_size":18,"kind":6,"storage":1,"hover":"","comments":"----`void setVoiceParamValue(const char* address, long voice, float value)`-----\n Set the value of one of the parameters of the Faust\n object in function of its address (path) for a\n specific voice.\n\n #### Arguments\n\n * `address`: address (path) of the parameter\n * `voice`: address of the polyphonic voice (retrieved\n from `keyOn`\n * `value`: value of the parameter\n--------------------------------------------------------","declarations":[{"spell":"279:14-279:32|8|2|1","param_spellings":["279:44-279:44","279:59-279:59","279:66-279:66"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":5141702227655582892,"detailed_name":"void DspFaust::setVoiceParamValue(int, unsigned long, float)","short_name_offset":15,"short_name_size":18,"kind":6,"storage":1,"hover":"","comments":"----`void setVoiceValue(int id, long voice, float value)`-----\n Set the value of one of the parameters of the Faust\n object in function of its id for a\n specific voice.\n\n #### Arguments\n\n * `id`: id of the parameter\n * `voice`: address of the polyphonic voice (retrieved\n from `keyOn`\n * `value`: value of the parameter\n--------------------------------------------------------","declarations":[{"spell":"293:14-293:32|8|2|1","param_spellings":["293:36-293:36","293:51-293:51","293:58-293:58"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":10504137551521887312,"detailed_name":"float DspFaust::getVoiceParamValue(const char *, unsigned long)","short_name_offset":16,"short_name_size":18,"kind":6,"storage":1,"hover":"","comments":"----`float getVoiceParamValue(const char* address, long voice)`----\n Returns the value of a parameter in function of its\n address (path) for a specific voice.\n\n #### Arguments\n\n * `address`: address (path) of the parameter\n * `voice`: address of the polyphonic voice (retrieved\n from `keyOn`)\n--------------------------------------------------------","declarations":[{"spell":"305:15-305:33|8|2|1","param_spellings":["305:45-305:45","305:60-305:60"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":16003052809737857853,"detailed_name":"float DspFaust::getVoiceParamValue(int, unsigned long)","short_name_offset":16,"short_name_size":18,"kind":6,"storage":1,"hover":"","comments":"----`float getVoiceParamValue(int id, long voice)`----\n Returns the value of a parameter in function of its\n id for a specific voice.\n\n #### Arguments\n\n * `id`: id of the parameter\n * `voice`: address of the polyphonic voice (retrieved\n from `keyOn`)\n--------------------------------------------------------","declarations":[{"spell":"317:15-317:33|8|2|1","param_spellings":["317:37-317:37","317:52-317:52"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":11285399896050014524,"detailed_name":"const char *DspFaust::getParamAddress(int)","short_name_offset":22,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"----`const char* getParamAddress(int id)`---------------\n Returns the address (path) of a parameter in function\n of its ID.\n\n #### Arguments\n\n * `id`: id of the parameter\n--------------------------------------------------------","declarations":[{"spell":"327:21-327:36|8|2|1","param_spellings":["327:40-327:40"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":26,"usr":7980138491792488761,"detailed_name":"const char *DspFaust::getVoiceParamAddress(int, unsigned long)","short_name_offset":22,"short_name_size":20,"kind":6,"storage":1,"hover":"","comments":"----`const char* getVoiceParamAddress(int id, long voice)`-----\n Returns the address (path) of a parameter in function\n of its ID.\n\n #### Arguments\n\n * `id`: id of the parameter\n * `voice`: address of the polyphonic voice (retrieved\n from `keyOn`)\n--------------------------------------------------------","declarations":[{"spell":"339:21-339:41|8|2|1","param_spellings":["339:45-339:45","339:60-339:60"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":27,"usr":16985608303911073106,"detailed_name":"float DspFaust::getParamMin(const char *)","short_name_offset":16,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"-------`float getParamMin(const char* address)`---------\n Returns the minimum value of a parameter in function of\n its address (path).\n\n #### Arguments\n\n * `address`: address (path) of the parameter\n--------------------------------------------------------","declarations":[{"spell":"349:15-349:26|8|2|1","param_spellings":["349:38-349:38"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":28,"usr":1841993077468540601,"detailed_name":"float DspFaust::getParamMin(int)","short_name_offset":16,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"--------------`float getParamMin(int id)`---------------\n Returns the minimum value of a parameter in function\n of its ID.\n\n #### Arguments\n\n * `id`: id of the parameter\n--------------------------------------------------------","declarations":[{"spell":"359:15-359:26|8|2|1","param_spellings":["359:30-359:30"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":29,"usr":8010101898450333615,"detailed_name":"float DspFaust::getParamMax(const char *)","short_name_offset":16,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"-------`float getParamMax(const char* address)`---------\n Returns the maximum value of a parameter in function of\n its address (path).\n\n #### Arguments\n\n * `address`: address (path) of the parameter\n--------------------------------------------------------","declarations":[{"spell":"369:15-369:26|8|2|1","param_spellings":["369:38-369:38"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":30,"usr":17879729141377729203,"detailed_name":"float DspFaust::getParamMax(int)","short_name_offset":16,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"--------------`float getParamMax(int id)`---------------\n Returns the maximum value of a parameter in function\n of its ID.\n\n #### Arguments\n\n * `id`: id of the parameter\n--------------------------------------------------------","declarations":[{"spell":"379:15-379:26|8|2|1","param_spellings":["379:30-379:30"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":31,"usr":8920543821154356272,"detailed_name":"float DspFaust::getParamInit(const char *)","short_name_offset":16,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"-------`float getParamInit(const char* address)`---------\n Returns the default value of a parameter in function of\n its address (path).\n\n #### Arguments\n\n * `address`: address (path) of the parameter\n--------------------------------------------------------","declarations":[{"spell":"389:15-389:27|8|2|1","param_spellings":["389:39-389:39"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":32,"usr":18135688059416739918,"detailed_name":"float DspFaust::getParamInit(int)","short_name_offset":16,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"--------------`float getParamInit(int id)`---------------\n Returns the default value of a parameter in function\n of its ID.\n\n #### Arguments\n\n * `id`: id of the parameter\n--------------------------------------------------------","declarations":[{"spell":"399:15-399:27|8|2|1","param_spellings":["399:31-399:31"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":33,"usr":10029553523030747588,"detailed_name":"const char *DspFaust::getMetadata(const char *, const char *)","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"-----`const char* getMetadata(const char* address, const char* key)`-----\n Returns the metadataof a parameter in function of\n its address (path) and the metadata key.\n\n #### Arguments\n\n * `address`: address (path) of the parameter\n--------------------------------------------------------","declarations":[{"spell":"409:21-409:32|8|2|1","param_spellings":["409:44-409:44","409:57-409:57"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":34,"usr":2227322470727409152,"detailed_name":"const char *DspFaust::getMetadata(int, const char *)","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"----`const char* getMetadata(int id, const char* key)`---------------\n Returns the metadataof a parameter in function of\n its iD and the metadata key.\n\n #### Arguments\n\n * `id`: id of the parameter\n--------------------------------------------------------","declarations":[{"spell":"419:21-419:32|8|2|1","param_spellings":["419:36-419:36","419:49-419:49"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":35,"usr":1294548869213717654,"detailed_name":"void DspFaust::propagateAcc(int, float)","short_name_offset":15,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"----`void propagateAcc(int acc, float v)`---------------\n Propagate the RAW value of a specific accelerometer\n axis to the Faust object.\n\n #### Arguments\n\n * `acc`: the accelerometer axis (**0**: x, **1**: y, **2**: z)\n * `v`: the RAW acceleromter value in m/s\n--------------------------------------------------------","declarations":[{"spell":"430:14-430:26|8|2|1","param_spellings":["430:30-430:30","430:37-430:37"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":36,"usr":13120471104531362033,"detailed_name":"void DspFaust::setAccConverter(int, int, int, float, float, float)","short_name_offset":15,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"----`void setAccConverter(int p, int acc, int curve, float amin, float amid, float amax)`-----\n Set the conversion curve for the accelerometer.\n\n #### Arguments\n\n * `p`: the UI parameter id\n * `acc`: the accelerometer axis (**0**: x, **1**: y, **2**: z)\n * `curve`: the curve (**0**: up, **1**: down, **2**: up and down)\n * `amin`: mapping min point\n * `amid`: mapping middle point\n * `amax`: mapping max point\n--------------------------------------------------------\n TODO: eventually should add a link to tutorials on this in the doc","declarations":[{"spell":"445:14-445:29|8|2|1","param_spellings":["445:33-445:33","445:38-445:38","445:43-445:43","445:50-445:50","445:57-445:57","445:64-445:64"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":37,"usr":1819263375236306631,"detailed_name":"void DspFaust::propagateGyr(int, float)","short_name_offset":15,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"----`void propagateGyr(int gyr, float v)`---------------\n Propagate the RAW value of a specific gyroscope\n axis to the Faust object.\n\n #### Arguments\n\n * `gyr`: the gyroscope axis (**0**: x, **1**: y, **2**: z)\n * `v`: the RAW acceleromter value in m/s\n--------------------------------------------------------","declarations":[{"spell":"456:14-456:26|8|2|1","param_spellings":["456:30-456:30","456:37-456:37"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":38,"usr":6484316745910300332,"detailed_name":"void DspFaust::setGyrConverter(int, int, int, float, float, float)","short_name_offset":15,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"----`void setGyrConverter(int p, int gyr, int curve, float amin, float amid, float amax)`-----\n Set the conversion curve for the gyroscope.\n\n #### Arguments\n\n * `p`: the UI parameter id\n * `gyr`: the gyroscope axis (**0**: x, **1**: y, **2**: z)\n * `curve`: the curve (**0**: up, **1**: down, **2**: up and down)\n * `amin`: mapping min point\n * `amid`: mapping middle point\n * `amax`: mapping max point\n--------------------------------------------------------\n TODO: eventually should add a link to tutorials on this in the doc","declarations":[{"spell":"471:14-471:29|8|2|1","param_spellings":["471:33-471:33","471:38-471:38","471:43-471:43","471:50-471:50","471:57-471:57","471:64-471:64"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":39,"usr":16257322715545329296,"detailed_name":"float DspFaust::getCPULoad()","short_name_offset":16,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"------------------`float getCPULoad()`------------------\n Returns the CPU load.\n--------------------------------------------------------","declarations":[{"spell":"476:15-476:25|8|2|1","param_spellings":[]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":40,"usr":15689197430560538924,"detailed_name":"bool DspFaust::configureOSC(bool xmit, int inport, int outport, int errport, const char *address)","short_name_offset":15,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"----`void configureOSC(bool xmit, int inport, int outport, int errport, const char* address)`---------------\n Change the OSC configuration\n\n #### Arguments\n\n * `xmit`: the xmit state (on/off)\n * `inport`: the input port number\n * `outport`: the output port number\n * `errport`: the error port number\n * `address`: the destination IP address\n--------------------------------------------------------","declarations":[{"spell":"489:14-489:26|8|2|1","param_spellings":["489:32-489:36","489:42-489:48","489:54-489:61","489:67-489:74","489:88-489:95"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":41,"usr":17502800949937025587,"detailed_name":"int DspFaust::getScreenColor()","short_name_offset":14,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"491:13-491:27|8|2|1","param_spellings":[]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":6880241205312834053,"detailed_name":"FaustPolyEngine *DspFaust::fPolyEngine","short_name_offset":27,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"40:26-40:37|8|2|2","extent":"40:9-40:37|8|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":1,"usr":90116413080784268,"detailed_name":"__faust_api__","short_name_offset":0,"short_name_size":13,"hover":"#define __faust_api__","comments":"","declarations":[],"spell":"21:9-21:22|-1|1|2","extent":"21:9-21:22|-1|1|0","uses":[],"kind":255,"storage":0}]}