15
{"last_modification_time":1548168587,"language":2,"import_file":"/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/matrix/example.cpp","args":["clang++","-working-directory=/home/dark/proj/faust/","/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/matrix/example.cpp","-resource-dir=/usr/lib/clang/7.0.1","-Wno-unknown-warning-option","-fparse-all-comments","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/x86_64-pc-linux-gnu","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/backward","-isystem/usr/local/include","-isystem/usr/lib/clang/7.0.1/include","-isystem/usr/include"],"includes":[{"line":48,"resolved_path":"/usr/include/c++/8.2.1/stdlib.h"},{"line":49,"resolved_path":"/usr/include/stdio.h"},{"line":50,"resolved_path":"/usr/include/string.h"},{"line":52,"resolved_path":"/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/matrix/matrixBLAS.h"},{"line":53,"resolved_path":"/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/matrix/matrixLAPACK.h"}],"dependencies":["/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/matrix/example.cpp","/usr/include/c++/8.2.1/stdlib.h","/usr/include/c++/8.2.1/cstdlib","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++config.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/os_defines.h","/usr/include/features.h","/usr/include/sys/cdefs.h","/usr/include/gnu/stubs.h","/usr/include/stdlib.h","/usr/include/bits/libc-header-start.h","/usr/include/bits/floatn.h","/usr/include/bits/floatn-common.h","/usr/include/bits/types/locale_t.h","/usr/include/sys/types.h","/usr/include/bits/types.h","/usr/include/bits/types/clock_t.h","/usr/include/bits/types/clockid_t.h","/usr/include/bits/types/time_t.h","/usr/include/bits/types/timer_t.h","/usr/include/bits/stdint-intn.h","/usr/include/endian.h","/usr/include/bits/byteswap.h","/usr/include/bits/uintn-identity.h","/usr/include/sys/select.h","/usr/include/bits/select.h","/usr/include/bits/types/sigset_t.h","/usr/include/bits/types/struct_timeval.h","/usr/include/bits/types/struct_timespec.h","/usr/include/bits/pthreadtypes.h","/usr/include/bits/thread-shared-types.h","/usr/include/bits/pthreadtypes-arch.h","/usr/include/alloca.h","/usr/include/c++/8.2.1/bits/std_abs.h","/usr/include/stdio.h","/usr/include/bits/types/__fpos_t.h","/usr/include/bits/types/__fpos64_t.h","/usr/include/bits/types/struct_FILE.h","/usr/include/bits/types/cookie_io_functions_t.h","/usr/include/string.h","/usr/include/strings.h","/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/matrix/matrixBLAS.h","/usr/lib/clang/7.0.1/include/stddef.h","/usr/include/bits/types/__locale_t.h","/usr/include/bits/types/__sigset_t.h","/usr/lib/clang/7.0.1/include/stdarg.h","/usr/include/bits/types/__mbstate_t.h","/usr/include/bits/types/__FILE.h","/usr/include/bits/types/FILE.h","/usr/include/bits/sys_errlist.h","/usr/include/stdc-predef.h","/usr/include/bits/wordsize.h","/usr/include/gnu/stubs-64.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/cpu_defines.h","/usr/include/bits/waitflags.h","/usr/include/bits/waitstatus.h","/usr/include/bits/typesizes.h","/usr/include/bits/endian.h","/usr/include/bits/stdlib-float.h","/usr/include/bits/stdio_lim.h"],"skipped_by_preprocessor":["59:1-61:7","239:5-251:10"],"types":[{"id":0,"usr":12703294271988578582,"detailed_name":"Matrix","short_name_offset":0,"short_name_size":6,"kind":5,"hover":"","comments":"","declarations":["68:3-68:9|-1|1|4","73:3-73:9|-1|1|4","76:3-76:9|-1|1|4","78:3-78:9|-1|1|4","80:3-80:9|-1|1|4","82:3-82:9|-1|1|4","84:3-84:9|-1|1|4","85:3-85:9|-1|1|4","86:4-86:10|-1|1|4"],"spell":"64:7-64:13|-1|1|2","extent":"64:1-261:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,48],"vars":[0,1,2,27],"instances":[4,6,7,11,13,15,19,20,25],"uses":["68:3-68:9|0|2|4","73:3-73:9|0|2|4","76:3-76:9|0|2|4","78:3-78:9|0|2|4","80:3-80:9|0|2|4","82:3-82:9|0|2|4","84:3-84:9|0|2|4","85:3-85:9|0|2|4","92:9-92:15|-1|1|4","93:9-93:15|-1|1|4","94:9-94:15|-1|1|4","95:3-95:9|-1|1|4","96:3-96:9|-1|1|4","97:3-97:9|-1|1|4","98:3-98:9|-1|1|4","99:3-99:9|-1|1|4","104:9-104:15|-1|1|4","107:3-107:9|-1|1|4","110:41-110:47|-1|1|4","115:25-115:31|-1|1|4","116:28-116:34|-1|1|4","117:32-117:38|-1|1|4","117:70-117:76|-1|1|4","117:106-117:112|-1|1|4","127:36-127:42|-1|1|4","127:54-127:60|-1|1|4","134:12-134:18|-1|1|4","134:30-134:36|-1|1|4","134:52-134:58|-1|1|4","140:26-140:32|-1|1|4","140:55-140:61|-1|1|4","140:80-140:86|-1|1|4","144:21-144:27|-1|1|4","144:45-144:51|-1|1|4","148:23-148:29|-1|1|4","148:65-148:71|-1|1|4","151:12-151:18|-1|1|4","156:50-156:56|-1|1|4","156:77-156:83|-1|1|4","172:23-172:29|-1|1|4","172:52-172:58|-1|1|4","177:12-177:18|-1|1|4","182:23-182:29|-1|1|4","182:50-182:56|-1|1|4","190:12-190:18|-1|1|4","195:23-195:29|-1|1|4","195:56-195:62|-1|1|4","199:12-199:18|-1|1|4","208:23-208:29|-1|1|4","208:59-208:65|-1|1|4","208:85-208:91|-1|1|4","217:12-217:18|-1|1|4","233:28-233:34|-1|1|4","233:46-233:52|-1|1|4","237:23-237:29|-1|1|4","237:55-237:61|-1|1|4","253:14-253:20|-1|1|4","264:21-264:27|-1|1|4","270:15-270:21|-1|1|4"]},{"id":1,"usr":3256883050004567963,"detailed_name":"real","short_name_offset":0,"short_name_size":4,"kind":26,"hover":"","comments":"","declarations":[],"spell":"63:16-63:20|-1|1|2","extent":"63:10-63:20|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["73:30-73:34|-1|1|4","78:25-78:29|-1|1|4","80:18-80:22|-1|1|4","82:24-82:28|-1|1|4","90:10-90:14|-1|1|4","99:30-99:34|-1|1|4","100:16-100:20|-1|1|4","101:10-101:14|-1|1|4","110:48-110:52|-1|1|4","115:32-115:36|-1|1|4","116:35-116:39|-1|1|4","117:39-117:43|-1|1|4","117:77-117:81|-1|1|4","117:113-117:117|-1|1|4","119:3-119:7|-1|1|4","127:43-127:47|-1|1|4","127:61-127:65|-1|1|4","134:19-134:23|-1|1|4","134:37-134:41|-1|1|4","134:59-134:63|-1|1|4","140:33-140:37|-1|1|4","140:62-140:66|-1|1|4","140:87-140:91|-1|1|4","144:28-144:32|-1|1|4","144:52-144:56|-1|1|4","148:30-148:34|-1|1|4","148:47-148:51|-1|1|4","148:72-148:76|-1|1|4","150:5-150:9|-1|1|4","151:19-151:23|-1|1|4","156:17-156:21|-1|1|4","156:57-156:61|-1|1|4","156:84-156:88|-1|1|4","163:5-163:9|-1|1|4","172:30-172:34|-1|1|4","172:59-172:63|-1|1|4","174:5-174:9|-1|1|4","174:22-174:26|-1|1|4","174:44-174:48|-1|1|4","175:43-175:47|-1|1|4","177:19-177:23|-1|1|4","182:30-182:34|-1|1|4","182:57-182:61|-1|1|4","189:5-189:9|-1|1|4","190:19-190:23|-1|1|4","195:30-195:34|-1|1|4","195:63-195:67|-1|1|4","195:77-195:81|-1|1|4","197:5-197:9|-1|1|4","199:19-199:23|-1|1|4","208:30-208:34|-1|1|4","208:66-208:70|-1|1|4","208:92-208:96|-1|1|4","208:105-208:109|-1|1|4","215:5-215:9|-1|1|4","217:19-217:23|-1|1|4","233:14-233:18|-1|1|4","233:35-233:39|-1|1|4","233:53-233:57|-1|1|4","237:30-237:34|-1|1|4","237:41-237:45|-1|1|4","237:62-237:66|-1|1|4","253:21-253:25|-1|1|4","259:3-259:7|-1|1|4"]},{"id":2,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,1,9,10,17,22,26,0,1,28,29,30,31],"uses":[]},{"id":3,"usr":3,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[27],"uses":[]},{"id":4,"usr":2469344872356351398,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["264:14-264:18|-1|1|4"]},{"id":5,"usr":17682154021908153056,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["270:8-270:12|-1|1|4"]}],"funcs":[{"id":0,"usr":11877437339591989717,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["150:21-150:41|0|2|32"],"callees":[]},{"id":1,"usr":5156236463726448641,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["175:5-175:11|0|2|32"],"callees":[]},{"id":2,"usr":3372299329272243369,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["176:5-176:27|0|2|32"],"callees":[]},{"id":3,"usr":18381016531371734093,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["186:7-186:13|0|2|32","212:7-212:13|0|2|32","160:7-160:13|43|3|36","252:7-252:13|49|3|36"],"callees":[]},{"id":4,"usr":7809489054702290412,"detailed_name":"Matrix::Matrix<real>(const char *filename)","short_name_offset":8,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"load matrix from a file (see matrixIO.h for the binary file format)","declarations":[{"spell":"68:3-68:9|0|2|1","param_spellings":["68:23-68:31"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":9558913432610814552,"detailed_name":"Matrix::Matrix<real>(int m, int n, const real *data, bool makeInternalDataCopy = true, bool freeDataInDestructor = true)","short_name_offset":8,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"create a m x n matrix; \"data\" must an array of length m*n, giving the matrix entries in column-major order\nif \"makeInternalDataCopy\" is true (default), the class will internally make a copy of the data; otherwise, it will only direct its internal pointer to the user-provided array data\nif \"freeDataInDestructor\" is true (default), the class will free the data array in the destructor; if \"makeInternalDataCopy\" is false, you will typically want to set \"freeDataInDestructor\" to false too","declarations":[{"spell":"73:3-73:9|0|2|1","param_spellings":["73:14-73:15","73:21-73:22","73:37-73:41","74:15-74:35","74:49-74:69"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":12747481089060431887,"detailed_name":"Matrix::Matrix<real>(int m, int n, bool freeDataInDestructor = true)","short_name_offset":8,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"create a m x n matrix of all zeros","declarations":[{"spell":"76:3-76:9|0|2|1","param_spellings":["76:15-76:16","76:22-76:23","76:30-76:50"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":4879313089721176151,"detailed_name":"Matrix::Matrix<real>(int m, int n, real constEntry, bool freeDataInDestructor = true)","short_name_offset":8,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"create a m x n matrix of constant entries","declarations":[{"spell":"78:3-78:9|0|2|1","param_spellings":["78:15-78:16","78:22-78:23","78:30-78:40","78:47-78:67"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":7626196141389169302,"detailed_name":"Matrix::Matrix<real>(int m, real diagonal, bool freeDataInDestructor = true)","short_name_offset":8,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"create a m x m diagonal matrix with all the diagonal entries equaling \"diagonal\"","declarations":[{"spell":"80:3-80:9|0|2|1","param_spellings":["80:15-80:16","80:23-80:31","80:38-80:58"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":7130188456112973743,"detailed_name":"Matrix::Matrix<real>(int m, const real *diagonal, bool freeDataInDestructor = true)","short_name_offset":8,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"create a m x m diagonal matrix with the diagonal entries specified by the array diagonal (of length m)","declarations":[{"spell":"82:3-82:9|0|2|1","param_spellings":["82:15-82:16","82:31-82:39","82:46-82:66"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":6929578096355957871,"detailed_name":"Matrix::Matrix<real>(int m, const Matrix<real> &vec, bool freeDataInDestructor = true)","short_name_offset":8,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"create a m x m diagonal matrix with the diagonal entries specified by the m x 1 matrix \"vec\"","declarations":[{"spell":"84:3-84:9|0|2|1","param_spellings":["84:15-84:16","84:33-84:36","84:43-84:63"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":5410591959533587449,"detailed_name":"Matrix::Matrix<real>(const Matrix<real> &mtx2)","short_name_offset":8,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"85:3-85:9|0|2|1","param_spellings":["85:25-85:29"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":12692240912260319962,"detailed_name":"Matrix::~Matrix<real>()","short_name_offset":8,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"86:3-86:10|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":306581097891990194,"detailed_name":"inline int Matrix::Getm() const","short_name_offset":19,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"88:14-88:18|0|2|2","extent":"88:3-88:40|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":["150:47-150:51|42|3|36","151:30-151:34|42|3|36","158:15-158:19|43|3|36","158:30-158:34|43|3|36","164:19-164:23|43|3|36","174:57-174:61|44|3|36","175:56-175:60|44|3|36","176:33-176:37|44|3|36","177:43-177:47|44|3|36","184:14-184:18|45|3|36","186:96-186:100|45|3|36","189:40-189:44|45|3|36","190:30-190:34|45|3|36","190:43-190:47|45|3|36","197:46-197:50|46|3|36","199:43-199:47|46|3|36","210:13-210:17|47|3|36","210:27-210:31|47|3|36","212:97-212:101|47|3|36","212:109-212:113|47|3|36","215:48-215:52|47|3|36"],"callees":[]},{"id":14,"usr":6925296448885805722,"detailed_name":"inline int Matrix::Getn() const","short_name_offset":19,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"89:14-89:18|0|2|2","extent":"89:3-89:40|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":["150:60-150:64|42|3|36","151:42-151:46|42|3|36","158:47-158:51|43|3|36","158:62-158:66|43|3|36","164:33-164:37|43|3|36","174:71-174:75|44|3|36","175:70-175:74|44|3|36","176:46-176:50|44|3|36","177:30-177:34|44|3|36","184:29-184:33|45|3|36","186:109-186:113|45|3|36","197:59-197:63|46|3|36","199:30-199:34|46|3|36","215:60-215:64|47|3|36","215:72-215:76|47|3|36","217:29-217:33|47|3|36","217:41-217:45|47|3|36"],"callees":[]},{"id":15,"usr":16661876799700009260,"detailed_name":"inline real *Matrix::GetData() const","short_name_offset":21,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"90:17-90:24|0|2|2","extent":"90:3-90:49|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":["150:79-150:86|42|3|36","175:25-175:32|44|3|36","189:53-189:60|45|3|36","198:12-198:19|46|3|36","216:11-216:18|47|3|36","216:26-216:33|47|3|36"],"callees":[]},{"id":16,"usr":8115420827981265047,"detailed_name":"const Matrix<real> Matrix::operator+(const Matrix<real> &mtx2) const","short_name_offset":27,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"92:16-92:25|0|2|1","param_spellings":["92:42-92:46"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":8966147177890998944,"detailed_name":"const Matrix<real> Matrix::operator-(const Matrix<real> &mtx2) const","short_name_offset":27,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"93:16-93:25|0|2|1","param_spellings":["93:42-93:46"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":2496925508453206661,"detailed_name":"const Matrix<real> Matrix::operator*(const Matrix<real> &mtx2) const","short_name_offset":27,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"94:16-94:25|0|2|1","param_spellings":["94:42-94:46"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":11084289448043704375,"detailed_name":"Matrix<real> &Matrix::operator=(const Matrix<real> &mtx2)","short_name_offset":22,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"95:12-95:21|0|2|1","param_spellings":["95:38-95:42"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":427045541452477263,"detailed_name":"Matrix<real> &Matrix::operator+=(const Matrix<real> &mtx2)","short_name_offset":22,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"96:12-96:22|0|2|1","param_spellings":["96:39-96:43"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":2852722846544419874,"detailed_name":"Matrix<real> &Matrix::operator-=(const Matrix<real> &mtx2)","short_name_offset":22,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"97:12-97:22|0|2|1","param_spellings":["97:39-97:43"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":12151540507570300697,"detailed_name":"Matrix<real> &Matrix::operator*=(const Matrix<real> &mtx2)","short_name_offset":22,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"98:12-98:22|0|2|1","param_spellings":["98:39-98:43"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":10399799638792687103,"detailed_name":"Matrix<real> &Matrix::operator*=(const real alpha)","short_name_offset":22,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"99:12-99:22|0|2|1","param_spellings":["99:35-99:40"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":14919809759953696045,"detailed_name":"template <class real> inline const real &Matrix::operator()(int row, int column) const","short_name_offset":49,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"100:23-100:33|0|2|1","param_spellings":["100:39-100:42","100:48-100:55"]}],"spell":"264:35-264:45|0|2|2","extent":"263:1-267:2|-1|1|0","declaring_type":0,"bases":[],"derived":[],"vars":[28,29],"uses":[],"callees":[]},{"id":25,"usr":10424802836340080294,"detailed_name":"template <class real> inline real &Matrix::operator()(int row, int column)","short_name_offset":43,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"101:17-101:27|0|2|1","param_spellings":["101:33-101:36","101:42-101:49"]}],"spell":"270:29-270:39|0|2|2","extent":"269:1-273:2|-1|1|0","declaring_type":0,"bases":[],"derived":[],"vars":[30,31],"uses":[],"callees":[]},{"id":26,"usr":501672677399160771,"detailed_name":"const Matrix<real> Matrix::MultiplyT(const Matrix<real> &mtx2) const","short_name_offset":27,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"output = trans(this) * mtx2","declarations":[{"spell":"104:16-104:25|0|2|1","param_spellings":["104:42-104:46"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":27,"usr":16629095592365017108,"detailed_name":"Matrix<real> &Matrix::InPlaceTranspose()","short_name_offset":22,"short_name_size":16,"kind":6,"storage":1,"hover":"","comments":"transpose the matrix in place, i.e., without creating an intermediate copy buffer (useful with large matrices where the copy might otherwise not fit into memory)","declarations":[{"spell":"107:12-107:28|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":28,"usr":11307984192908453543,"detailed_name":"void Matrix::SetSubmatrix(int i, int j, const Matrix<real> &submatrix)","short_name_offset":13,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"sets the submatrix, defined by its upper-left corner at (i,j) and the dimensions of \"submatrix\", to entries from the matrix \"submatrix\"","declarations":[{"spell":"110:8-110:20|0|2|1","param_spellings":["110:25-110:26","110:32-110:33","110:56-110:65"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":29,"usr":2503568163184302735,"detailed_name":"void Matrix::RemoveRows(int rowStart, int rowEnd)","short_name_offset":13,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"112:8-112:18|0|2|1","param_spellings":["112:23-112:31","112:37-112:43"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":30,"usr":4781465442681472026,"detailed_name":"void Matrix::RemoveColumns(int columnStart, int columnEnd)","short_name_offset":13,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"113:8-113:21|0|2|1","param_spellings":["113:26-113:37","113:43-113:52"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":31,"usr":3161544709108775581,"detailed_name":"void Matrix::RemoveRowsColumns(int columnStart, int columnEnd)","short_name_offset":13,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"114:8-114:25|0|2|1","param_spellings":["114:30-114:41","114:47-114:56"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":32,"usr":8388520947152160689,"detailed_name":"void Matrix::AppendRows(const Matrix<real> &rows)","short_name_offset":13,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"115:8-115:18|0|2|1","param_spellings":["115:40-115:44"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":33,"usr":16980838307226577914,"detailed_name":"void Matrix::AppendColumns(const Matrix<real> &columns)","short_name_offset":13,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"116:8-116:21|0|2|1","param_spellings":["116:43-116:50"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":34,"usr":9079213791343403461,"detailed_name":"void Matrix::AppendRowsColumns(const Matrix<real> &bottomLeftBlock, const Matrix<real> &topRightBlock, const Matrix<real> &bottomRightBlock)","short_name_offset":13,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"117:8-117:25|0|2|1","param_spellings":["117:47-117:62","117:85-117:98","117:121-117:137"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":35,"usr":1022083569515864691,"detailed_name":"real Matrix::MaxAbsEntry() const","short_name_offset":13,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"119:8-119:19|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":36,"usr":10179250427506001446,"detailed_name":"void Matrix::Print(int numDigits = -1) const","short_name_offset":13,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"121:8-121:13|0|2|1","param_spellings":["121:18-121:27"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":37,"usr":8004067795272412800,"detailed_name":"int Matrix::Save(const char *filename) const","short_name_offset":12,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"122:7-122:11|0|2|1","param_spellings":["122:25-122:33"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":38,"usr":10289850217003289258,"detailed_name":"void Matrix::SymmetricEigenDecomposition(Matrix<real> &Q, Matrix<real> &Lambda)","short_name_offset":13,"short_name_size":27,"kind":6,"storage":1,"hover":"","comments":"factor <this matrix> = Q * Lambda * Q^T\nmatrix must be symmetric (no checks performed)\nLambda will be returned as a n x 1 vector, in ascending order","declarations":[{"spell":"127:8-127:35|0|2|1","param_spellings":["127:51-127:52","127:69-127:75"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":39,"usr":1980817617116722749,"detailed_name":"void Matrix::SVD(Matrix<real> &U, Matrix<real> &Sigma, Matrix<real> &VT)","short_name_offset":13,"short_name_size":3,"kind":6,"storage":1,"hover":"","comments":"computes SVD of matrix\nthis matrix = U * diag(Sigma) * VT\nnote: Sigma is returned as a MIN(m,n) x 1 vector\nU must be a m x MIN(m,n) matrix\nVT must be a  MIN(m,n) x n matrix","declarations":[{"spell":"134:8-134:11|0|2|1","param_spellings":["134:27-134:28","134:45-134:50","134:67-134:69"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":40,"usr":9090325505734709014,"detailed_name":"int Matrix::EigenDecomposition(Matrix<real> &EigenVectors, Matrix<real> &LambdaRe, Matrix<real> &LambdaIm)","short_name_offset":12,"short_name_size":18,"kind":6,"storage":1,"hover":"","comments":"compute eigenvalues and eigenvectors of a general matrix\neigenvectors are returned in the n x n matrix EigenVectors\neigenvalues are (in general) complex and are returned in n x 1 vectors LambdaRe and LambdaIm\nreturn value: 0 on success, xGEEV INFO on failure (a general matrix is not always diagonalizable)","declarations":[{"spell":"140:7-140:25|0|2|1","param_spellings":["140:41-140:53","140:70-140:78","140:95-140:103"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":41,"usr":5501844059313887774,"detailed_name":"int Matrix::LUSolve(const Matrix<real> &x, const Matrix<real> &rhs)","short_name_offset":12,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"solves linear system (via LU):\n(this matrix) * x = rhs","declarations":[{"spell":"144:7-144:14|0|2|1","param_spellings":["144:36-144:37","144:60-144:63"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":42,"usr":12853804059327735127,"detailed_name":"inline const Matrix<real> operator*(real alpha, const Matrix<real> &mtx2)","short_name_offset":26,"short_name_size":9,"kind":12,"storage":1,"hover":"","comments":"scalar-matrix multiplication\nexample: A = 0.37 * B;","declarations":[],"spell":"148:36-148:45|-1|1|2","extent":"148:3-152:4|0|2|0","bases":[],"derived":[],"vars":[3,4,5],"uses":[],"callees":["150:47-150:51|13|3|36","150:60-150:64|14|3|36","150:79-150:86|15|3|36","150:47-150:51|13|3|36","150:60-150:64|14|3|36","150:79-150:86|15|3|36","151:30-151:34|13|3|36","151:42-151:46|14|3|36"]},{"id":43,"usr":13904378495098168350,"detailed_name":"inline real FrobeniusInnerProduct(const Matrix<real> &mtx1, const Matrix<real> &mtx2)","short_name_offset":12,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"compute the Frobenius inner product of two matrices (sum of products of all pairwise entries)\nexample: double product = FrobeniusInnerProduct(A, B);","declarations":[],"spell":"156:22-156:43|-1|1|2","extent":"156:3-168:4|0|2|0","bases":[],"derived":[],"vars":[6,7,8,9,10],"uses":[],"callees":["158:15-158:19|13|3|36","158:30-158:34|13|3|36","158:47-158:51|14|3|36","158:62-158:66|14|3|36","160:7-160:13|3|3|36","164:19-164:23|13|3|36","164:33-164:37|14|3|36","164:19-164:23|13|3|36","164:33-164:37|14|3|36"]},{"id":44,"usr":3971006322156621260,"detailed_name":"inline const Matrix<real> Transpose(const Matrix<real> &mtx2)","short_name_offset":26,"short_name_size":9,"kind":12,"storage":1,"hover":"","comments":"transpose the matrix\nexample: A = Transpose(B);","declarations":[],"spell":"172:36-172:45|-1|1|2","extent":"172:3-178:4|0|2|0","bases":[],"derived":[],"vars":[11,12],"uses":[],"callees":["174:57-174:61|13|3|36","174:71-174:75|14|3|36","174:57-174:61|13|3|36","174:71-174:75|14|3|36","175:25-175:32|15|3|36","175:56-175:60|13|3|36","175:70-175:74|14|3|36","176:33-176:37|13|3|36","176:46-176:50|14|3|36","177:30-177:34|14|3|36","177:43-177:47|13|3|36"]},{"id":45,"usr":566156314484125302,"detailed_name":"inline const Matrix<real> Inverse(const Matrix<real> &mtx2)","short_name_offset":26,"short_name_size":7,"kind":12,"storage":1,"hover":"","comments":"compute matrix inverse\nexample: A = Inverse(B);","declarations":[],"spell":"182:36-182:43|-1|1|2","extent":"182:3-191:4|0|2|0","bases":[],"derived":[],"vars":[13,14],"uses":[],"callees":["184:14-184:18|13|3|36","184:29-184:33|14|3|36","186:96-186:100|13|3|36","186:109-186:113|14|3|36","189:40-189:44|13|3|36","189:53-189:60|15|3|36","189:40-189:44|13|3|36","189:53-189:60|15|3|36","190:30-190:34|13|3|36","190:43-190:47|13|3|36"]},{"id":46,"usr":13592184535693298367,"detailed_name":"inline const Matrix<real> PseudoInverse(const Matrix<real> &mtx2, real singularValueThreshold, int *rank)","short_name_offset":26,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"compute matrix pseudoinverse\nexample: A = PseudoInverse(B);","declarations":[],"spell":"195:36-195:49|-1|1|2","extent":"195:3-200:4|0|2|0","bases":[],"derived":[],"vars":[15,16,17,18],"uses":[],"callees":["197:46-197:50|13|3|36","197:59-197:63|14|3|36","198:12-198:19|15|3|36","197:46-197:50|13|3|36","197:59-197:63|14|3|36","198:12-198:19|15|3|36","199:30-199:34|14|3|36","199:43-199:47|13|3|36"]},{"id":47,"usr":5419337594523963317,"detailed_name":"inline const Matrix<real> LeastSquareSolve(const Matrix<real> &mtx, const Matrix<real> &rhs, real rcond, int *rank)","short_name_offset":26,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"solve the least square system: mtx * output = rhs\nrcond is the condition number beyond which matrix singular values are considered singular (see also LAPACK)\nrank is a pointer to a single integer, giving the non-singular rank of the matrix, based on rcond\nexample:  A * X = B\nint rank;\nX = LeastSquareSolve(A, B, 1e-12, &rank);","declarations":[],"spell":"208:36-208:52|-1|1|2","extent":"208:3-218:4|0|2|0","bases":[],"derived":[],"vars":[19,20,21,22,23],"uses":[],"callees":["210:13-210:17|13|3|36","210:27-210:31|13|3|36","212:97-212:101|13|3|36","212:109-212:113|13|3|36","215:48-215:52|13|3|36","215:60-215:64|14|3|36","215:72-215:76|14|3|36","216:11-216:18|15|3|36","216:26-216:33|15|3|36","215:48-215:52|13|3|36","215:60-215:64|14|3|36","215:72-215:76|14|3|36","216:11-216:18|15|3|36","216:26-216:33|15|3|36","217:29-217:33|14|3|36","217:41-217:45|14|3|36"]},{"id":48,"usr":16648231011199194981,"detailed_name":"void Matrix::MExpv(real t, const Matrix<real> &v, Matrix<real> &w)","short_name_offset":13,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"computes w = exp((this matrix)*t)v, where v and w are vectors, and t is a scalar\n\"this matrix\" must be a square matrix (denote the dimensions by m x m)\nv and w are m x 1 vectors\nnote: this routine uses the same algorithm as MExp below: it explicitly constructs exp((this matrix)*t), and then multiplies by v","declarations":[{"spell":"233:8-233:13|0|2|1","param_spellings":["233:19-233:20","233:43-233:44","233:61-233:62"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":49,"usr":3968141933456178655,"detailed_name":"inline const Matrix<real> MExp(real t, const Matrix<real> &mtx, int *code = __null)","short_name_offset":26,"short_name_size":4,"kind":12,"storage":1,"hover":"","comments":"computes A = exp(t*mtx), where A and mtx are square matrices, and t is a scalar\ncode is a pointer to an integer where the xgpasm expokit routine exit code will be stored (you can pass NULL to discard this code); normal termination is code 0","declarations":[],"spell":"237:36-237:40|-1|1|2","extent":"237:3-255:4|0|2|0","bases":[],"derived":[],"vars":[24,25,26],"uses":[],"callees":["252:7-252:13|3|3|36"]}],"vars":[{"id":0,"usr":3777879529879431166,"detailed_name":"int Matrix::m","short_name_offset":12,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"258:7-258:8|0|2|2","extent":"258:3-258:8|0|2|0","type":2,"uses":["88:36-88:37|13|3|4","266:19-266:20|24|3|4","272:19-272:20|25|3|4"],"kind":8,"storage":0},{"id":1,"usr":4060371372425012878,"detailed_name":"int Matrix::n","short_name_offset":12,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"258:10-258:11|0|2|2","extent":"258:3-258:11|0|2|0","type":2,"uses":["89:36-89:37|14|3|4"],"kind":8,"storage":0},{"id":2,"usr":11491249238187692224,"detailed_name":"real *Matrix::data","short_name_offset":14,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"259:10-259:14|0|2|2","extent":"259:3-259:14|0|2|0","uses":["90:42-90:46|15|3|4","166:23-166:27|43|3|4","166:38-166:42|43|3|4","266:10-266:14|24|3|4","272:10-272:14|25|3|4"],"kind":8,"storage":0},{"id":3,"usr":16411344222919168159,"detailed_name":"real alpha","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"148:52-148:57|42|3|2","extent":"148:47-148:57|42|3|0","uses":["150:68-150:73|42|3|4"],"kind":253,"storage":1},{"id":4,"usr":987093957811644865,"detailed_name":"const Matrix<real> &mtx2","short_name_offset":20,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"148:80-148:84|42|3|2","extent":"148:59-148:84|42|3|0","type":0,"uses":["150:42-150:46|42|3|4","150:55-150:59|42|3|4","150:74-150:78|42|3|4","151:25-151:29|42|3|4","151:37-151:41|42|3|4"],"kind":253,"storage":1},{"id":5,"usr":14332860005454819276,"detailed_name":"real *output","short_name_offset":6,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"150:12-150:18|42|3|2","extent":"150:5-150:89|42|3|0","uses":["151:49-151:55|42|3|4"],"kind":13,"storage":1},{"id":6,"usr":12883845345212372141,"detailed_name":"const Matrix<real> &mtx1","short_name_offset":20,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"156:65-156:69|43|3|2","extent":"156:44-156:69|43|3|0","type":0,"uses":["158:10-158:14|43|3|4","158:42-158:46|43|3|4","164:14-164:18|43|3|4","164:28-164:32|43|3|4","166:18-166:22|43|3|4"],"kind":253,"storage":1},{"id":7,"usr":14979684676803092780,"detailed_name":"const Matrix<real> &mtx2","short_name_offset":20,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"156:92-156:96|43|3|2","extent":"156:71-156:96|43|3|0","type":0,"uses":["158:25-158:29|43|3|4","158:57-158:61|43|3|4","166:33-166:37|43|3|4"],"kind":253,"storage":1},{"id":8,"usr":11418729071918284333,"detailed_name":"real product","short_name_offset":5,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"163:10-163:17|43|3|2","extent":"163:5-163:23|43|3|0","uses":["166:7-166:14|43|3|4","167:12-167:19|43|3|4"],"kind":13,"storage":1},{"id":9,"usr":8802432853601661998,"detailed_name":"int mn","short_name_offset":4,"short_name_size":2,"hover":"int mn = mtx1.Getm() * mtx1.Getn()","comments":"","declarations":[],"spell":"164:9-164:11|43|3|2","extent":"164:5-164:39|43|3|0","type":2,"uses":["165:20-165:22|43|3|12"],"kind":13,"storage":1},{"id":10,"usr":16004716437029065667,"detailed_name":"int i","short_name_offset":4,"short_name_size":1,"hover":"int i=0","comments":"","declarations":[],"spell":"165:13-165:14|43|3|2","extent":"165:9-165:16|43|3|0","type":2,"uses":["165:18-165:19|43|3|12","165:24-165:25|43|3|28","166:28-166:29|43|3|4","166:43-166:44|43|3|4"],"kind":13,"storage":1},{"id":11,"usr":4963604756174044825,"detailed_name":"const Matrix<real> &mtx2","short_name_offset":20,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"172:67-172:71|44|3|2","extent":"172:46-172:71|44|3|0","type":0,"uses":["174:52-174:56|44|3|4","174:66-174:70|44|3|4","175:20-175:24|44|3|4","175:51-175:55|44|3|4","175:65-175:69|44|3|4","176:28-176:32|44|3|4","176:41-176:45|44|3|4","177:25-177:29|44|3|4","177:38-177:42|44|3|4"],"kind":253,"storage":1},{"id":12,"usr":12011507654742673353,"detailed_name":"real *buffer","short_name_offset":6,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"174:12-174:18|44|3|2","extent":"174:5-174:78|44|3|0","uses":["175:12-175:18|44|3|4","176:54-176:60|44|3|4","177:51-177:57|44|3|4"],"kind":13,"storage":1},{"id":13,"usr":4942165430779224206,"detailed_name":"const Matrix<real> &mtx2","short_name_offset":20,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"182:65-182:69|45|3|2","extent":"182:44-182:69|45|3|0","type":0,"uses":["184:9-184:13|45|3|4","184:24-184:28|45|3|4","186:91-186:95|45|3|4","186:104-186:108|45|3|4","189:35-189:39|45|3|4","189:48-189:52|45|3|4","190:25-190:29|45|3|4","190:38-190:42|45|3|4"],"kind":253,"storage":1},{"id":14,"usr":14563464161109998093,"detailed_name":"real *buffer","short_name_offset":6,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"189:12-189:18|45|3|2","extent":"189:5-189:63|45|3|0","uses":["190:51-190:57|45|3|4"],"kind":13,"storage":1},{"id":15,"usr":5380875509626312644,"detailed_name":"const Matrix<real> &mtx2","short_name_offset":20,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"195:71-195:75|46|3|2","extent":"195:50-195:75|46|3|0","type":0,"uses":["197:41-197:45|46|3|4","197:54-197:58|46|3|4","198:7-198:11|46|3|4","199:25-199:29|46|3|4","199:38-199:42|46|3|4"],"kind":253,"storage":1},{"id":16,"usr":16728052573572057825,"detailed_name":"real singularValueThreshold","short_name_offset":5,"short_name_size":22,"hover":"","comments":"","declarations":[],"spell":"195:82-195:104|46|3|2","extent":"195:77-195:104|46|3|0","uses":["198:23-198:45|46|3|4"],"kind":253,"storage":1},{"id":17,"usr":16274491625806684159,"detailed_name":"int *rank","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"195:112-195:116|46|3|2","extent":"195:106-195:116|46|3|0","type":2,"uses":["198:47-198:51|46|3|4"],"kind":253,"storage":1},{"id":18,"usr":17667890100121654511,"detailed_name":"real *buffer","short_name_offset":6,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"197:12-197:18|46|3|2","extent":"197:5-198:52|46|3|0","uses":["199:51-199:57|46|3|4"],"kind":13,"storage":1},{"id":19,"usr":14736748872914980736,"detailed_name":"const Matrix<real> &mtx","short_name_offset":20,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"208:74-208:77|47|3|2","extent":"208:53-208:77|47|3|0","type":0,"uses":["210:9-210:12|47|3|4","212:93-212:96|47|3|4","215:44-215:47|47|3|4","215:56-215:59|47|3|4","216:7-216:10|47|3|4","217:25-217:28|47|3|4"],"kind":253,"storage":1},{"id":20,"usr":3929997473562586302,"detailed_name":"const Matrix<real> &rhs","short_name_offset":20,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"208:100-208:103|47|3|2","extent":"208:79-208:103|47|3|0","type":0,"uses":["210:23-210:26|47|3|4","212:105-212:108|47|3|4","215:68-215:71|47|3|4","216:22-216:25|47|3|4","217:37-217:40|47|3|4"],"kind":253,"storage":1},{"id":21,"usr":14363430191784351952,"detailed_name":"real rcond","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"208:110-208:115|47|3|2","extent":"208:105-208:115|47|3|0","uses":["216:37-216:42|47|3|4"],"kind":253,"storage":1},{"id":22,"usr":17240535989713684119,"detailed_name":"int *rank","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"208:123-208:127|47|3|2","extent":"208:117-208:127|47|3|0","type":2,"uses":["216:44-216:48|47|3|4"],"kind":253,"storage":1},{"id":23,"usr":10955338970490798438,"detailed_name":"real *buffer","short_name_offset":6,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"215:12-215:18|47|3|2","extent":"215:5-216:49|47|3|0","uses":["217:49-217:55|47|3|4"],"kind":13,"storage":1},{"id":24,"usr":14819522056093493719,"detailed_name":"real t","short_name_offset":5,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"237:46-237:47|49|3|2","extent":"237:41-237:47|49|3|0","uses":[],"kind":253,"storage":1},{"id":25,"usr":15727642266429224426,"detailed_name":"const Matrix<real> &mtx","short_name_offset":20,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"237:70-237:73|49|3|2","extent":"237:49-237:73|49|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":26,"usr":14774711614387342955,"detailed_name":"int *code","short_name_offset":5,"short_name_size":4,"hover":"int *code = NULL","comments":"","declarations":[],"spell":"237:81-237:85|49|3|2","extent":"237:75-237:92|49|3|0","type":2,"uses":[],"kind":253,"storage":1},{"id":27,"usr":14201231454858097397,"detailed_name":"bool Matrix::freeDataInDestructor","short_name_offset":13,"short_name_size":20,"hover":"","comments":"","declarations":[],"spell":"260:8-260:28|0|2|2","extent":"260:3-260:28|0|2|0","type":3,"uses":[],"kind":8,"storage":0},{"id":28,"usr":12215580050826402457,"detailed_name":"int row","short_name_offset":4,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"264:51-264:54|24|3|2","extent":"264:47-264:54|24|3|0","type":2,"uses":["266:21-266:24|24|3|4"],"kind":253,"storage":1},{"id":29,"usr":10496415697688600254,"detailed_name":"int column","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"264:60-264:66|24|3|2","extent":"264:56-264:66|24|3|0","type":2,"uses":["266:25-266:31|24|3|4"],"kind":253,"storage":1},{"id":30,"usr":13699467681923767025,"detailed_name":"int row","short_name_offset":4,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"270:45-270:48|25|3|2","extent":"270:41-270:48|25|3|0","type":2,"uses":["272:21-272:24|25|3|4"],"kind":253,"storage":1},{"id":31,"usr":37974267399250218,"detailed_name":"int column","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"270:54-270:60|25|3|2","extent":"270:50-270:60|25|3|0","type":2,"uses":["272:25-272:31|25|3|4"],"kind":253,"storage":1},{"id":32,"usr":5703741853874953744,"detailed_name":"_MATRIX_H_","short_name_offset":0,"short_name_size":10,"hover":"#define _MATRIX_H_","comments":"","declarations":[],"spell":"47:9-47:19|-1|1|2","extent":"47:9-47:19|-1|1|0","uses":[],"kind":255,"storage":0},{"id":33,"usr":291038054068649371,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["237:88-237:92|-1|1|4"],"kind":0,"storage":0}]}