15
{"last_modification_time":1548168587,"language":2,"import_file":"/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/mesher/tetMesher.cpp","args":["clang++","-working-directory=/home/dark/proj/faust/","/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/mesher/tetMesher.cpp","-resource-dir=/usr/lib/clang/7.0.1","-Wno-unknown-warning-option","-fparse-all-comments","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/x86_64-pc-linux-gnu","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/backward","-isystem/usr/local/include","-isystem/usr/lib/clang/7.0.1/include","-isystem/usr/include"],"includes":[{"line":46,"resolved_path":"/usr/include/c++/8.2.1/vector"},{"line":47,"resolved_path":"/usr/include/c++/8.2.1/set"},{"line":48,"resolved_path":"/usr/include/c++/8.2.1/queue"},{"line":53,"resolved_path":"/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/mesher/delaunayMesher.h"}],"dependencies":["/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/mesher/tetMesher.cpp","/usr/lib/clang/7.0.1/include/limits.h","/usr/include/limits.h","/usr/include/bits/libc-header-start.h","/usr/include/features.h","/usr/include/sys/cdefs.h","/usr/include/gnu/stubs.h","/usr/include/bits/posix1_lim.h","/usr/include/bits/local_lim.h","/usr/include/bits/xopen_lim.h","/usr/include/c++/8.2.1/vector","/usr/include/c++/8.2.1/bits/stl_algobase.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++config.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/os_defines.h","/usr/include/c++/8.2.1/bits/functexcept.h","/usr/include/c++/8.2.1/bits/cpp_type_traits.h","/usr/include/c++/8.2.1/ext/type_traits.h","/usr/include/c++/8.2.1/ext/numeric_traits.h","/usr/include/c++/8.2.1/bits/stl_pair.h","/usr/include/c++/8.2.1/bits/move.h","/usr/include/c++/8.2.1/bits/concept_check.h","/usr/include/c++/8.2.1/type_traits","/usr/include/c++/8.2.1/bits/stl_iterator_base_types.h","/usr/include/c++/8.2.1/bits/stl_iterator_base_funcs.h","/usr/include/c++/8.2.1/bits/stl_iterator.h","/usr/include/c++/8.2.1/bits/ptr_traits.h","/usr/include/c++/8.2.1/debug/debug.h","/usr/include/c++/8.2.1/bits/allocator.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++allocator.h","/usr/include/c++/8.2.1/ext/new_allocator.h","/usr/include/c++/8.2.1/new","/usr/include/c++/8.2.1/exception","/usr/include/c++/8.2.1/bits/exception.h","/usr/include/c++/8.2.1/bits/exception_ptr.h","/usr/include/c++/8.2.1/bits/cxxabi_init_exception.h","/usr/lib/clang/7.0.1/include/stddef.h","/usr/include/c++/8.2.1/typeinfo","/usr/include/c++/8.2.1/bits/hash_bytes.h","/usr/include/c++/8.2.1/bits/nested_exception.h","/usr/include/c++/8.2.1/bits/memoryfwd.h","/usr/include/c++/8.2.1/bits/stl_construct.h","/usr/include/c++/8.2.1/ext/alloc_traits.h","/usr/include/c++/8.2.1/bits/alloc_traits.h","/usr/include/c++/8.2.1/bits/stl_uninitialized.h","/usr/include/c++/8.2.1/bits/stl_vector.h","/usr/include/c++/8.2.1/initializer_list","/usr/include/c++/8.2.1/bits/stl_bvector.h","/usr/include/c++/8.2.1/bits/functional_hash.h","/usr/include/c++/8.2.1/bits/range_access.h","/usr/include/c++/8.2.1/cfloat","/usr/include/c++/8.2.1/stack","/usr/include/c++/8.2.1/deque","/usr/include/c++/8.2.1/bits/stl_deque.h","/usr/include/c++/8.2.1/bits/stl_stack.h","/usr/include/c++/8.2.1/bits/uses_allocator.h","/usr/include/c++/8.2.1/set","/usr/include/c++/8.2.1/bits/stl_tree.h","/usr/include/c++/8.2.1/bits/stl_function.h","/usr/include/c++/8.2.1/ext/aligned_buffer.h","/usr/include/c++/8.2.1/bits/stl_set.h","/usr/include/c++/8.2.1/bits/stl_multiset.h","/usr/include/c++/8.2.1/queue","/usr/include/c++/8.2.1/bits/stl_heap.h","/usr/include/c++/8.2.1/bits/stl_queue.h","/usr/include/c++/8.2.1/bits/predefined_ops.h","/usr/lib/clang/7.0.1/include/__stddef_max_align_t.h","/usr/include/c++/8.2.1/bits/vector.tcc","/usr/include/c++/8.2.1/bits/deque.tcc","/usr/include/c++/8.2.1/backward/binders.h","/usr/include/stdc-predef.h","/usr/include/bits/wordsize.h","/usr/include/gnu/stubs-64.h","/usr/include/linux/limits.h","/usr/include/bits/posix2_lim.h","/usr/include/bits/uio_lim.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/cpu_defines.h","/usr/include/c++/8.2.1/bits/exception_defines.h","/usr/include/c++/8.2.1/debug/assertions.h","/usr/lib/clang/7.0.1/include/float.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":4738892744638024813,"detailed_name":"TetMesher","short_name_offset":0,"short_name_size":9,"kind":5,"hover":"","comments":"","declarations":["60:3-60:12|-1|1|4","61:12-61:21|-1|1|4"],"spell":"56:7-56:16|-1|1|2","extent":"56:1-241:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[0,1,2,3,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"vars":[3,11,12,13,14,15,16,17,18,0,19],"instances":[],"uses":["60:3-60:12|0|2|4"]},{"id":1,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,4,6,7,8,9,10,11,12,13,14,15,16,17,18,0,19],"uses":[]},{"id":2,"usr":4619621121790188519,"detailed_name":"TetMesher::DelaunayBall","short_name_offset":11,"short_name_size":12,"kind":252,"hover":"typedef DelaunayMesher::DelaunayBall TetMesher::DelaunayBall","comments":"","declarations":[],"spell":"78:40-78:52|0|2|2","extent":"78:3-78:52|0|2|0","alias_of":1,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["78:40-78:52|0|2|4","87:38-87:50|-1|1|4"]},{"id":3,"usr":11512539339585743342,"detailed_name":"TetMesher::BallCIter","short_name_offset":11,"short_name_size":9,"kind":252,"hover":"typedef DelaunayMesher::BallCIter TetMesher::BallCIter","comments":"","declarations":[],"spell":"79:37-79:46|0|2|2","extent":"79:3-79:46|0|2|0","alias_of":1,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["79:37-79:46|0|2|4"]},{"id":4,"usr":15507844166442004870,"detailed_name":"TetMesher::DelaunayBallWithRefineInfo","short_name_offset":11,"short_name_size":26,"kind":23,"hover":"","comments":"Delaunay ball with information of radius/minEdge and minimal dihedral angle","declarations":["87:5-87:31|-1|1|4","89:5-89:31|-1|1|4"],"spell":"83:10-83:36|0|2|2","extent":"83:3-90:4|0|2|0","bases":[],"derived":[],"types":[],"funcs":[4,5],"vars":[1,2],"instances":[],"uses":["87:5-87:31|4|2|4","89:5-89:31|4|2|4","89:38-89:64|-1|1|4","101:31-101:57|-1|1|4","101:78-101:104|-1|1|4","107:31-107:57|-1|1|4","107:78-107:104|-1|1|4"]},{"id":5,"usr":22,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[1,2],"uses":[]},{"id":6,"usr":1519014222299117241,"detailed_name":"TetMesher::TetMeshWithRefineInfo","short_name_offset":11,"short_name_size":21,"kind":23,"hover":"","comments":"A set of delaunay balls with information of radius/minEdge and minimal dihedral angle","declarations":["96:5-96:26|-1|1|4","97:6-97:27|-1|1|4"],"spell":"93:10-93:31|0|2|2","extent":"93:3-139:4|0|2|0","bases":[],"derived":[],"types":[],"funcs":[6,7,10,11,12,13,14,15,16,17],"vars":[5,6,7,8,9,10],"instances":[3],"uses":["96:5-96:26|6|2|4"]},{"id":7,"usr":6861130403321446437,"detailed_name":"TetMesher::TetMeshWithRefineInfo::DelaunayBallEdgeRefineCMP","short_name_offset":34,"short_name_size":25,"kind":23,"hover":"","comments":"","declarations":[],"spell":"99:12-99:37|6|2|2","extent":"99:5-102:6|6|2|0","bases":[],"derived":[],"types":[],"funcs":[8],"vars":[],"instances":[],"uses":[]},{"id":8,"usr":10467572004874841929,"detailed_name":"TetMesher::TetMeshWithRefineInfo::DelaunayBallAngleRefineCMP","short_name_offset":34,"short_name_size":26,"kind":23,"hover":"","comments":"","declarations":[],"spell":"105:12-105:38|6|2|2","extent":"105:5-108:6|6|2|0","bases":[],"derived":[],"types":[],"funcs":[9],"vars":[],"instances":[],"uses":[]},{"id":9,"usr":3534380706753611850,"detailed_name":"TetMesher::TetMeshWithRefineInfo::EdgeRefineIterator","short_name_offset":34,"short_name_size":18,"kind":252,"hover":"typedef std::set<const DelaunayBallWithRefineInfo *, DelaunayBallEdgeRefineCMP>::const_iterator TetMesher::TetMeshWithRefineInfo::EdgeRefineIterator","comments":"","declarations":[],"spell":"110:101-110:119|6|2|2","extent":"110:5-110:119|6|2|0","alias_of":1,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["110:101-110:119|6|2|4","112:12-112:30|-1|1|4","113:12-113:30|-1|1|4","114:12-114:30|-1|1|4","115:12-115:30|-1|1|4"]},{"id":10,"usr":4993850684271056413,"detailed_name":"TetMesher::TetMeshWithRefineInfo::AngleRefineIterator","short_name_offset":34,"short_name_size":19,"kind":252,"hover":"typedef std::set<const DelaunayBallWithRefineInfo *, DelaunayBallAngleRefineCMP>::const_iterator TetMesher::TetMeshWithRefineInfo::AngleRefineIterator","comments":"","declarations":[],"spell":"111:102-111:121|6|2|2","extent":"111:5-111:121|6|2|0","alias_of":1,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["111:102-111:121|6|2|4"]},{"id":11,"usr":3,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[5,5],"uses":[]}],"funcs":[{"id":0,"usr":15777987627337223073,"detailed_name":"TetMesher::TetMesher()","short_name_offset":0,"short_name_size":9,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"60:3-60:12|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":15291356407406207438,"detailed_name":"virtual TetMesher::~TetMesher() noexcept","short_name_offset":19,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"61:11-61:21|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":5310764767646343966,"detailed_name":"int *TetMesher::compute(int *surfaceMesh, double refinementQuality = 1.1000000000000001, double alpha = 2., double minDihedralAngle = 0., int maxSteinerVertices = -1, double maxTimeSeconds = -1.)","short_name_offset":16,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"compute the tet mesh, using constrained 3D Delaunay tetrahedralization, with refinement\nrefinementQuality is a scalar; one must use refinementQuality >= 1\nthe smaller the value, the more the mesh will be refined\nminDihedralAngle: the minimal dihedral angle in a tet on the result tet mesh should not be larger than \"minDihedralAngle\"\nmaxSteinerVertices controls how many vertices are added in the refinement process. < 0 means no limitation.\nalpha: the smallest distance between a new Steiner vertex and the existing vertices should be larger than alpha times \nthe average edge length of the input mesh\nmaxTimeSeconds: the routine will terminate if this computation time (in seconds) is exceeded. < 0 means no limitation.","declarations":[{"spell":"71:13-71:20|0|2|1","param_spellings":["71:31-71:42","71:51-71:68","71:83-71:88","71:103-71:119","72:11-72:29","72:43-72:57"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":3636525118989322598,"detailed_name":"inline int TetMesher::getNumAddedSteinerVertices() const","short_name_offset":22,"short_name_size":26,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"74:14-74:40|0|2|2","extent":"74:3-74:79|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":15720494436629993289,"detailed_name":"TetMesher::DelaunayBallWithRefineInfo::DelaunayBallWithRefineInfo(const TetMesher::DelaunayBall &parent)","short_name_offset":11,"short_name_size":26,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"87:5-87:31|4|2|1","param_spellings":["87:53-87:59"]}],"declaring_type":4,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":12915644372038666182,"detailed_name":"TetMesher::DelaunayBallWithRefineInfo::DelaunayBallWithRefineInfo(const TetMesher::DelaunayBallWithRefineInfo &)","short_name_offset":11,"short_name_size":26,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"89:5-89:31|4|2|1","param_spellings":["89:66-89:66"]}],"declaring_type":4,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":781785771994003260,"detailed_name":"TetMesher::TetMeshWithRefineInfo::TetMeshWithRefineInfo(const int &delaunayMesher)","short_name_offset":11,"short_name_size":21,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"96:5-96:26|6|2|1","param_spellings":["96:50-96:64"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":1748734988448390377,"detailed_name":"TetMesher::TetMeshWithRefineInfo::~TetMeshWithRefineInfo() noexcept","short_name_offset":34,"short_name_size":22,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"97:5-97:27|6|2|1","param_spellings":[]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":12528087368320917770,"detailed_name":"bool TetMesher::TetMeshWithRefineInfo::DelaunayBallEdgeRefineCMP::operator()(const TetMesher::DelaunayBallWithRefineInfo *const &p1, const TetMesher::DelaunayBallWithRefineInfo *const &p2)","short_name_offset":66,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"101:12-101:23|7|2|1","param_spellings":["101:68-101:70","101:115-101:117"]}],"declaring_type":7,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":10536159586293544340,"detailed_name":"bool TetMesher::TetMeshWithRefineInfo::DelaunayBallAngleRefineCMP::operator()(const TetMesher::DelaunayBallWithRefineInfo *const &p1, const TetMesher::DelaunayBallWithRefineInfo *const &p2)","short_name_offset":67,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"107:12-107:23|8|2|1","param_spellings":["107:68-107:70","107:115-107:117"]}],"declaring_type":8,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":10223911950284137852,"detailed_name":"inline TetMesher::TetMeshWithRefineInfo::EdgeRefineIterator TetMesher::TetMeshWithRefineInfo::getEdgeRefineBegin()","short_name_offset":94,"short_name_size":18,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"112:31-112:49|6|2|2","extent":"112:5-112:87|6|2|0","declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":7234242872770016220,"detailed_name":"inline TetMesher::TetMeshWithRefineInfo::EdgeRefineIterator TetMesher::TetMeshWithRefineInfo::getEdgeRefineEnd()","short_name_offset":94,"short_name_size":16,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"113:31-113:47|6|2|2","extent":"113:5-113:83|6|2|0","declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":4758751474142787077,"detailed_name":"inline TetMesher::TetMeshWithRefineInfo::EdgeRefineIterator TetMesher::TetMeshWithRefineInfo::getAngleRefineBegin()","short_name_offset":94,"short_name_size":19,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"114:31-114:50|6|2|2","extent":"114:5-114:89|6|2|0","declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":12788322451267649225,"detailed_name":"inline TetMesher::TetMeshWithRefineInfo::EdgeRefineIterator TetMesher::TetMeshWithRefineInfo::getAngleRefineEnd()","short_name_offset":94,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"115:31-115:48|6|2|2","extent":"115:5-115:85|6|2|0","declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":6817238229286060733,"detailed_name":"int *TetMesher::TetMeshWithRefineInfo::getTetMesh()","short_name_offset":39,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"Get Tetmesh from the set of delaunayBall.\nCallee will alloc the memory and caller is responsible to free the memory","declarations":[{"spell":"119:15-119:25|6|2|1","param_spellings":[]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":15086048446930884827,"detailed_name":"void TetMesher::TetMeshWithRefineInfo::insert(const int *delaunayBall)","short_name_offset":39,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"Compute the refine information such as edge quality and dihedral angle\nAlloc memory and deep copy inside, free memory in deconstruc function and remove function","declarations":[{"spell":"123:10-123:16|6|2|1","param_spellings":["123:54-123:66"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":7019369081535240261,"detailed_name":"void TetMesher::TetMeshWithRefineInfo::remove(const int *delaunayBall)","short_name_offset":39,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"Remove the delaunay ball that is removed in the last refinement. Free memory inside","declarations":[{"spell":"126:10-126:16|6|2|1","param_spellings":["126:54-126:66"]}],"declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":1993043236736386056,"detailed_name":"inline void TetMesher::TetMeshWithRefineInfo::enableAngleRefine()","short_name_offset":46,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"Enable the minimal dihedral angle refinement","declarations":[],"spell":"129:17-129:34|6|2|2","extent":"129:5-129:67|6|2|0","declaring_type":6,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":4261511136169846139,"detailed_name":"int TetMesher::initializeCDT(bool recovery = true)","short_name_offset":15,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"construct a constrained delaunay mesh, if recovery is true, the face recovery process will be done","declarations":[{"spell":"142:7-142:20|0|2|1","param_spellings":["142:26-142:34"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":3405862319038472494,"detailed_name":"int TetMesher::refineEdge(double refinementQuality, const double minmimalDist)","short_name_offset":15,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\nRefine one tet with bad edge quality, radius/minEdge\nRet value\n0: refined\n1: No tet to refine due to enough steiner points\n2: No bad tet to refine","declarations":[{"spell":"152:7-152:17|0|2|1","param_spellings":["152:25-152:42","152:57-152:69"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":2152927254229282084,"detailed_name":"int TetMesher::refineAngle(const double angleBound, const double minmimalDist)","short_name_offset":15,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\nRefine one tet with bad dihedral angle, too small dihedral angle\nRet value\n0: refined\n1: No tet to refine due to enough steiner points\n2: No bad tet to refine","declarations":[{"spell":"161:7-161:18|0|2|1","param_spellings":["161:32-161:42","161:57-161:69"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":10183786973088349016,"detailed_name":"static bool TetMesher::renumberInitialVertices(int *surfaceMesh)","short_name_offset":23,"short_name_size":23,"kind":254,"storage":3,"hover":"","comments":"Make sure the first four vertices of the triangle mesh are not on the same plane","declarations":[{"spell":"164:15-164:38|0|2|1","param_spellings":["164:49-164:60"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":13005786031542063526,"detailed_name":"int TetMesher::removeOutside()","short_name_offset":15,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"remove all tetrahedrons that are outside the constrained delaunay mesh","declarations":[{"spell":"167:7-167:20|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":16374218172265018267,"detailed_name":"void TetMesher::insertTet(const int *v)","short_name_offset":16,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"insert a tet into the tetmesh","declarations":[{"spell":"170:8-170:17|0|2|1","param_spellings":["170:30-170:31"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":67777810321513840,"detailed_name":"void TetMesher::removeTet(const int *v)","short_name_offset":16,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"remove a tet from the tetmesh","declarations":[{"spell":"172:8-172:17|0|2|1","param_spellings":["172:30-172:31"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":5256675622852645533,"detailed_name":"void TetMesher::insertFace(int f1, int f2, int f3)","short_name_offset":16,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"insert a face into the tetmesh","declarations":[{"spell":"175:8-175:18|0|2|1","param_spellings":["175:23-175:25","175:31-175:33","175:39-175:41"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":26,"usr":17027750493460099974,"detailed_name":"void TetMesher::removeFace(int f1, int f2, int f3)","short_name_offset":16,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"remove a face from the tetmesh","declarations":[{"spell":"177:8-177:18|0|2|1","param_spellings":["177:23-177:25","177:31-177:33","177:39-177:41"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":27,"usr":13829204722808873133,"detailed_name":"void TetMesher::insertEdge(int e1, int e2)","short_name_offset":16,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"insert an edge into the tetmesh","declarations":[{"spell":"179:8-179:18|0|2|1","param_spellings":["179:23-179:25","179:31-179:33"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":28,"usr":2848655879736488300,"detailed_name":"void TetMesher::removeEdge(int e1, int e2)","short_name_offset":16,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"remove an edge from the tetmesh","declarations":[{"spell":"181:8-181:18|0|2|1","param_spellings":["181:23-181:25","181:31-181:33"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":29,"usr":7885701554582597284,"detailed_name":"int TetMesher::getFace(int index)","short_name_offset":15,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"get a face from the input triangular mesh","declarations":[{"spell":"184:11-184:18|0|2|1","param_spellings":["184:23-184:28"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":30,"usr":13415367877987233975,"detailed_name":"void TetMesher::faceRecovery()","short_name_offset":16,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"Do face recovery process","declarations":[{"spell":"187:8-187:20|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":31,"usr":4229040840405718628,"detailed_name":"void TetMesher::formRegion(int face, int &region)","short_name_offset":16,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"form a missing region by one face, the boundary of the missing face is on the current tet, the triangles in the region are all missing","declarations":[{"spell":"190:8-190:18|0|2|1","param_spellings":["190:23-190:27","190:44-190:50"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":32,"usr":15732588929190428738,"detailed_name":"void TetMesher::calculateTetBoundary(int &tet, int &boundary)","short_name_offset":16,"short_name_size":20,"kind":6,"storage":1,"hover":"","comments":"calculate the boundary of a tet mesh, triangles that has only one neighbor tetrahedron","declarations":[{"spell":"192:8-192:28|0|2|1","param_spellings":["192:73-192:76","192:100-192:108"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":33,"usr":3857538775556905038,"detailed_name":"void TetMesher::calculateTriangleBoundary(int &missingRegion, int &boundary)","short_name_offset":16,"short_name_size":25,"kind":6,"storage":1,"hover":"","comments":"calculate the boundary of a missing region, the region consists of connected triangles, boundary is a set of edges that have only one neighbor triangle","declarations":[{"spell":"194:8-194:33|0|2|1","param_spellings":["194:49-194:62","194:96-194:104"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":34,"usr":5188715216747906644,"detailed_name":"void TetMesher::buildTriangleNeighbor(int &mesh, int &neighbor)","short_name_offset":16,"short_name_size":21,"kind":6,"storage":1,"hover":"","comments":"build a map for triangular mesh, which two triangles are the neigbhor of an edge","declarations":[{"spell":"196:8-196:29|0|2|1","param_spellings":["196:52-196:56","196:111-196:119"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":35,"usr":15094340112615509633,"detailed_name":"bool TetMesher::formTwoCavities(int &missingRegion, int &boundary, int &neighbor)","short_name_offset":16,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"insert the missing region into the cavity formed by removing all tetrahedrons that intersect the missing region, and then form two cavities","declarations":[{"spell":"198:8-198:23|0|2|1","param_spellings":["198:46-198:59","198:93-198:101","198:156-198:164"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":36,"usr":4846987072865105260,"detailed_name":"bool TetMesher::fillHole(int &holeBoundary)","short_name_offset":16,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"fill a hole defined by a set of boundary triangles, compute what tetrahedrons need adding","declarations":[{"spell":"200:8-200:16|0|2|1","param_spellings":["200:39-200:51"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":37,"usr":6326655088736631806,"detailed_name":"bool TetMesher::isTooCloseToOtherVertices(const int &r, const double minimalDist) const","short_name_offset":16,"short_name_size":25,"kind":6,"storage":1,"hover":"","comments":"determine whether the point is too close to any existent vertices in the current mesh","declarations":[{"spell":"203:8-203:33|0|2|1","param_spellings":["203:48-203:49","203:64-203:75"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":38,"usr":17381831748786489519,"detailed_name":"int TetMesher::getSteinerPoint(const int &edge, const bool isAcute1, const bool isAcute2, const double lfs1, const double lfs2, const double c = 2) const","short_name_offset":15,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"Get the steiner point in segement recovery.","declarations":[{"spell":"206:9-206:24|0|2|1","param_spellings":["206:42-206:46","206:59-206:67","206:80-206:88","206:103-206:107","206:122-206:126","206:141-206:142"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":39,"usr":8231121708060479412,"detailed_name":"int TetMesher::segmentRecovery()","short_name_offset":15,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"segment recovery","declarations":[{"spell":"209:7-209:22|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":40,"usr":7363626495862136065,"detailed_name":"int TetMesher::flipSurface()","short_name_offset":15,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"flip the input objmesh to fit the delaunay mesh in case failure in the segment recovery","declarations":[{"spell":"231:7-231:18|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":13438616346465419782,"detailed_name":"int TetMesher::numSteinerVertices","short_name_offset":15,"short_name_size":18,"hover":"","comments":"the number of steiner points inserted (refinement)","declarations":[],"spell":"237:7-237:25|0|2|2","extent":"237:3-237:25|0|2|0","type":1,"uses":["74:58-74:76|3|3|12"],"kind":8,"storage":0},{"id":1,"usr":2547640023909008087,"detailed_name":"double TetMesher::DelaunayBallWithRefineInfo::minDihedral","short_name_offset":46,"short_name_size":11,"hover":"","comments":"Not valid for infinite ball. The minimal dihedral angel of the tetrahedral. Lazy compute","declarations":[],"spell":"85:12-85:23|4|2|2","extent":"85:5-85:23|4|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":2,"usr":7775039669629057160,"detailed_name":"double TetMesher::DelaunayBallWithRefineInfo::edgeQuality","short_name_offset":46,"short_name_size":11,"hover":"","comments":"Not valid for infinite ball. Square of the minimal edge of the tetrahedral. Lazy compute","declarations":[],"spell":"86:12-86:23|4|2|2","extent":"86:5-86:23|4|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":3,"usr":7361447679544721544,"detailed_name":"struct TetMeshWithRefineInfo TetMesher::resultTetMesh","short_name_offset":40,"short_name_size":13,"hover":"","comments":"","declarations":[],"spell":"139:5-139:18|0|2|2","extent":"93:3-139:18|0|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":4,"usr":10647324716820291436,"detailed_name":"int TetMesher::TetMeshWithRefineInfo::defaultComparor","short_name_offset":38,"short_name_size":15,"hover":"","comments":"","declarations":["95:48-95:63|6|2|1"],"type":1,"uses":[],"kind":8,"storage":3},{"id":5,"usr":3704282460117179953,"detailed_name":"bool TetMesher::TetMeshWithRefineInfo::enabledAngleRefine","short_name_offset":39,"short_name_size":18,"hover":"","comments":"Whether the angle refinement is enabled","declarations":[],"spell":"133:10-133:28|6|2|2","extent":"133:5-133:28|6|2|0","type":11,"uses":["129:39-129:57|17|3|20"],"kind":8,"storage":0},{"id":6,"usr":4854990650113453905,"detailed_name":"const int &TetMesher::TetMeshWithRefineInfo::delaunayMesher","short_name_offset":45,"short_name_size":14,"hover":"","comments":"Reference to the delaunayMesher, used to get the positions of vertices","declarations":[],"spell":"134:28-134:42|6|2|2","extent":"134:5-134:42|6|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":7,"usr":12971828416367856330,"detailed_name":"int TetMesher::TetMeshWithRefineInfo::edgeRefineBalls","short_name_offset":38,"short_name_size":15,"hover":"","comments":"Sort the current delaunay ball by radius/minEdge descendingly","declarations":[],"spell":"135:77-135:92|6|2|2","extent":"135:5-135:92|6|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":8,"usr":981429479457380645,"detailed_name":"int TetMesher::TetMeshWithRefineInfo::angleRefineBalls","short_name_offset":38,"short_name_size":16,"hover":"","comments":"Sort the current delaunay ball by diheral angle  aescendingly","declarations":[],"spell":"136:78-136:94|6|2|2","extent":"136:5-136:94|6|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":9,"usr":2949016811242669551,"detailed_name":"int TetMesher::TetMeshWithRefineInfo::edgeRefineMap","short_name_offset":38,"short_name_size":13,"hover":"","comments":"Look up the iterator in edgeRefineSet by pointer","declarations":[],"spell":"137:109-137:122|6|2|2","extent":"137:5-137:122|6|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":10,"usr":1282387494458595100,"detailed_name":"int TetMesher::TetMeshWithRefineInfo::angleRefineMap","short_name_offset":38,"short_name_size":14,"hover":"","comments":"Look up the iterator in angleRefineSet by pointer","declarations":[],"spell":"138:110-138:124|6|2|2","extent":"138:5-138:124|6|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":11,"usr":11264156600344022362,"detailed_name":"int TetMesher::delaunay","short_name_offset":15,"short_name_size":8,"hover":"","comments":"Used to compute delaunay mesh","declarations":[],"spell":"212:18-212:26|0|2|2","extent":"212:3-212:26|0|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":12,"usr":4624219315797778505,"detailed_name":"int *TetMesher::objMesh","short_name_offset":16,"short_name_size":7,"hover":"","comments":"the input triangular mesh","declarations":[],"spell":"214:13-214:20|0|2|2","extent":"214:3-214:20|0|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":13,"usr":12254756696032274874,"detailed_name":"int TetMesher::lost","short_name_offset":15,"short_name_size":4,"hover":"","comments":"the set of triangles that are in the input triangular mesh but not in the volumetric mesh","declarations":[],"spell":"217:24-217:28|0|2|2","extent":"217:24-217:28|0|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":14,"usr":8015353670318049728,"detailed_name":"int TetMesher::region","short_name_offset":15,"short_name_size":6,"hover":"","comments":"the indices of triangles that are in a missing region","declarations":[],"spell":"219:17-219:23|0|2|2","extent":"219:3-219:23|0|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":15,"usr":8968390053638389085,"detailed_name":"int TetMesher::neighborSurface","short_name_offset":15,"short_name_size":15,"hover":"","comments":"for the input triangular mesh, which three triangles are the neigbhors of a triangle. All triangles are described by their indices","declarations":[],"spell":"222:34-222:49|0|2|2","extent":"222:34-222:49|0|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":16,"usr":10362806449148976571,"detailed_name":"int TetMesher::toAdd","short_name_offset":15,"short_name_size":5,"hover":"","comments":"Tetradedrons added into the tet mesh to fill a hole","declarations":[],"spell":"225:35-225:40|0|2|2","extent":"225:35-225:40|0|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":17,"usr":10632676607396740846,"detailed_name":"int TetMesher::trianglesInTet","short_name_offset":15,"short_name_size":14,"hover":"","comments":"Triangles in the volumetric mesh, key is the triangle and value is how many tets are associated with the triangle","declarations":[],"spell":"228:31-228:45|0|2|2","extent":"228:3-228:45|0|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":18,"usr":3088790844276313526,"detailed_name":"int TetMesher::edgesInTet","short_name_offset":15,"short_name_size":10,"hover":"","comments":"edges in the volumetric mesh, key is the edge and value is how many tets are associated with the edge","declarations":[],"spell":"234:32-234:42|0|2|2","extent":"234:3-234:42|0|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":19,"usr":6084088742720878719,"detailed_name":"int TetMesher::faceRecoveryDepth","short_name_offset":15,"short_name_size":17,"hover":"","comments":"recursion depth for face recovery;","declarations":[],"spell":"240:7-240:24|0|2|2","extent":"240:3-240:24|0|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":20,"usr":506974223319573723,"detailed_name":"_TETMESHER_H_","short_name_offset":0,"short_name_size":13,"hover":"#define _TETMESHER_H_","comments":"","declarations":[],"spell":"45:9-45:22|-1|1|2","extent":"45:9-45:22|-1|1|0","uses":[],"kind":255,"storage":0}]}