15
{"last_modification_time":1548168587,"language":2,"import_file":"/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/sparseMatrix/example.cpp","args":["clang++","-working-directory=/home/dark/proj/faust/","/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/sparseMatrix/example.cpp","-resource-dir=/usr/lib/clang/7.0.1","-Wno-unknown-warning-option","-fparse-all-comments","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/x86_64-pc-linux-gnu","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/backward","-isystem/usr/local/include","-isystem/usr/lib/clang/7.0.1/include","-isystem/usr/include"],"includes":[{"line":99,"resolved_path":"/usr/include/string.h"},{"line":100,"resolved_path":"/usr/include/c++/8.2.1/vector"},{"line":101,"resolved_path":"/usr/include/c++/8.2.1/map"}],"dependencies":["/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/sparseMatrix/example.cpp","/usr/include/string.h","/usr/include/bits/libc-header-start.h","/usr/include/features.h","/usr/include/sys/cdefs.h","/usr/include/gnu/stubs.h","/usr/include/bits/types/locale_t.h","/usr/include/strings.h","/usr/include/c++/8.2.1/vector","/usr/include/c++/8.2.1/bits/stl_algobase.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++config.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/os_defines.h","/usr/include/c++/8.2.1/bits/functexcept.h","/usr/include/c++/8.2.1/bits/cpp_type_traits.h","/usr/include/c++/8.2.1/ext/type_traits.h","/usr/include/c++/8.2.1/ext/numeric_traits.h","/usr/include/c++/8.2.1/bits/stl_pair.h","/usr/include/c++/8.2.1/bits/move.h","/usr/include/c++/8.2.1/bits/concept_check.h","/usr/include/c++/8.2.1/type_traits","/usr/include/c++/8.2.1/bits/stl_iterator_base_types.h","/usr/include/c++/8.2.1/bits/stl_iterator_base_funcs.h","/usr/include/c++/8.2.1/bits/stl_iterator.h","/usr/include/c++/8.2.1/bits/ptr_traits.h","/usr/include/c++/8.2.1/debug/debug.h","/usr/include/c++/8.2.1/bits/allocator.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++allocator.h","/usr/include/c++/8.2.1/ext/new_allocator.h","/usr/include/c++/8.2.1/new","/usr/include/c++/8.2.1/exception","/usr/include/c++/8.2.1/bits/exception.h","/usr/include/c++/8.2.1/bits/exception_ptr.h","/usr/include/c++/8.2.1/bits/cxxabi_init_exception.h","/usr/lib/clang/7.0.1/include/stddef.h","/usr/include/c++/8.2.1/typeinfo","/usr/include/c++/8.2.1/bits/hash_bytes.h","/usr/include/c++/8.2.1/bits/nested_exception.h","/usr/include/c++/8.2.1/bits/memoryfwd.h","/usr/include/c++/8.2.1/bits/stl_construct.h","/usr/include/c++/8.2.1/ext/alloc_traits.h","/usr/include/c++/8.2.1/bits/alloc_traits.h","/usr/include/c++/8.2.1/bits/stl_uninitialized.h","/usr/include/c++/8.2.1/bits/stl_vector.h","/usr/include/c++/8.2.1/initializer_list","/usr/include/c++/8.2.1/bits/stl_bvector.h","/usr/include/c++/8.2.1/bits/functional_hash.h","/usr/include/c++/8.2.1/bits/range_access.h","/usr/include/c++/8.2.1/map","/usr/include/c++/8.2.1/bits/stl_tree.h","/usr/include/c++/8.2.1/bits/stl_function.h","/usr/include/c++/8.2.1/ext/aligned_buffer.h","/usr/include/c++/8.2.1/bits/stl_map.h","/usr/include/c++/8.2.1/tuple","/usr/include/c++/8.2.1/utility","/usr/include/c++/8.2.1/array","/usr/include/c++/8.2.1/stdexcept","/usr/include/c++/8.2.1/string","/usr/include/c++/8.2.1/bits/stringfwd.h","/usr/include/c++/8.2.1/bits/char_traits.h","/usr/include/c++/8.2.1/bits/postypes.h","/usr/include/c++/8.2.1/cwchar","/usr/include/wchar.h","/usr/include/bits/floatn.h","/usr/include/bits/floatn-common.h","/usr/include/bits/types/mbstate_t.h","/usr/include/c++/8.2.1/cstdint","/usr/lib/clang/7.0.1/include/stdint.h","/usr/include/stdint.h","/usr/include/bits/types.h","/usr/include/bits/stdint-intn.h","/usr/include/bits/stdint-uintn.h","/usr/include/c++/8.2.1/bits/localefwd.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++locale.h","/usr/include/c++/8.2.1/clocale","/usr/include/locale.h","/usr/include/c++/8.2.1/iosfwd","/usr/include/c++/8.2.1/cctype","/usr/include/ctype.h","/usr/include/endian.h","/usr/include/bits/byteswap.h","/usr/include/bits/uintn-identity.h","/usr/include/c++/8.2.1/bits/ostream_insert.h","/usr/include/c++/8.2.1/bits/basic_string.h","/usr/include/c++/8.2.1/ext/atomicity.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/gthr.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h","/usr/include/pthread.h","/usr/include/sched.h","/usr/include/bits/types/time_t.h","/usr/include/bits/types/struct_timespec.h","/usr/include/bits/sched.h","/usr/include/time.h","/usr/include/bits/time.h","/usr/include/bits/timex.h","/usr/include/bits/types/struct_timeval.h","/usr/include/bits/types/clock_t.h","/usr/include/bits/types/struct_tm.h","/usr/include/bits/types/clockid_t.h","/usr/include/bits/types/timer_t.h","/usr/include/bits/types/struct_itimerspec.h","/usr/include/bits/pthreadtypes.h","/usr/include/bits/thread-shared-types.h","/usr/include/bits/pthreadtypes-arch.h","/usr/include/bits/setjmp.h","/usr/include/c++/8.2.1/ext/string_conversions.h","/usr/include/c++/8.2.1/cstdlib","/usr/include/stdlib.h","/usr/include/sys/types.h","/usr/include/sys/select.h","/usr/include/bits/select.h","/usr/include/bits/types/sigset_t.h","/usr/include/alloca.h","/usr/include/c++/8.2.1/bits/std_abs.h","/usr/include/c++/8.2.1/cstdio","/usr/include/stdio.h","/usr/include/bits/types/__fpos_t.h","/usr/include/bits/types/__fpos64_t.h","/usr/include/bits/types/struct_FILE.h","/usr/include/bits/types/cookie_io_functions_t.h","/usr/include/c++/8.2.1/cerrno","/usr/include/errno.h","/usr/include/bits/errno.h","/usr/include/linux/errno.h","/usr/include/asm/errno.h","/usr/include/asm-generic/errno.h","/usr/include/c++/8.2.1/bits/basic_string.tcc","/usr/include/c++/8.2.1/bits/uses_allocator.h","/usr/include/c++/8.2.1/bits/invoke.h","/usr/include/c++/8.2.1/bits/stl_multimap.h","/usr/include/bits/types/__locale_t.h","/usr/include/c++/8.2.1/bits/predefined_ops.h","/usr/lib/clang/7.0.1/include/__stddef_max_align_t.h","/usr/include/c++/8.2.1/bits/vector.tcc","/usr/include/c++/8.2.1/backward/binders.h","/usr/include/c++/8.2.1/bits/stl_relops.h","/usr/lib/clang/7.0.1/include/stdarg.h","/usr/include/bits/types/wint_t.h","/usr/include/bits/types/__mbstate_t.h","/usr/include/bits/types/__FILE.h","/usr/include/bits/types/FILE.h","/usr/include/c++/8.2.1/bits/cxxabi_forced.h","/usr/include/bits/types/struct_sched_param.h","/usr/include/bits/cpu-set.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/atomic_word.h","/usr/include/bits/types/__sigset_t.h","/usr/include/bits/sys_errlist.h","/usr/include/bits/types/error_t.h","/usr/include/stdc-predef.h","/usr/include/bits/wordsize.h","/usr/include/gnu/stubs-64.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/cpu_defines.h","/usr/include/c++/8.2.1/bits/exception_defines.h","/usr/include/c++/8.2.1/debug/assertions.h","/usr/include/bits/wchar.h","/usr/include/bits/typesizes.h","/usr/include/bits/locale.h","/usr/include/bits/endian.h","/usr/include/bits/waitflags.h","/usr/include/bits/waitstatus.h","/usr/include/bits/stdlib-float.h","/usr/include/bits/stdio_lim.h","/usr/include/asm-generic/errno-base.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":10475768985487030738,"detailed_name":"SparseMatrix","short_name_offset":0,"short_name_size":12,"kind":5,"hover":"","comments":"","declarations":["104:7-104:19|-1|1|1","148:16-148:28|-1|1|4","160:3-160:15|-1|1|4","161:3-161:15|-1|1|4","165:3-165:15|-1|1|4","167:3-167:15|-1|1|4","168:4-168:16|-1|1|4"],"spell":"156:7-156:19|-1|1|2","extent":"156:1-410:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130],"vars":[10,12,17,6,22,20,23,24,25,26,27,28,29],"instances":[],"uses":["134:43-134:55|-1|1|4","160:3-160:15|0|2|4","161:3-161:15|0|2|4","165:3-165:15|0|2|4","167:3-167:15|0|2|4","167:22-167:34|-1|1|4","206:3-206:15|-1|1|4","206:32-206:44|-1|1|4","207:3-207:15|-1|1|4","207:32-207:44|-1|1|4","208:10-208:22|-1|1|4","208:60-208:72|-1|1|4","209:3-209:15|-1|1|4","209:34-209:46|-1|1|4","210:3-210:15|-1|1|4","211:3-211:15|-1|1|4","211:35-211:47|-1|1|4","212:3-212:15|-1|1|4","212:35-212:47|-1|1|4","213:25-213:37|-1|1|4","215:28-215:40|-1|1|4","217:43-217:55|-1|1|4","218:46-218:58|-1|1|4","236:3-236:15|-1|1|4","236:32-236:44|-1|1|4","242:32-242:44|-1|1|4","242:50-242:62|-1|1|4","245:67-245:79|-1|1|4","245:85-245:97|-1|1|4","284:22-284:34|-1|1|4","285:32-285:44|-1|1|4","298:3-298:15|-1|1|4","301:31-301:43|-1|1|4","326:36-326:48|-1|1|4","330:30-330:42|-1|1|4","332:26-332:38|-1|1|4","336:3-336:15|-1|1|4","336:46-336:58|-1|1|4","342:85-342:97|-1|1|4","343:114-343:126|-1|1|4","346:32-346:44|-1|1|4","379:10-379:22|-1|1|4"]},{"id":1,"usr":7605059581207026638,"detailed_name":"SparseMatrixOutline","short_name_offset":0,"short_name_size":19,"kind":5,"hover":"","comments":"","declarations":["110:3-110:22|-1|1|4","111:4-111:23|-1|1|4","114:3-114:22|-1|1|4","116:3-116:22|-1|1|4","121:3-121:22|-1|1|4"],"spell":"106:7-106:26|-1|1|2","extent":"106:1-154:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21],"vars":[0,2],"instances":[],"uses":["110:3-110:22|1|2|4","114:3-114:22|1|2|4","116:3-116:22|1|2|4","121:3-121:22|1|2|4","161:16-161:35|-1|1|4","407:24-407:43|-1|1|4"]},{"id":2,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,1,0,3,4,7,8,10,11,12,13,14,15,16,17,18,19,20,21,10,12,17,22,20,23,24,25,26,27,28,29],"uses":[]},{"id":3,"usr":13008309891401791597,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["147:21-147:24|-1|1|4","152:21-152:24|-1|1|4"]},{"id":4,"usr":5401847601697785946,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["147:16-147:19|1|2|4","152:3-152:6|1|2|4","152:16-152:19|1|2|4"]},{"id":5,"usr":10956461108384510180,"detailed_name":"std::vector","short_name_offset":5,"short_name_size":6,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2,2],"uses":["152:8-152:14|-1|1|4"]},{"id":6,"usr":22,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[5,6,9,6],"uses":[]},{"id":7,"usr":3334428756839306764,"detailed_name":"SparseMatrix::precomputedIndicesType","short_name_offset":14,"short_name_size":22,"kind":252,"hover":"typedef int *** SparseMatrix::precomputedIndicesType","comments":"builds indices for subsequent faster product computation (below)\ninput: U, MTilde; MTilde must equal U^T M U, computed using the \"ConjugateMatrix\" routine above\noutput: precomputedIndices","declarations":[],"spell":"241:19-241:41|0|2|2","extent":"241:3-241:41|0|2|0","alias_of":2,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["241:19-241:41|0|2|4","242:73-242:95|-1|1|4","245:24-245:46|-1|1|4"]}],"funcs":[{"id":0,"usr":2706052029553957688,"detailed_name":"SparseMatrixOutline::SparseMatrixOutline(int numRows)","short_name_offset":0,"short_name_size":19,"kind":9,"storage":1,"hover":"","comments":"makes an empty sparse matrix with numRows rows","declarations":[{"spell":"110:3-110:22|1|2|1","param_spellings":["110:27-110:34"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":15785061606312660416,"detailed_name":"SparseMatrixOutline::~SparseMatrixOutline() noexcept","short_name_offset":21,"short_name_size":20,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"111:3-111:23|1|2|1","param_spellings":[]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":5434649196139087412,"detailed_name":"SparseMatrixOutline::SparseMatrixOutline(int numRows, double diagonal)","short_name_offset":0,"short_name_size":19,"kind":9,"storage":1,"hover":"","comments":"makes a diagonal numRows x numRows sparse matrix; with a constant diagonal","declarations":[{"spell":"114:3-114:22|1|2|1","param_spellings":["114:27-114:34","114:43-114:51"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":18255919780740446814,"detailed_name":"SparseMatrixOutline::SparseMatrixOutline(int numRows, double *diagonal)","short_name_offset":0,"short_name_size":19,"kind":9,"storage":1,"hover":"","comments":"makes a diagonal numRows x numRows sparse matrix; diagonal is a vector of n numbers","declarations":[{"spell":"116:3-116:22|1|2|1","param_spellings":["116:27-116:34","116:45-116:53"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":11561511713205090738,"detailed_name":"SparseMatrixOutline::SparseMatrixOutline(const char *filename, int expand = 1)","short_name_offset":0,"short_name_size":19,"kind":9,"storage":1,"hover":"","comments":"loads the sparse matrix from a text file\nif expand is greater than 1, the routine also expands each element into a diagonal block of size expand x expand... \n  (expand option is useful for loading the mass matrix in structural mechanics (with expand=3 in 3D))","declarations":[{"spell":"121:3-121:22|1|2|1","param_spellings":["121:36-121:44","121:50-121:56"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":4445459006547969065,"detailed_name":"int SparseMatrixOutline::Save(const char *filename, int oneIndexed = 0) const","short_name_offset":25,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"save matrix to a text file","declarations":[{"spell":"124:7-124:11|1|2|1","param_spellings":["124:25-124:33","124:39-124:49"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":7016360063990349309,"detailed_name":"void SparseMatrixOutline::AddEntry(int i, int j, double value = 0.)","short_name_offset":26,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"add entry at location (i,j) in the matrix","declarations":[{"spell":"127:8-127:16|1|2|1","param_spellings":["127:21-127:22","127:28-127:29","127:38-127:43"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":12510249550136389419,"detailed_name":"void SparseMatrixOutline::RemoveEntry(int i, int j)","short_name_offset":26,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"remove entry at location (i,j)","declarations":[{"spell":"129:8-129:19|1|2|1","param_spellings":["129:24-129:25","129:31-129:32"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":7468740220244342631,"detailed_name":"void SparseMatrixOutline::AddBlock3x3Entry(int i, int j, const double *matrix3x3)","short_name_offset":26,"short_name_size":16,"kind":6,"storage":1,"hover":"","comments":"add a 3x3 matrix at location (3*i, 3*j)","declarations":[{"spell":"131:8-131:24|1|2|1","param_spellings":["131:29-131:30","131:36-131:37","131:54-131:63"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":6930531662059444437,"detailed_name":"void SparseMatrixOutline::AddBlock3x3Entry(int i, int j, double value = 0.)","short_name_offset":26,"short_name_size":16,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"132:8-132:24|1|2|1","param_spellings":["132:29-132:30","132:36-132:37","132:46-132:51"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":14280991645605982270,"detailed_name":"void SparseMatrixOutline::AddBlockMatrix(int i, int j, const SparseMatrix *block, double scalarFactor = 1.)","short_name_offset":26,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"add a block (sparse) matrix (optionally multiplied with \"scalarFactor\"), starting at row i, and column j","declarations":[{"spell":"134:8-134:22|1|2|1","param_spellings":["134:27-134:28","134:34-134:35","134:58-134:63","134:72-134:84"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":1920270586329599924,"detailed_name":"void SparseMatrixOutline::IncreaseNumRows(int numAddedRows)","short_name_offset":26,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"135:8-135:23|1|2|1","param_spellings":["135:28-135:40"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":4361343847024429957,"detailed_name":"void SparseMatrixOutline::MultiplyRow(int row, double scalar)","short_name_offset":26,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"137:8-137:19|1|2|1","param_spellings":["137:24-137:27","137:36-137:42"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":9995596611215767221,"detailed_name":"inline int SparseMatrixOutline::Getn() const","short_name_offset":32,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"139:14-139:18|1|2|2","extent":"139:3-139:46|1|2|0","declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":16121794995183136247,"detailed_name":"inline int SparseMatrixOutline::GetNumRows() const","short_name_offset":32,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"140:14-140:24|1|2|2","extent":"140:3-140:52|1|2|0","declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":8367915895677426035,"detailed_name":"int SparseMatrixOutline::GetNumColumns() const","short_name_offset":25,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"141:7-141:20|1|2|1","param_spellings":[]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":7278755628148752274,"detailed_name":"int SparseMatrixOutline::GetNumEntries() const","short_name_offset":25,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"142:7-142:20|1|2|1","param_spellings":[]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":12023905406432508366,"detailed_name":"double SparseMatrixOutline::GetEntry(int i, int j) const","short_name_offset":28,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"143:10-143:18|1|2|1","param_spellings":["143:23-143:24","143:30-143:31"]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":14773545873416018328,"detailed_name":"void SparseMatrixOutline::Print() const","short_name_offset":26,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"144:8-144:13|1|2|1","param_spellings":[]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":2751457088033441194,"detailed_name":"inline const std::map<int, double> &SparseMatrixOutline::GetRow(int i) const","short_name_offset":57,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"low-level routine which is rarely used","declarations":[],"spell":"147:39-147:45|1|2|2","extent":"147:3-147:87|1|2|0","declaring_type":1,"bases":[],"derived":[],"vars":[1],"uses":[],"callees":["147:81-147:82|20|3|36"]},{"id":20,"usr":13481337930097927698,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["147:81-147:82|19|3|36"],"callees":[]},{"id":21,"usr":7353344997215385149,"detailed_name":"void SparseMatrixOutline::Allocate()","short_name_offset":26,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"153:8-153:16|1|2|1","param_spellings":[]}],"declaring_type":1,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":13835166309161675481,"detailed_name":"SparseMatrix::SparseMatrix(const char *filename)","short_name_offset":0,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"160:3-160:15|0|2|1","param_spellings":["160:29-160:37"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":15887852250464326233,"detailed_name":"SparseMatrix::SparseMatrix(SparseMatrixOutline *sparseMatrixOutline)","short_name_offset":0,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"161:3-161:15|0|2|1","param_spellings":["161:38-161:57"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":13497579873610900521,"detailed_name":"SparseMatrix::SparseMatrix(int numRows, int *rowLength, int **columnIndices, double **columnEntries, int shallowCopy = 0)","short_name_offset":0,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"create it by specifying all entries: number of rows, length of each row, indices of columns of non-zero entries in each row, values of non-zero entries in each row\ncolumn indices in each row must be sorted (ascending)\nif shallowCopy=1, the class will not allocate its own internal buffers, but will assume ownership of the input rowLength, columnIndices and columnEntries parameters","declarations":[{"spell":"165:3-165:15|0|2|1","param_spellings":["165:20-165:27","165:35-165:44","165:53-165:66","165:78-165:91","165:97-165:108"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":15614740325979631776,"detailed_name":"SparseMatrix::SparseMatrix(const SparseMatrix &source)","short_name_offset":0,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"167:3-167:15|0|2|1","param_spellings":["167:37-167:43"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":26,"usr":15125339504699209086,"detailed_name":"SparseMatrix::~SparseMatrix() noexcept","short_name_offset":14,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"168:3-168:16|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":27,"usr":12116721926000648876,"detailed_name":"int SparseMatrix::Save(const char *filename, int oneIndexed = 0) const","short_name_offset":18,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"170:7-170:11|0|2|1","param_spellings":["170:25-170:33","170:39-170:49"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":28,"usr":15444655634948855492,"detailed_name":"int SparseMatrix::SaveToMatlabFormat(const char *filename) const","short_name_offset":18,"short_name_size":18,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"172:7-172:25|0|2|1","param_spellings":["172:39-172:47"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":29,"usr":7408870179951581305,"detailed_name":"inline void SparseMatrix::SetEntry(int row, int j, double value)","short_name_offset":26,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"set/add value to the j-th sparse entry in the given row (NOT to matrix element at (row,j))","declarations":[],"spell":"175:15-175:23|0|2|2","extent":"175:3-175:88|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[3,4,5],"uses":[],"callees":[]},{"id":30,"usr":15527256262024209878,"detailed_name":"inline void SparseMatrix::AddEntry(int row, int j, double value)","short_name_offset":26,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"176:15-176:23|0|2|2","extent":"176:3-176:89|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[7,8,9],"uses":[],"callees":[]},{"id":31,"usr":8377321359854495066,"detailed_name":"void SparseMatrix::ResetToZero()","short_name_offset":19,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"177:8-177:19|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":32,"usr":16636200959588378648,"detailed_name":"void SparseMatrix::ResetRowToZero(int row)","short_name_offset":19,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"178:8-178:22|0|2|1","param_spellings":["178:27-178:30"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":33,"usr":10248136158505242160,"detailed_name":"inline int SparseMatrix::Getn() const","short_name_offset":25,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"180:14-180:18|0|2|2","extent":"180:3-180:46|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":34,"usr":9376297180571225133,"detailed_name":"inline int SparseMatrix::GetNumRows() const","short_name_offset":25,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"181:14-181:24|0|2|2","extent":"181:3-181:52|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":35,"usr":4825049414381450359,"detailed_name":"inline int SparseMatrix::GetRowLength(int row) const","short_name_offset":25,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"182:14-182:26|0|2|2","extent":"182:3-182:68|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[11],"uses":[],"callees":[]},{"id":36,"usr":6217182359981097078,"detailed_name":"int SparseMatrix::GetNumColumns() const","short_name_offset":18,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"183:7-183:20|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":37,"usr":5184391012894287972,"detailed_name":"inline double SparseMatrix::GetEntry(int row, int j) const","short_name_offset":28,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"returns the j-th sparse entry in row i (NOT matrix element at (row, j))","declarations":[],"spell":"185:17-185:25|0|2|2","extent":"185:3-185:81|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[13,14],"uses":[],"callees":[]},{"id":38,"usr":18150672880906822486,"detailed_name":"inline int SparseMatrix::GetColumnIndex(int row, int j) const","short_name_offset":25,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"returns the column index of the j-th sparse entry in the given row","declarations":[],"spell":"187:14-187:28|0|2|2","extent":"187:3-187:84|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[15,16],"uses":[],"callees":[]},{"id":39,"usr":8226243286671897005,"detailed_name":"inline double **SparseMatrix::GetEntries() const","short_name_offset":30,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"188:20-188:30|0|2|2","extent":"188:3-188:64|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":40,"usr":4387497056256482602,"detailed_name":"inline int **SparseMatrix::GetColumnIndices() const","short_name_offset":27,"short_name_size":16,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"189:17-189:33|0|2|2","extent":"189:3-189:67|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":41,"usr":12005257008290229007,"detailed_name":"inline int *SparseMatrix::GetRowLengths() const","short_name_offset":26,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"190:16-190:29|0|2|2","extent":"190:3-190:59|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":42,"usr":18177206957442839421,"detailed_name":"int SparseMatrix::GetInverseIndex(int row, int jDense) const","short_name_offset":18,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"finds the compressed column index of element at location (row, jDense)\nreturns -1 if column not found","declarations":[{"spell":"194:7-194:22|0|2|1","param_spellings":["194:27-194:30","194:36-194:42"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":43,"usr":15166323025337117659,"detailed_name":"int SparseMatrix::GetNumEntries() const","short_name_offset":18,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"196:7-196:20|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":44,"usr":5549064990071278139,"detailed_name":"double SparseMatrix::SumEntries() const","short_name_offset":21,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"197:10-197:20|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":45,"usr":4745809341573889172,"detailed_name":"void SparseMatrix::SumRowEntries(double *rowSums) const","short_name_offset":19,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"198:8-198:21|0|2|1","param_spellings":["198:31-198:38"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":46,"usr":8865032286904441161,"detailed_name":"double SparseMatrix::GetMaxAbsEntry() const","short_name_offset":21,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"199:10-199:24|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":47,"usr":9361537112543429213,"detailed_name":"double SparseMatrix::GetInfinityNorm() const","short_name_offset":21,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"200:10-200:25|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":48,"usr":17602736403011936318,"detailed_name":"double SparseMatrix::GetFrobeniusNorm() const","short_name_offset":21,"short_name_size":16,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"201:10-201:26|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":49,"usr":11651512803864516269,"detailed_name":"void SparseMatrix::Print(int sparsePrint = 0) const","short_name_offset":19,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"202:8-202:13|0|2|1","param_spellings":["202:18-202:29"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":50,"usr":7668193926735026948,"detailed_name":"double SparseMatrix::GetRowNorm2(int row) const","short_name_offset":21,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"203:10-203:21|0|2|1","param_spellings":["203:26-203:29"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":51,"usr":2544214308758223808,"detailed_name":"SparseMatrix SparseMatrix::operator+(const SparseMatrix &mat2) const","short_name_offset":27,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"matrix algebra (all involved matrices must have the same pattern of non-zero entries)","declarations":[{"spell":"206:16-206:25|0|2|1","param_spellings":["206:47-206:51"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":52,"usr":8810742360328308793,"detailed_name":"SparseMatrix SparseMatrix::operator-(const SparseMatrix &mat2) const","short_name_offset":27,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"207:16-207:25|0|2|1","param_spellings":["207:47-207:51"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":53,"usr":11231394921613644552,"detailed_name":"SparseMatrix operator*(const double alpha, const SparseMatrix &mat2)","short_name_offset":13,"short_name_size":9,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"208:23-208:32|0|2|1","param_spellings":["208:47-208:52","208:75-208:79"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":54,"usr":10412294632712548336,"detailed_name":"SparseMatrix &SparseMatrix::operator=(const SparseMatrix &source)","short_name_offset":28,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"209:18-209:27|0|2|1","param_spellings":["209:49-209:55"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":55,"usr":6398197234252096520,"detailed_name":"SparseMatrix &SparseMatrix::operator*=(const double alpha)","short_name_offset":28,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"210:18-210:28|0|2|1","param_spellings":["210:42-210:47"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":56,"usr":8599117681370239664,"detailed_name":"SparseMatrix &SparseMatrix::operator+=(const SparseMatrix &mat2)","short_name_offset":28,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"211:18-211:28|0|2|1","param_spellings":["211:50-211:54"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":57,"usr":7919143421985785025,"detailed_name":"SparseMatrix &SparseMatrix::operator-=(const SparseMatrix &mat2)","short_name_offset":28,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"212:18-212:28|0|2|1","param_spellings":["212:50-212:54"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":58,"usr":9256555951651791919,"detailed_name":"bool SparseMatrix::operator==(const SparseMatrix &mat2) const","short_name_offset":19,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"213:8-213:18|0|2|1","param_spellings":["213:40-213:44"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":59,"usr":14531520784637848175,"detailed_name":"bool SparseMatrix::SameStructure(const SparseMatrix &mat2) const","short_name_offset":19,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"check whether two sparse matrices share the same size and locations of non-zero entries","declarations":[{"spell":"215:8-215:21|0|2|1","param_spellings":["215:43-215:47"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":60,"usr":10962529449623966639,"detailed_name":"void SparseMatrix::ScalarMultiply(const double alpha, SparseMatrix *dest = __null)","short_name_offset":19,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"217:8-217:22|0|2|1","param_spellings":["217:36-217:41","217:58-217:62"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":61,"usr":6504051135450691435,"detailed_name":"void SparseMatrix::ScalarMultiplyAdd(const double alpha, SparseMatrix *dest = __null)","short_name_offset":19,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"218:8-218:25|0|2|1","param_spellings":["218:39-218:44","218:61-218:65"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":62,"usr":15535181551084827679,"detailed_name":"void SparseMatrix::MultiplyRow(int row, double scalar)","short_name_offset":19,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"219:8-219:19|0|2|1","param_spellings":["219:24-219:27","219:36-219:42"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":63,"usr":18376913484288800003,"detailed_name":"void SparseMatrix::MultiplyVector(const double *vector, double *result) const","short_name_offset":19,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"multiplies the sparse matrix with the given vector/matrix","declarations":[{"spell":"222:8-222:22|0|2|1","param_spellings":["222:38-222:44","222:55-222:61"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":64,"usr":7975549895256200894,"detailed_name":"void SparseMatrix::MultiplyVectorAdd(const double *vector, double *result) const","short_name_offset":19,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"223:8-223:25|0|2|1","param_spellings":["223:41-223:47","223:58-223:64"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":65,"usr":10196427498268388839,"detailed_name":"void SparseMatrix::MultiplyVector(int startRow, int endRow, const double *vector, double *result) const","short_name_offset":19,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"224:8-224:22|0|2|1","param_spellings":["224:27-224:35","224:41-224:47","224:64-224:70","224:81-224:87"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":66,"usr":17172318647350491341,"detailed_name":"void SparseMatrix::TransposeMultiplyVector(const double *vector, int resultLength, double *result) const","short_name_offset":19,"short_name_size":23,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"225:8-225:31|0|2|1","param_spellings":["225:47-225:53","225:59-225:71","225:82-225:88"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":67,"usr":8593217391838636346,"detailed_name":"void SparseMatrix::TransposeMultiplyVectorAdd(const double *vector, double *result) const","short_name_offset":19,"short_name_size":26,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"226:8-226:34|0|2|1","param_spellings":["226:50-226:56","226:67-226:73"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":68,"usr":13932599093248585586,"detailed_name":"void SparseMatrix::MultiplyMatrix(int numDenseRows, int numDenseColumns, const double *denseMatrix, double *result) const","short_name_offset":19,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"227:8-227:22|0|2|1","param_spellings":["227:27-227:39","227:45-227:60","227:77-227:88","227:99-227:105"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":69,"usr":13196868548248931168,"detailed_name":"void SparseMatrix::MultiplyMatrixAdd(int numDenseRows, int numDenseColumns, const double *denseMatrix, double *result) const","short_name_offset":19,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"228:8-228:25|0|2|1","param_spellings":["228:30-228:42","228:48-228:63","228:80-228:91","228:102-228:108"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":70,"usr":15065985472436224187,"detailed_name":"void SparseMatrix::MultiplyMatrixTranspose(int numDenseColumns, const double *denseMatrix, double *result) const","short_name_offset":19,"short_name_size":23,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"229:8-229:31|0|2|1","param_spellings":["229:36-229:51","229:68-229:79","229:90-229:96"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":71,"usr":13346910259466147178,"detailed_name":"double SparseMatrix::QuadraticForm(const double *vector) const","short_name_offset":21,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"computes <M * vector, vector> (assumes symmetric M)","declarations":[{"spell":"232:10-232:23|0|2|1","param_spellings":["232:39-232:45"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":72,"usr":7100942135820813094,"detailed_name":"void SparseMatrix::NormalizeVector(double *vector) const","short_name_offset":19,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"normalizes vector in the M-norm: vector := vector / sqrt(<M * vector, vector>)  (assumes symmetric M)","declarations":[{"spell":"234:8-234:23|0|2|1","param_spellings":["234:33-234:39"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":73,"usr":17856433542980889136,"detailed_name":"void SparseMatrix::ConjugateMatrix(const double *U, int r, double *MTilde) const","short_name_offset":19,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"235:8-235:23|0|2|1","param_spellings":["235:39-235:40","235:46-235:47","235:58-235:64"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":74,"usr":4849957833397658448,"detailed_name":"SparseMatrix SparseMatrix::ConjugateMatrix(SparseMatrix &U, int verbose = 0, int numColumns = -1)","short_name_offset":27,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"236:16-236:31|0|2|1","param_spellings":["236:47-236:48","236:54-236:61","236:69-236:79"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":75,"usr":4292741929894631936,"detailed_name":"void SparseMatrix::BuildConjugationIndices(SparseMatrix &U, SparseMatrix &MTilde, SparseMatrix::precomputedIndicesType *precomputedIndices)","short_name_offset":19,"short_name_size":23,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"242:8-242:31|0|2|1","param_spellings":["242:47-242:48","242:65-242:71","242:98-242:116"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":76,"usr":11630740803349850774,"detailed_name":"void SparseMatrix::ConjugateMatrix(SparseMatrix::precomputedIndicesType precomputedIndices, SparseMatrix &U, SparseMatrix &MTilde)","short_name_offset":19,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"input: precomputedIndices, U\noutput: MTilde","declarations":[{"spell":"245:8-245:23|0|2|1","param_spellings":["245:47-245:65","245:82-245:83","245:100-245:106"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":77,"usr":9565526402676171763,"detailed_name":"void SparseMatrix::MakeLinearDataArray(double *data) const","short_name_offset":19,"short_name_size":19,"kind":6,"storage":1,"hover":"","comments":"writes all entries into the space provided by 'data'\nspace must be pre-allocated\ndata is written row after row, and by non-zero columns within each row","declarations":[{"spell":"250:8-250:27|0|2|1","param_spellings":["250:37-250:41"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":78,"usr":8953443817127789921,"detailed_name":"void SparseMatrix::MakeLinearRowIndexArray(int *indices) const","short_name_offset":19,"short_name_size":23,"kind":6,"storage":1,"hover":"","comments":"writes row indices of non-zero entries into array \"indices\"\nsame order as for data","declarations":[{"spell":"253:8-253:31|0|2|1","param_spellings":["253:38-253:45"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":79,"usr":8272798360988885793,"detailed_name":"void SparseMatrix::MakeLinearRowIndexArray(double *indices) const","short_name_offset":19,"short_name_size":23,"kind":6,"storage":1,"hover":"","comments":"indices in this function version are double to ensure compatibility with Matlab","declarations":[{"spell":"255:8-255:31|0|2|1","param_spellings":["255:41-255:48"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":80,"usr":9739781196298114307,"detailed_name":"void SparseMatrix::MakeLinearColumnIndexArray(int *indices) const","short_name_offset":19,"short_name_size":26,"kind":6,"storage":1,"hover":"","comments":"writes column indices","declarations":[{"spell":"257:8-257:34|0|2|1","param_spellings":["257:41-257:48"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":81,"usr":13495759809742358079,"detailed_name":"void SparseMatrix::MakeLinearColumnIndexArray(double *indices) const","short_name_offset":19,"short_name_size":26,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"258:8-258:34|0|2|1","param_spellings":["258:44-258:51"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":82,"usr":12727331049340725044,"detailed_name":"void SparseMatrix::MakeDenseMatrix(double *denseMatrix, int numColumns = -1) const","short_name_offset":19,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"Make a dense matrix (column-major storage).\n(this can be a huge matrix for large sparse matrices)\nStorage in denseMatrix must be pre-allocated.\nThe size of the denseMatrix is: this->GetNumRows() x (numColumns == -1 ? this->GetNumColumns() : numColumns).","declarations":[{"spell":"264:8-264:23|0|2|1","param_spellings":["264:33-264:44","264:50-264:60"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":83,"usr":1136723569378581268,"detailed_name":"void SparseMatrix::MakeDenseMatrixTranspose(int numColumns, double *denseMatrix) const","short_name_offset":19,"short_name_size":24,"kind":6,"storage":1,"hover":"","comments":"also transposes the matrix:","declarations":[{"spell":"266:8-266:32|0|2|1","param_spellings":["266:37-266:47","266:58-266:69"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":84,"usr":10541632570186760409,"detailed_name":"void SparseMatrix::RemoveRowColumn(int rowColumn)","short_name_offset":19,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"removes row(s) and column(s) from the matrix","declarations":[{"spell":"269:8-269:23|0|2|1","param_spellings":["269:28-269:37"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":85,"usr":4877127124125844592,"detailed_name":"void SparseMatrix::RemoveRowsColumns(int numRemovedRowColumns, const int *removedRowColumns, int oneIndexed = 0)","short_name_offset":19,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"270:8-270:25|0|2|1","param_spellings":["270:30-270:50","270:64-270:81","270:87-270:97"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":86,"usr":1055108507745103977,"detailed_name":"void SparseMatrix::RemoveRowsColumnsSlow(int numRemovedRowColumns, const int *removedRowColumns, int oneIndexed = 0)","short_name_offset":19,"short_name_size":21,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"271:8-271:29|0|2|1","param_spellings":["271:34-271:54","271:68-271:85","271:91-271:101"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":87,"usr":2488246329785817442,"detailed_name":"void SparseMatrix::RemoveRow(int row)","short_name_offset":19,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"removes row(s) from the matrix","declarations":[{"spell":"274:8-274:17|0|2|1","param_spellings":["274:22-274:25"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":88,"usr":5232365752924434772,"detailed_name":"void SparseMatrix::RemoveRows(int numRemovedRows, const int *removedRows, int oneIndexed = 0)","short_name_offset":19,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"275:8-275:18|0|2|1","param_spellings":["275:23-275:37","275:51-275:62","275:68-275:78"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":89,"usr":13963122555969064665,"detailed_name":"void SparseMatrix::RemoveRowsSlow(int numRemovedRows, const int *removedRows, int oneIndexed = 0)","short_name_offset":19,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"276:8-276:22|0|2|1","param_spellings":["276:27-276:41","276:55-276:66","276:72-276:82"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":90,"usr":15592502974418035311,"detailed_name":"void SparseMatrix::RemoveColumn(int column)","short_name_offset":19,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"removes column(s) from the matrix","declarations":[{"spell":"279:8-279:20|0|2|1","param_spellings":["279:25-279:31"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":91,"usr":6314238074401823433,"detailed_name":"void SparseMatrix::RemoveColumns(int numRemovedColumns, const int *removedColumns, int oneIndexed = 0)","short_name_offset":19,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"280:8-280:21|0|2|1","param_spellings":["280:26-280:43","280:57-280:71","280:77-280:87"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":92,"usr":10057861693689009648,"detailed_name":"void SparseMatrix::RemoveColumnsSlow(int numRemovedColumns, const int *removedColumns, int oneIndexed = 0)","short_name_offset":19,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"281:8-281:25|0|2|1","param_spellings":["281:30-281:47","281:61-281:75","281:81-281:91"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":93,"usr":2314524147779081861,"detailed_name":"void SparseMatrix::IncreaseNumRows(int numAddedRows)","short_name_offset":19,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"283:8-283:23|0|2|1","param_spellings":["283:28-283:40"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":94,"usr":762549789358596315,"detailed_name":"void SparseMatrix::SetRows(const SparseMatrix *source, int startRow, int startColumn = 0)","short_name_offset":19,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"284:8-284:15|0|2|1","param_spellings":["284:37-284:43","284:49-284:57","284:63-284:74"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":95,"usr":7966069694729815260,"detailed_name":"void SparseMatrix::AppendRowsColumns(const SparseMatrix *source)","short_name_offset":19,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"285:8-285:25|0|2|1","param_spellings":["285:47-285:53"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":96,"usr":278770948318172637,"detailed_name":"void SparseMatrix::BuildTranspositionIndices()","short_name_offset":19,"short_name_size":25,"kind":6,"storage":1,"hover":"","comments":"transposition (note: the matrix need not be symmetric)","declarations":[{"spell":"288:8-288:33|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":97,"usr":17033148465975033336,"detailed_name":"void SparseMatrix::FreeTranspositionIndices()","short_name_offset":19,"short_name_size":24,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"289:8-289:32|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":98,"usr":8158369623184287051,"detailed_name":"inline int SparseMatrix::TransposedIndex(int row, int j) const","short_name_offset":25,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"returns the list position of the transposed element (row, list position j)\nmust first call BuildTranspositionIndices()","declarations":[],"spell":"292:14-292:29|0|2|2","extent":"292:3-292:89|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[18,19],"uses":[],"callees":[]},{"id":99,"usr":538736801810530117,"detailed_name":"SparseMatrix *SparseMatrix::Transpose(int numColumns = -1)","short_name_offset":28,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"returns the transposed matrix\nnumColumns is the number of columns in the original matrix;\nthis is important in case there are zero columns at the end of the matrix\nif numColumns=-1 (default), GetNumColumns() will be called; however, this will lead to a transposed matrix with a fewer number of rows in case of empty columns at the end of the original matrix","declarations":[{"spell":"298:18-298:27|0|2|1","param_spellings":["298:32-298:42"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":100,"usr":15858625251611364536,"detailed_name":"void SparseMatrix::AssignTransposedMatrix(SparseMatrix &AT)","short_name_offset":19,"short_name_size":22,"kind":6,"storage":1,"hover":"","comments":"assign a transposed matrix AT to this matrix; topology of AT must be transpose of topology of this matrix\nnote: this function calls BuildTranspositionIndices internally, so you don't need to call BuildTranspositionIndices first","declarations":[{"spell":"301:8-301:30|0|2|1","param_spellings":["301:46-301:48"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":101,"usr":7617548909131474608,"detailed_name":"double SparseMatrix::SkewSymmetricCheck()","short_name_offset":21,"short_name_size":18,"kind":6,"storage":1,"hover":"","comments":"checks if the matrix is skew-symmetric\nthe non-zero entry locations must form a symmetric pattern\nreturns max ( abs ( A^T + A ) ) = || A^T + A ||_{\\infty}\nnote: this function calls BuildTranspositionIndices internally, so you don't need to call BuildTranspositionIndices first","declarations":[{"spell":"307:10-307:28|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":102,"usr":10451593615840229432,"detailed_name":"void SparseMatrix::SymmetrizeMatrix()","short_name_offset":19,"short_name_size":16,"kind":6,"storage":1,"hover":"","comments":"makes matrix symmetric by copying upper triangle + diagonal into the lower triangle\nthe non-zero entry locations must form a symmetric pattern\nnote: this function calls BuildTranspositionIndices internally, so you don't need to call BuildTranspositionIndices first","declarations":[{"spell":"311:8-311:24|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":103,"usr":259356953494392447,"detailed_name":"void SparseMatrix::BuildDiagonalIndices()","short_name_offset":19,"short_name_size":20,"kind":6,"storage":1,"hover":"","comments":"pre-computes the sparse columns of diagonal matrix entries\nthis routine will accelerate subsequent GetDiagonal or AddDiagonalMatrix calls, but is not necessary for GetDiagonal or AddDiagonalMatrix","declarations":[{"spell":"315:8-315:28|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":104,"usr":8421010793725481265,"detailed_name":"void SparseMatrix::FreeDiagonalIndices()","short_name_offset":19,"short_name_size":19,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"316:8-316:27|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":105,"usr":7718054001913648895,"detailed_name":"void SparseMatrix::GetDiagonal(double *diagonal) const","short_name_offset":19,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"317:8-317:19|0|2|1","param_spellings":["317:29-317:37"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":106,"usr":15552176572679735890,"detailed_name":"void SparseMatrix::AddDiagonalMatrix(double *diagonalMatrix)","short_name_offset":19,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"318:8-318:25|0|2|1","param_spellings":["318:35-318:49"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":107,"usr":7785663162457287156,"detailed_name":"void SparseMatrix::AddDiagonalMatrix(double constDiagonalElement)","short_name_offset":19,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"319:8-319:25|0|2|1","param_spellings":["319:33-319:53"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":108,"usr":14345663256242166535,"detailed_name":"void SparseMatrix::BuildSubMatrixIndices(const SparseMatrix &submatrix, int subMatrixID = 0, int startRow = 0, int startColumn = 0)","short_name_offset":19,"short_name_size":21,"kind":6,"storage":1,"hover":"","comments":"Build submatrix indices is used for pair of matrices where the sparsity of one matrix is a subset of another matrix (for example, mass matrix and stiffness matrix). \nIt allows you to assign/add a submatrix to the current matrix.\nThe submatrix begins at row \"startRow\" and column \"startColumn\" of this matrix.\nsubmatrixID allows you to keep several submatrices at once\nCall this once to establish the correspondence:","declarations":[{"spell":"326:8-326:29|0|2|1","param_spellings":["326:51-326:60","326:66-326:77","326:85-326:93","326:101-326:112"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":109,"usr":8021969687126157892,"detailed_name":"void SparseMatrix::FreeSubMatrixIndices(int subMatrixID = 0)","short_name_offset":19,"short_name_size":20,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"327:8-327:28|0|2|1","param_spellings":["327:33-327:44"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":110,"usr":3316870196354874698,"detailed_name":"void SparseMatrix::AssignSubMatrix(const SparseMatrix &submatrix, int subMatrixID = 0)","short_name_offset":19,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"assign a submatrix to the current matrix, whose elements are a subset of the elements of the current matrix\nnote: the other entries of the current matrix are unmodified","declarations":[{"spell":"330:8-330:23|0|2|1","param_spellings":["330:45-330:54","330:60-330:71"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":111,"usr":11723396364971925169,"detailed_name":"void SparseMatrix::AssignToSubMatrix(SparseMatrix &submatrix, int subMatrixID = 0) const","short_name_offset":19,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"assign the current matrix to a submatrix","declarations":[{"spell":"332:8-332:25|0|2|1","param_spellings":["332:41-332:50","332:56-332:67"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":112,"usr":16583931869230508141,"detailed_name":"SparseMatrix &SparseMatrix::AddSubMatrix(double factor, SparseMatrix &submatrix, int subMatrixID = 0)","short_name_offset":28,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"add a matrix to the current matrix, whose elements are a subset of the elements of the current matrix\n+= factor * mat2\nreturns *this","declarations":[{"spell":"336:18-336:30|0|2|1","param_spellings":["336:38-336:44","336:61-336:70","336:76-336:87"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":113,"usr":17035268367923504831,"detailed_name":"void SparseMatrix::BuildSuperMatrixIndices(int numFixedRowColumns, int *fixedRowColumns, const SparseMatrix *superMatrix, int oneIndexed = 0)","short_name_offset":19,"short_name_size":23,"kind":6,"storage":1,"hover":"","comments":"Build supermatrix indices is used for pair of matrices with rows/columns removed.\nIt allows you to assign a super matrix to the current matrix.\noneIndexed: tells whether the fixed rows and columns are specified 1-indexed or 0-indexed\nFirst, call BuildSuperMatrixIndices once to inialize (all fixed rows and columns are indexed with respect the superMatrix):","declarations":[{"spell":"342:8-342:31|0|2|1","param_spellings":["342:36-342:54","342:62-342:77","342:100-342:111","342:117-342:127"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":114,"usr":7538847585684144414,"detailed_name":"void SparseMatrix::BuildSuperMatrixIndices(int numFixedRows, int *fixedRows, int numFixedColumns, int *fixedColumns, const SparseMatrix *superMatrix, int oneIndexed = 0)","short_name_offset":19,"short_name_size":23,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"343:8-343:31|0|2|1","param_spellings":["343:36-343:48","343:56-343:65","343:71-343:86","343:94-343:106","343:129-343:140","343:146-343:156"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":115,"usr":11067038331882646367,"detailed_name":"void SparseMatrix::AssignSuperMatrix(const SparseMatrix &superMatrix)","short_name_offset":19,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"Then, call this (potentially many times) to quickly assign the values at the appropriate places in the submatrix.\nFor example, you can use this to copy data from a matrix into a submatrix obtained by a previous call to RemoveRowColumns.","declarations":[{"spell":"346:8-346:25|0|2|1","param_spellings":["346:47-346:58"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":116,"usr":17174397170970424722,"detailed_name":"int SparseMatrix::GetNumLowerTriangleEntries() const","short_name_offset":18,"short_name_size":26,"kind":6,"storage":1,"hover":"","comments":"returns the total number of non-zero entries in the lower triangle (including diagonal)","declarations":[{"spell":"349:7-349:33|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":117,"usr":3603090762961914660,"detailed_name":"int SparseMatrix::GetNumUpperTriangleEntries() const","short_name_offset":18,"short_name_size":26,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"350:7-350:33|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":118,"usr":16372605648052500414,"detailed_name":"int SparseMatrix::GenerateNAGFormat(double *a, int *irow, int *icol, int *istr) const","short_name_offset":18,"short_name_size":17,"kind":6,"storage":1,"hover":"","comments":"exports the matrix to format for NAG library","declarations":[{"spell":"352:7-352:24|0|2|1","param_spellings":["352:34-352:35","352:42-352:46","352:53-352:57","352:65-352:69"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":119,"usr":18018260801368084231,"detailed_name":"void SparseMatrix::GenerateCompressedRowMajorFormat(double *a, int *ia, int *ja, int upperTriangleOnly = 0, int oneIndexed = 0) const","short_name_offset":19,"short_name_size":32,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"354:8-354:40|0|2|1","param_spellings":["354:50-354:51","354:59-354:61","354:69-354:71","354:77-354:94","354:102-354:112"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":120,"usr":6868327854972623763,"detailed_name":"void SparseMatrix::GenerateCompressedRowMajorFormat_four_array(double *values, int *columns, int *pointerB, int *pointerE, int upperTriangleOnly = 0, int oneIndexed = 0) const","short_name_offset":19,"short_name_size":43,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"355:8-355:51|0|2|1","param_spellings":["355:61-355:67","355:75-355:82","355:90-355:98","355:106-355:114","355:120-355:137","355:145-355:155"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":121,"usr":7246241760270857699,"detailed_name":"void SparseMatrix::DiagonalSolve(double *rhs) const","short_name_offset":19,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"diagonal solve M * x = b\nASSUMES the sparse matrix is diagonal !\nresult is overwritten into rhs\n(to solve non-diagonal linear systems, you need to use an external library; or you can use the CGSolver class, or you can use the Gauss-Seidel iteration below)","declarations":[{"spell":"361:8-361:21|0|2|1","param_spellings":["361:31-361:34"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":122,"usr":6525657033861941890,"detailed_name":"void SparseMatrix::DoOneGaussSeidelIteration(double *x, const double *b) const","short_name_offset":19,"short_name_size":25,"kind":6,"storage":1,"hover":"","comments":"performs one Gauss-Seidel iteration of solving the system A * x = b\nupdates vector x in place, b is not modified\n(A can be a general matrix)\nassumes that diagonal entries of the matrix are set and are non-zero","declarations":[{"spell":"367:8-367:33|0|2|1","param_spellings":["367:43-367:44","367:61-367:62"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":123,"usr":4738390385301443182,"detailed_name":"void SparseMatrix::ComputeResidual(const double *x, const double *b, double *residual) const","short_name_offset":19,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"368:8-368:23|0|2|1","param_spellings":["368:39-368:40","368:57-368:58","368:69-368:77"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":124,"usr":17983375153997117729,"detailed_name":"double SparseMatrix::CheckLinearSystemSolution(const double *x, const double *b, int verbose = 1, double *buffer = __null) const","short_name_offset":21,"short_name_size":25,"kind":6,"storage":1,"hover":"","comments":"checks if A * x - b is close to zero and prints out the findings\nreturns ||A * x - b|| / ||b|| (all norms are infinity)\npassing a buffer (length of n) will avoid a malloc/free pair to generate scratch space for the residual","declarations":[{"spell":"372:10-372:35|0|2|1","param_spellings":["372:51-372:52","372:69-372:70","372:76-372:83","372:96-372:102"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":125,"usr":16912711563017822485,"detailed_name":"inline double **SparseMatrix::GetDataHandle() const","short_name_offset":30,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"below are low-level routines which are rarely used","declarations":[],"spell":"375:20-375:33|0|2|2","extent":"375:3-375:67|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":126,"usr":16121454833868484740,"detailed_name":"inline double *SparseMatrix::GetRowHandle(int row) const","short_name_offset":29,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"376:19-376:31|0|2|2","extent":"376:3-376:77|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[21],"uses":[],"callees":[]},{"id":127,"usr":6377958037122278999,"detailed_name":"static SparseMatrix *SparseMatrix::CreateIdentityMatrix(int n)","short_name_offset":35,"short_name_size":20,"kind":254,"storage":3,"hover":"","comments":"create a nxn identity matrix","declarations":[{"spell":"379:25-379:45|0|2|1","param_spellings":["379:50-379:51"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":128,"usr":13479773770879476828,"detailed_name":"void SparseMatrix::InitFromOutline(SparseMatrixOutline *sparseMatrixOutline)","short_name_offset":19,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"407:8-407:23|0|2|1","param_spellings":["407:46-407:65"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":129,"usr":4506918317316122057,"detailed_name":"void SparseMatrix::Allocate()","short_name_offset":19,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"408:8-408:16|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":130,"usr":14315646697663630606,"detailed_name":"void SparseMatrix::BuildRenumberingVector(int nConstrained, int nSuper, int numFixedDOFs, int *fixedDOFs, int **superDOFs, int oneIndexed = 0)","short_name_offset":19,"short_name_size":22,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"409:8-409:30|0|2|1","param_spellings":["409:35-409:47","409:53-409:59","409:65-409:77","409:85-409:94","409:103-409:112","409:118-409:128"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":376491768849866715,"detailed_name":"int SparseMatrixOutline::numRows","short_name_offset":25,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"151:7-151:14|1|2|2","extent":"151:3-151:14|1|2|0","type":2,"uses":["139:36-139:43|13|3|12","140:42-140:49|14|3|12"],"kind":8,"storage":0},{"id":1,"usr":11061360956091279085,"detailed_name":"int i","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"147:50-147:51|19|3|2","extent":"147:46-147:51|19|3|0","type":2,"uses":["147:82-147:83|19|3|12"],"kind":253,"storage":1},{"id":2,"usr":16145033624043733207,"detailed_name":"std::vector<std::map<int, double> > SparseMatrixOutline::columnEntries","short_name_offset":57,"short_name_size":13,"hover":"","comments":"","declarations":[],"spell":"152:39-152:52|1|2|2","extent":"152:3-152:52|1|2|0","type":5,"uses":["147:68-147:81|19|3|4"],"kind":8,"storage":0},{"id":3,"usr":14965205397985739811,"detailed_name":"int row","short_name_offset":4,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"175:28-175:31|29|3|2","extent":"175:24-175:31|29|3|0","type":2,"uses":["175:70-175:73|29|3|12"],"kind":253,"storage":1},{"id":4,"usr":7105879284797689272,"detailed_name":"int j","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"175:37-175:38|29|3|2","extent":"175:33-175:38|29|3|0","type":2,"uses":["175:75-175:76|29|3|12"],"kind":253,"storage":1},{"id":5,"usr":17586020127699615992,"detailed_name":"double value","short_name_offset":7,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"175:47-175:52|29|3|2","extent":"175:40-175:52|29|3|0","type":6,"uses":["175:80-175:85|29|3|12"],"kind":253,"storage":1},{"id":6,"usr":16722926052924883649,"detailed_name":"double **SparseMatrix::columnEntries","short_name_offset":23,"short_name_size":13,"hover":"","comments":"values of non-zero entries in each row","declarations":[],"spell":"387:13-387:26|0|2|2","extent":"387:3-387:26|0|2|0","type":6,"uses":["175:56-175:69|29|3|12","176:56-176:69|30|3|12","185:57-185:70|37|3|12","188:48-188:61|39|3|12","375:51-375:64|125|3|12","376:56-376:69|126|3|12"],"kind":8,"storage":0},{"id":7,"usr":13609243181963979132,"detailed_name":"int row","short_name_offset":4,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"176:28-176:31|30|3|2","extent":"176:24-176:31|30|3|0","type":2,"uses":["176:70-176:73|30|3|12"],"kind":253,"storage":1},{"id":8,"usr":12085516881219083702,"detailed_name":"int j","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"176:37-176:38|30|3|2","extent":"176:33-176:38|30|3|0","type":2,"uses":["176:75-176:76|30|3|12"],"kind":253,"storage":1},{"id":9,"usr":7128820666721057564,"detailed_name":"double value","short_name_offset":7,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"176:47-176:52|30|3|2","extent":"176:40-176:52|30|3|0","type":6,"uses":["176:81-176:86|30|3|12"],"kind":253,"storage":1},{"id":10,"usr":16054222228118260176,"detailed_name":"int SparseMatrix::numRows","short_name_offset":18,"short_name_size":7,"hover":"","comments":"number of rows","declarations":[],"spell":"384:7-384:14|0|2|2","extent":"384:3-384:14|0|2|0","type":2,"uses":["180:36-180:43|33|3|12","181:42-181:49|34|3|12"],"kind":8,"storage":0},{"id":11,"usr":14871629687740006649,"detailed_name":"int row","short_name_offset":4,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"182:31-182:34|35|3|2","extent":"182:27-182:34|35|3|0","type":2,"uses":["182:61-182:64|35|3|12"],"kind":253,"storage":1},{"id":12,"usr":9019806915819507895,"detailed_name":"int *SparseMatrix::rowLength","short_name_offset":19,"short_name_size":9,"hover":"","comments":"length of each row","declarations":[],"spell":"385:9-385:18|0|2|2","extent":"385:3-385:18|0|2|0","type":2,"uses":["182:51-182:60|35|3|12","190:47-190:56|41|3|12"],"kind":8,"storage":0},{"id":13,"usr":15879182606405833447,"detailed_name":"int row","short_name_offset":4,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"185:30-185:33|37|3|2","extent":"185:26-185:33|37|3|0","type":2,"uses":["185:71-185:74|37|3|12"],"kind":253,"storage":1},{"id":14,"usr":15157982875082377722,"detailed_name":"int j","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"185:39-185:40|37|3|2","extent":"185:35-185:40|37|3|0","type":2,"uses":["185:76-185:77|37|3|12"],"kind":253,"storage":1},{"id":15,"usr":9248861125148764698,"detailed_name":"int row","short_name_offset":4,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"187:33-187:36|38|3|2","extent":"187:29-187:36|38|3|0","type":2,"uses":["187:74-187:77|38|3|12"],"kind":253,"storage":1},{"id":16,"usr":8070552648208934540,"detailed_name":"int j","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"187:42-187:43|38|3|2","extent":"187:38-187:43|38|3|0","type":2,"uses":["187:79-187:80|38|3|12"],"kind":253,"storage":1},{"id":17,"usr":12722854641190327843,"detailed_name":"int **SparseMatrix::columnIndices","short_name_offset":20,"short_name_size":13,"hover":"","comments":"indices of columns of non-zero entries in each row","declarations":[],"spell":"386:10-386:23|0|2|2","extent":"386:3-386:23|0|2|0","type":2,"uses":["187:60-187:73|38|3|12","189:51-189:64|40|3|12"],"kind":8,"storage":0},{"id":18,"usr":14801755712176493962,"detailed_name":"int row","short_name_offset":4,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"292:34-292:37|98|3|2","extent":"292:30-292:37|98|3|0","type":2,"uses":["292:79-292:82|98|3|12"],"kind":253,"storage":1},{"id":19,"usr":15323055150748477813,"detailed_name":"int j","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"292:43-292:44|98|3|2","extent":"292:39-292:44|98|3|0","type":2,"uses":["292:84-292:85|98|3|12"],"kind":253,"storage":1},{"id":20,"usr":13555961890003506040,"detailed_name":"int **SparseMatrix::transposedIndices","short_name_offset":20,"short_name_size":17,"hover":"","comments":"","declarations":[],"spell":"390:10-390:27|0|2|2","extent":"390:3-390:27|0|2|0","type":2,"uses":["292:61-292:78|98|3|12"],"kind":8,"storage":0},{"id":21,"usr":6095423672815536902,"detailed_name":"int row","short_name_offset":4,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"376:36-376:39|126|3|2","extent":"376:32-376:39|126|3|0","type":2,"uses":["376:70-376:73|126|3|12"],"kind":253,"storage":1},{"id":22,"usr":4967148202740699968,"detailed_name":"int *SparseMatrix::diagonalIndices","short_name_offset":19,"short_name_size":15,"hover":"","comments":"","declarations":[],"spell":"389:9-389:24|0|2|2","extent":"389:3-389:24|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":23,"usr":6412336730787465901,"detailed_name":"int SparseMatrix::numSubMatrixIDs","short_name_offset":18,"short_name_size":15,"hover":"","comments":"\nnumSubMatrixIDs specifies how many sub-matrix relationships we have\nlength(subMatrixIndices) == length(subMatrixIndexLengths) == length(subMatrixStartRow) == (numSubMatrixIDs + 1)\nlength(subMatrixIndexLengths[subMatrixID]) == length(subMatrixIndices[subMatrixID]) == number of rows = numRows\nlength(subMatrixIndices[subMatrixID][rowIndex]) == subMatrixIndexLengths[subMatrixID][rowIndex]","declarations":[],"spell":"398:7-398:22|0|2|2","extent":"398:3-398:22|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":24,"usr":17025535212091092815,"detailed_name":"int ***SparseMatrix::subMatrixIndices","short_name_offset":21,"short_name_size":16,"hover":"","comments":"","declarations":[],"spell":"399:11-399:27|0|2|2","extent":"399:3-399:27|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":25,"usr":2568411265969753580,"detailed_name":"int **SparseMatrix::subMatrixIndexLengths","short_name_offset":20,"short_name_size":21,"hover":"","comments":"","declarations":[],"spell":"400:10-400:31|0|2|2","extent":"400:3-400:31|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":26,"usr":13574925721315211653,"detailed_name":"int *SparseMatrix::subMatrixStartRow","short_name_offset":19,"short_name_size":17,"hover":"","comments":"","declarations":[],"spell":"401:9-401:26|0|2|2","extent":"401:3-401:26|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":27,"usr":16838627353436800261,"detailed_name":"int *SparseMatrix::subMatrixNumRows","short_name_offset":19,"short_name_size":16,"hover":"","comments":"","declarations":[],"spell":"402:9-402:25|0|2|2","extent":"402:3-402:25|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":28,"usr":13646103768653591094,"detailed_name":"int **SparseMatrix::superMatrixIndices","short_name_offset":20,"short_name_size":18,"hover":"","comments":"","declarations":[],"spell":"404:10-404:28|0|2|2","extent":"404:3-404:28|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":29,"usr":10392965375494376920,"detailed_name":"int *SparseMatrix::superRows","short_name_offset":19,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"405:9-405:18|0|2|2","extent":"405:3-405:18|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":30,"usr":6986470100434178873,"detailed_name":"_SPARSE_MATRIX_H_","short_name_offset":0,"short_name_size":17,"hover":"#define _SPARSE_MATRIX_H_","comments":"","declarations":[],"spell":"30:9-30:26|-1|1|2","extent":"30:9-30:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":31,"usr":291038054068649371,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["217:63-217:67|-1|1|4","218:66-218:70|-1|1|4","372:103-372:107|-1|1|4"],"kind":0,"storage":0}]}