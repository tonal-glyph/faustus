15
{"last_modification_time":1548168587,"language":2,"import_file":"/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/wildMagic/geometryQuery/verticesQuery.cpp","args":["clang++","-working-directory=/home/dark/proj/faust/","/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/wildMagic/geometryQuery/verticesQuery.cpp","-resource-dir=/usr/lib/clang/7.0.1","-Wno-unknown-warning-option","-fparse-all-comments","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/x86_64-pc-linux-gnu","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/backward","-isystem/usr/local/include","-isystem/usr/lib/clang/7.0.1/include","-isystem/usr/include"],"includes":[{"line":44,"resolved_path":"/usr/include/c++/8.2.1/vector"},{"line":46,"resolved_path":"/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/wildMagic/geometryQuery/query.h"}],"dependencies":["/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/wildMagic/geometryQuery/verticesQuery.cpp","/usr/include/c++/8.2.1/vector","/usr/include/c++/8.2.1/bits/stl_algobase.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++config.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/os_defines.h","/usr/include/features.h","/usr/include/sys/cdefs.h","/usr/include/gnu/stubs.h","/usr/include/c++/8.2.1/bits/functexcept.h","/usr/include/c++/8.2.1/bits/cpp_type_traits.h","/usr/include/c++/8.2.1/ext/type_traits.h","/usr/include/c++/8.2.1/ext/numeric_traits.h","/usr/include/c++/8.2.1/bits/stl_pair.h","/usr/include/c++/8.2.1/bits/move.h","/usr/include/c++/8.2.1/bits/concept_check.h","/usr/include/c++/8.2.1/type_traits","/usr/include/c++/8.2.1/bits/stl_iterator_base_types.h","/usr/include/c++/8.2.1/bits/stl_iterator_base_funcs.h","/usr/include/c++/8.2.1/bits/stl_iterator.h","/usr/include/c++/8.2.1/bits/ptr_traits.h","/usr/include/c++/8.2.1/debug/debug.h","/usr/include/c++/8.2.1/bits/allocator.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++allocator.h","/usr/include/c++/8.2.1/ext/new_allocator.h","/usr/include/c++/8.2.1/new","/usr/include/c++/8.2.1/exception","/usr/include/c++/8.2.1/bits/exception.h","/usr/include/c++/8.2.1/bits/exception_ptr.h","/usr/include/c++/8.2.1/bits/cxxabi_init_exception.h","/usr/lib/clang/7.0.1/include/stddef.h","/usr/include/c++/8.2.1/typeinfo","/usr/include/c++/8.2.1/bits/hash_bytes.h","/usr/include/c++/8.2.1/bits/nested_exception.h","/usr/include/c++/8.2.1/bits/memoryfwd.h","/usr/include/c++/8.2.1/bits/stl_construct.h","/usr/include/c++/8.2.1/ext/alloc_traits.h","/usr/include/c++/8.2.1/bits/alloc_traits.h","/usr/include/c++/8.2.1/bits/stl_uninitialized.h","/usr/include/c++/8.2.1/bits/stl_vector.h","/usr/include/c++/8.2.1/initializer_list","/usr/include/c++/8.2.1/bits/stl_bvector.h","/usr/include/c++/8.2.1/bits/functional_hash.h","/usr/include/c++/8.2.1/bits/range_access.h","/usr/include/c++/8.2.1/bits/predefined_ops.h","/usr/lib/clang/7.0.1/include/__stddef_max_align_t.h","/usr/include/c++/8.2.1/bits/vector.tcc","/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/wildMagic/geometryQuery/query.h","/usr/include/stdc-predef.h","/usr/include/bits/wordsize.h","/usr/include/gnu/stubs-64.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/cpu_defines.h","/usr/include/c++/8.2.1/bits/exception_defines.h","/usr/include/c++/8.2.1/debug/assertions.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":17593574072614977478,"detailed_name":"VerticesQuery","short_name_offset":0,"short_name_size":13,"kind":5,"hover":"","comments":"","declarations":["53:3-53:16|-1|1|4","54:12-54:25|-1|1|4"],"spell":"49:7-49:20|-1|1|2","extent":"49:1-167:2|-1|1|0","bases":[1],"derived":[],"types":[],"funcs":[0,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"vars":[9],"instances":[],"uses":["53:3-53:16|0|2|4"]},{"id":1,"usr":5485081286008484009,"detailed_name":"Query","short_name_offset":0,"short_name_size":5,"kind":0,"hover":"","comments":"","declarations":["49:30-49:35|-1|1|4"],"bases":[],"derived":[0],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["49:30-49:35|-1|1|4"]},{"id":2,"usr":12990201444621114526,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["57:11-57:15|-1|1|4"]},{"id":3,"usr":5778908825573379114,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["60:10-60:16|-1|1|4"]},{"id":4,"usr":16431759019560248284,"detailed_name":"VerticesQuery::Information","short_name_offset":15,"short_name_size":11,"kind":23,"hover":"","comments":"","declarations":[],"spell":"96:10-96:21|0|2|2","extent":"96:3-135:4|0|2|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[1,2,3,4,5,6,7,8],"instances":[],"uses":["138:39-138:50|-1|1|4"]},{"id":5,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[1,5,7,8,9],"uses":[]},{"id":6,"usr":22,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2,3,4],"uses":[]},{"id":7,"usr":3,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[6],"uses":[]}],"funcs":[{"id":0,"usr":13167212184195859367,"detailed_name":"VerticesQuery::VerticesQuery(int numVertices, const int *vertices)","short_name_offset":0,"short_name_size":13,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"53:3-53:16|0|2|1","param_spellings":["53:22-53:33","53:49-53:57"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":15990518946350740004,"detailed_name":"virtual VerticesQuery::~VerticesQuery() noexcept","short_name_offset":23,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"54:11-54:25|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":18030248043909452943,"detailed_name":"virtual Query::Type VerticesQuery::getType() const","short_name_offset":35,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"Run-time type information.","declarations":[],"spell":"57:16-57:23|0|2|2","extent":"57:3-57:51|0|2|0","declaring_type":0,"bases":[3],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":6502893412300766663,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[2],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":16044846382934480105,"detailed_name":"inline size_t VerticesQuery::getNumVertices() const","short_name_offset":29,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"Member access.","declarations":[],"spell":"60:17-60:31|0|2|2","extent":"60:3-60:68|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":10964410798764627710,"detailed_name":"inline const int *VerticesQuery::getVertices() const","short_name_offset":33,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"61:24-61:35|0|2|2","extent":"61:3-61:72|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":12555749232397390236,"detailed_name":"virtual void VerticesQuery::addVertex(const int &v)","short_name_offset":28,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"63:16-63:25|0|2|1","param_spellings":["63:40-63:41"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":10969985197523394309,"detailed_name":"virtual int VerticesQuery::toPlane(int i, int v0, int v1, int v2) const","short_name_offset":27,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"Returns:\n  +1, on positive side of plane\n  -1, on negative side of plane\n   0, on the plane\nnormal direction of plane: cross(v1-v0, v2-v0)","declarations":[{"spell":"72:15-72:22|0|2|1","param_spellings":["72:28-72:29","72:35-72:37","72:43-72:45","72:51-72:53"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":3369585389448099692,"detailed_name":"virtual int VerticesQuery::toPlane(const int &test, int v0, int v1, int v2) const","short_name_offset":27,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"73:15-73:22|0|2|1","param_spellings":["73:37-73:41","73:47-73:49","73:55-73:57","73:63-73:65"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":16938524767793546162,"detailed_name":"virtual int VerticesQuery::toTetrahedron(int i, int v0, int v1, int v2, int v3) const","short_name_offset":27,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"Returns:\n  +1, outside tetrahedron\n  -1, inside tetrahedron\n   0, on tetrahedron","declarations":[{"spell":"79:15-79:28|0|2|1","param_spellings":["79:34-79:35","79:41-79:43","79:49-79:51","79:57-79:59","79:65-79:67"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":7180948333040297920,"detailed_name":"virtual int VerticesQuery::toTetrahedron(const int &test, int v0, int v1, int v2, int v3) const","short_name_offset":27,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"80:15-80:28|0|2|1","param_spellings":["80:44-80:48","80:54-80:56","80:62-80:64","80:70-80:72","80:78-80:80"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":14957837940498939302,"detailed_name":"virtual int VerticesQuery::toCircumsphere(int i, int v0, int v1, int v2, int v3) const","short_name_offset":27,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"Returns:\n  +1, outside circumsphere of tetrahedron\n  -1, inside circumsphere of tetrahedron\n   0, on circumsphere of tetrahedron","declarations":[{"spell":"86:15-86:29|0|2|1","param_spellings":["86:35-86:36","86:42-86:44","86:50-86:52","86:58-86:60","86:66-86:68"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":1191610711392754415,"detailed_name":"virtual int VerticesQuery::toCircumsphere(const int &test, int v0, int v1, int v2, int v3) const","short_name_offset":27,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"87:15-87:29|0|2|1","param_spellings":["87:45-87:49","87:55-87:57","87:63-87:65","87:71-87:73","87:79-87:81"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":2563759504115806726,"detailed_name":"virtual int VerticesQuery::toCircumsphere(int i, int v0, int v1, int v2) const","short_name_offset":27,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"Returns:\n  +1, outside circumsphere of triangle\n  -1, inside circumsphere of triangle\n   0, on circumsphere of triangle","declarations":[{"spell":"93:15-93:29|0|2|1","param_spellings":["93:35-93:36","93:42-93:44","93:50-93:52","93:58-93:60"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":12003379421604570641,"detailed_name":"virtual int VerticesQuery::toCircumsphere(const int &test, int v0, int v1, int v2) const","short_name_offset":27,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"94:15-94:29|0|2|1","param_spellings":["94:45-94:49","94:55-94:57","94:63-94:65","94:71-94:73"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":17381503037762684928,"detailed_name":"void VerticesQuery::getInformation(double epsilon, VerticesQuery::Information &info)","short_name_offset":20,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"get dimensional information about the vertices","declarations":[{"spell":"138:8-138:22|0|2|1","param_spellings":["138:30-138:37","138:53-138:57"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":5020671261767266165,"detailed_name":"static double VerticesQuery::dot(double x0, double y0, double z0, double x1, double y1, double z1)","short_name_offset":29,"short_name_size":3,"kind":254,"storage":3,"hover":"","comments":"Helper functions.","declarations":[{"spell":"141:17-141:20|0|2|1","param_spellings":["141:29-141:31","141:40-141:42","141:51-141:53","141:62-141:64","141:73-141:75","141:84-141:86"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":281564455265257939,"detailed_name":"static double VerticesQuery::det3(double x0, double y0, double z0, double x1, double y1, double z1, double x2, double y2, double z2)","short_name_offset":29,"short_name_size":4,"kind":254,"storage":3,"hover":"","comments":"----------------------------------------------------------------------------","declarations":[{"spell":"143:17-143:21|0|2|1","param_spellings":["143:30-143:32","143:41-143:43","143:52-143:54","143:63-143:65","143:74-143:76","143:85-143:87","144:14-144:16","144:25-144:27","144:36-144:38"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":8147065966545997232,"detailed_name":"static double VerticesQuery::det4(double x0, double y0, double z0, double w0, double x1, double y1, double z1, double w1, double x2, double y2, double z2, double w2, double x3, double y3, double z3, double w3)","short_name_offset":29,"short_name_size":4,"kind":254,"storage":3,"hover":"","comments":"----------------------------------------------------------------------------","declarations":[{"spell":"146:17-146:21|0|2|1","param_spellings":["146:30-146:32","146:41-146:43","146:52-146:54","146:63-146:65","146:74-146:76","146:85-146:87","147:14-147:16","147:25-147:27","147:36-147:38","147:47-147:49","147:58-147:60","147:69-147:71","147:80-147:82","148:14-148:16","148:25-148:27","148:36-148:38"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":11329388177808009270,"detailed_name":"static bool VerticesQuery::sort(int &v0, int &v1)","short_name_offset":27,"short_name_size":4,"kind":254,"storage":3,"hover":"","comments":"Support for ordering a set of unique indices into the vertex pool.  On\noutput it is guaranteed that:  v0 < v1 < v2.  This is used to guarantee\nconsistent queries when the vertex ordering of a primitive is permuted,\na necessity when using floating-point arithmetic that suffers from\nnumerical round-off errors.  The input indices are considered the\npositive ordering.  The output indices are either positively ordered\n(an even number of transpositions occurs during sorting) or negatively\nordered (an odd number of transpositions occurs during sorting).  The\nfunctions return 'true' for a positive ordering and 'false' for a\nnegative ordering.","declarations":[{"spell":"160:15-160:19|0|2|1","param_spellings":["160:26-160:28","160:35-160:37"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":17832099284560980671,"detailed_name":"static bool VerticesQuery::sort(int &v0, int &v1, int &v2)","short_name_offset":27,"short_name_size":4,"kind":254,"storage":3,"hover":"","comments":"----------------------------------------------------------------------------","declarations":[{"spell":"161:15-161:19|0|2|1","param_spellings":["161:26-161:28","161:35-161:37","161:44-161:46"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":890525172400571457,"detailed_name":"static bool VerticesQuery::sort(int &v0, int &v1, int &v2, int &v3)","short_name_offset":27,"short_name_size":4,"kind":254,"storage":3,"hover":"","comments":"----------------------------------------------------------------------------","declarations":[{"spell":"162:15-162:19|0|2|1","param_spellings":["162:26-162:28","162:35-162:37","162:44-162:46","162:53-162:55"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":804473674604979069,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["57:42-57:48|2|3|4"],"kind":0,"storage":0},{"id":1,"usr":4952523086321104506,"detailed_name":"int VerticesQuery::Information::dimension","short_name_offset":32,"short_name_size":9,"hover":"","comments":"The intrinsic dimension of the input set. The parameter 'epsilon'\nto the VerticesQuery::getInformation function is used to provide a tolerance when\ndetermining the dimension.\nif dimension == 0, all points are effectively the same (or very close based on epsilon)\nIf dimension == 1, all points effectively lie on a line segment.\nIf dimension == 2, all points effectively line on a plane.\nIf dimension == 3, the points are not coplanar.","declarations":[],"spell":"105:9-105:18|4|2|2","extent":"105:5-105:18|4|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":2,"usr":795685199051137200,"detailed_name":"double [3] VerticesQuery::Information::min","short_name_offset":39,"short_name_size":3,"hover":"","comments":"Axis-aligned bounding box of the input set.","declarations":[],"spell":"108:12-108:15|4|2|2","extent":"108:5-108:18|4|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":3,"usr":3869192960086324641,"detailed_name":"double [3] VerticesQuery::Information::max","short_name_offset":39,"short_name_size":3,"hover":"","comments":"Axis-aligned bounding box of the input set.","declarations":[],"spell":"108:20-108:23|4|2|2","extent":"108:5-108:26|4|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":4,"usr":17088171409255009539,"detailed_name":"double VerticesQuery::Information::maxRange","short_name_offset":35,"short_name_size":8,"hover":"","comments":"mMaxRange = max(max[0]-min[0], max[1]-min[1], and max[2]-min[2].)","declarations":[],"spell":"110:12-110:20|4|2|2","extent":"110:5-110:20|4|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":5,"usr":4436213792381527426,"detailed_name":"int [4] VerticesQuery::Information::extreme","short_name_offset":36,"short_name_size":7,"hover":"","comments":"The indices that define the maximum dimensional extents.  The\nvalues mExtreme[0] and mExtreme[1] are the indices for the points\nthat define the largest extent in one of the coordinate axis\ndirections.\nIf the dimension is 2, then mExtreme[2] is the index\nfor the point that generates the largest extent in the direction\nperpendicular to the line through the points corresponding to\nmExtreme[0] and mExtreme[1].\nFurthermore, if the dimension is 3, then mExtreme[3] is the index\nfor the point that generates the largest extent in the direction\nperpendicular to the triangle defined by the other extreme points.","declarations":[],"spell":"123:9-123:16|4|2|2","extent":"123:5-123:19|4|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":6,"usr":9503646797476903502,"detailed_name":"bool VerticesQuery::Information::extremeCCW","short_name_offset":33,"short_name_size":10,"hover":"","comments":"If dimenstion == 3, the tetrahedron formed by the\npoints V[extreme0], V[extreme1], V[extreme2], V[extreme3]> is\ncounterclockwise (positive) if extremeCCW == true.\ntet is positive if its vertices satisfy:  ((v1 - v0) x (v2 - v0)) dot (v3 - v0) >= 0","declarations":[],"spell":"128:10-128:20|4|2|2","extent":"128:5-128:20|4|2|0","type":7,"uses":[],"kind":8,"storage":0},{"id":7,"usr":1549804232725351586,"detailed_name":"int VerticesQuery::Information::origin","short_name_offset":32,"short_name_size":6,"hover":"","comments":"Coordinate system.\nThe origin == vertices[exterme[0].  The\nunit-length direction vector is valid only for 0 <= i < d.","declarations":[],"spell":"133:11-133:17|4|2|2","extent":"133:5-133:17|4|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":8,"usr":3083238505440286272,"detailed_name":"int [3] VerticesQuery::Information::direction","short_name_offset":36,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"134:11-134:20|4|2|2","type":5,"uses":[],"kind":8,"storage":0},{"id":9,"usr":11484143042271812877,"detailed_name":"int VerticesQuery::vertices","short_name_offset":19,"short_name_size":8,"hover":"","comments":"Input points.","declarations":[],"spell":"166:22-166:30|0|2|2","extent":"166:22-166:30|0|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":10,"usr":8862973849287817751,"detailed_name":"VERTICESQUERY_H","short_name_offset":0,"short_name_size":15,"hover":"#define VERTICESQUERY_H","comments":"","declarations":[],"spell":"42:9-42:24|-1|1|2","extent":"42:9-42:24|-1|1|0","uses":[],"kind":255,"storage":0}]}