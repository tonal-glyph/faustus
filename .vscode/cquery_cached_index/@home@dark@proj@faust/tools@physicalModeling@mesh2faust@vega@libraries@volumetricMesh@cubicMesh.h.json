15
{"last_modification_time":1548168587,"language":2,"import_file":"/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/volumetricMesh/generateTetMeshFromCubicMesh.cpp","args":["clang++","-working-directory=/home/dark/proj/faust/","/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/volumetricMesh/generateTetMeshFromCubicMesh.cpp","-resource-dir=/usr/lib/clang/7.0.1","-Wno-unknown-warning-option","-fparse-all-comments","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/x86_64-pc-linux-gnu","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/backward","-isystem/usr/local/include","-isystem/usr/lib/clang/7.0.1/include","-isystem/usr/include"],"includes":[{"line":46,"resolved_path":"/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/volumetricMesh/volumetricMesh.h"}],"dependencies":["/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/volumetricMesh/generateTetMeshFromCubicMesh.cpp","/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/volumetricMesh/generateTetMeshFromCubicMesh.h","/home/dark/proj/faust/tools/physicalModeling/mesh2faust/vega/libraries/volumetricMesh/volumetricMesh.h","/usr/include/stdio.h","/usr/include/bits/libc-header-start.h","/usr/include/features.h","/usr/include/sys/cdefs.h","/usr/include/gnu/stubs.h","/usr/include/bits/types.h","/usr/include/bits/types/__fpos_t.h","/usr/include/bits/types/__fpos64_t.h","/usr/include/bits/types/struct_FILE.h","/usr/include/bits/types/cookie_io_functions_t.h","/usr/include/c++/8.2.1/stdlib.h","/usr/include/c++/8.2.1/cstdlib","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++config.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/os_defines.h","/usr/include/stdlib.h","/usr/include/bits/floatn.h","/usr/include/bits/floatn-common.h","/usr/include/bits/types/locale_t.h","/usr/include/sys/types.h","/usr/include/bits/types/clock_t.h","/usr/include/bits/types/clockid_t.h","/usr/include/bits/types/time_t.h","/usr/include/bits/types/timer_t.h","/usr/include/bits/stdint-intn.h","/usr/include/endian.h","/usr/include/bits/byteswap.h","/usr/include/bits/uintn-identity.h","/usr/include/sys/select.h","/usr/include/bits/select.h","/usr/include/bits/types/sigset_t.h","/usr/include/bits/types/struct_timeval.h","/usr/include/bits/types/struct_timespec.h","/usr/include/bits/pthreadtypes.h","/usr/include/bits/thread-shared-types.h","/usr/include/bits/pthreadtypes-arch.h","/usr/include/alloca.h","/usr/include/c++/8.2.1/bits/std_abs.h","/usr/include/string.h","/usr/include/strings.h","/usr/include/c++/8.2.1/vector","/usr/include/c++/8.2.1/bits/stl_algobase.h","/usr/include/c++/8.2.1/bits/functexcept.h","/usr/include/c++/8.2.1/bits/cpp_type_traits.h","/usr/include/c++/8.2.1/ext/type_traits.h","/usr/include/c++/8.2.1/ext/numeric_traits.h","/usr/include/c++/8.2.1/bits/stl_pair.h","/usr/include/c++/8.2.1/bits/move.h","/usr/include/c++/8.2.1/bits/concept_check.h","/usr/include/c++/8.2.1/type_traits","/usr/include/c++/8.2.1/bits/stl_iterator_base_types.h","/usr/include/c++/8.2.1/bits/stl_iterator_base_funcs.h","/usr/include/c++/8.2.1/bits/stl_iterator.h","/usr/include/c++/8.2.1/bits/ptr_traits.h","/usr/include/c++/8.2.1/debug/debug.h","/usr/include/c++/8.2.1/bits/allocator.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++allocator.h","/usr/include/c++/8.2.1/ext/new_allocator.h","/usr/include/c++/8.2.1/new","/usr/include/c++/8.2.1/exception","/usr/include/c++/8.2.1/bits/exception.h","/usr/include/c++/8.2.1/bits/exception_ptr.h","/usr/include/c++/8.2.1/bits/cxxabi_init_exception.h","/usr/lib/clang/7.0.1/include/stddef.h","/usr/include/c++/8.2.1/typeinfo","/usr/include/c++/8.2.1/bits/hash_bytes.h","/usr/include/c++/8.2.1/bits/nested_exception.h","/usr/include/c++/8.2.1/bits/memoryfwd.h","/usr/include/c++/8.2.1/bits/stl_construct.h","/usr/include/c++/8.2.1/ext/alloc_traits.h","/usr/include/c++/8.2.1/bits/alloc_traits.h","/usr/include/c++/8.2.1/bits/stl_uninitialized.h","/usr/include/c++/8.2.1/bits/stl_vector.h","/usr/include/c++/8.2.1/initializer_list","/usr/include/c++/8.2.1/bits/stl_bvector.h","/usr/include/c++/8.2.1/bits/functional_hash.h","/usr/include/c++/8.2.1/bits/range_access.h","/usr/include/c++/8.2.1/set","/usr/include/c++/8.2.1/bits/stl_tree.h","/usr/include/c++/8.2.1/bits/stl_function.h","/usr/include/c++/8.2.1/ext/aligned_buffer.h","/usr/include/c++/8.2.1/bits/stl_set.h","/usr/include/c++/8.2.1/bits/stl_multiset.h","/usr/include/c++/8.2.1/string","/usr/include/c++/8.2.1/bits/stringfwd.h","/usr/include/c++/8.2.1/bits/char_traits.h","/usr/include/c++/8.2.1/bits/postypes.h","/usr/include/c++/8.2.1/cwchar","/usr/include/wchar.h","/usr/include/bits/types/mbstate_t.h","/usr/include/c++/8.2.1/cstdint","/usr/lib/clang/7.0.1/include/stdint.h","/usr/include/stdint.h","/usr/include/bits/stdint-uintn.h","/usr/include/c++/8.2.1/bits/localefwd.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++locale.h","/usr/include/c++/8.2.1/clocale","/usr/include/locale.h","/usr/include/c++/8.2.1/iosfwd","/usr/include/c++/8.2.1/cctype","/usr/include/ctype.h","/usr/include/c++/8.2.1/bits/ostream_insert.h","/usr/include/c++/8.2.1/bits/basic_string.h","/usr/include/c++/8.2.1/ext/atomicity.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/gthr.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h","/usr/include/pthread.h","/usr/include/sched.h","/usr/include/bits/sched.h","/usr/include/time.h","/usr/include/bits/time.h","/usr/include/bits/timex.h","/usr/include/bits/types/struct_tm.h","/usr/include/bits/types/struct_itimerspec.h","/usr/include/bits/setjmp.h","/usr/include/c++/8.2.1/ext/string_conversions.h","/usr/include/c++/8.2.1/cstdio","/usr/include/c++/8.2.1/cerrno","/usr/include/errno.h","/usr/include/bits/errno.h","/usr/include/linux/errno.h","/usr/include/asm/errno.h","/usr/include/asm-generic/errno.h","/usr/include/c++/8.2.1/bits/basic_string.tcc","/usr/include/c++/8.2.1/map","/usr/include/c++/8.2.1/bits/stl_map.h","/usr/include/c++/8.2.1/tuple","/usr/include/c++/8.2.1/utility","/usr/include/c++/8.2.1/array","/usr/include/c++/8.2.1/stdexcept","/usr/include/c++/8.2.1/bits/uses_allocator.h","/usr/include/c++/8.2.1/bits/invoke.h","/usr/include/c++/8.2.1/bits/stl_multimap.h","/usr/lib/clang/7.0.1/include/stdarg.h","/usr/include/bits/types/__mbstate_t.h","/usr/include/bits/types/__FILE.h","/usr/include/bits/types/FILE.h","/usr/include/bits/sys_errlist.h","/usr/include/bits/types/__locale_t.h","/usr/include/bits/types/__sigset_t.h","/usr/include/c++/8.2.1/bits/predefined_ops.h","/usr/lib/clang/7.0.1/include/__stddef_max_align_t.h","/usr/include/c++/8.2.1/bits/vector.tcc","/usr/include/c++/8.2.1/backward/binders.h","/usr/include/bits/types/wint_t.h","/usr/include/c++/8.2.1/bits/cxxabi_forced.h","/usr/include/bits/types/struct_sched_param.h","/usr/include/bits/cpu-set.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/atomic_word.h","/usr/include/bits/types/error_t.h","/usr/include/c++/8.2.1/bits/stl_relops.h","/usr/include/stdc-predef.h","/usr/include/bits/wordsize.h","/usr/include/gnu/stubs-64.h","/usr/include/bits/typesizes.h","/usr/include/bits/stdio_lim.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/cpu_defines.h","/usr/include/bits/waitflags.h","/usr/include/bits/waitstatus.h","/usr/include/bits/endian.h","/usr/include/bits/stdlib-float.h","/usr/include/c++/8.2.1/bits/exception_defines.h","/usr/include/c++/8.2.1/debug/assertions.h","/usr/include/bits/wchar.h","/usr/include/bits/locale.h","/usr/include/asm-generic/errno-base.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":11966772085747986850,"detailed_name":"CubicMesh","short_name_offset":0,"short_name_size":9,"kind":5,"hover":"","comments":"see also volumetricMesh.h for a description of the routines","declarations":["56:3-56:12|-1|1|4","60:3-60:12|-1|1|4","65:3-65:12|-1|1|4","75:3-75:12|-1|1|4","87:3-87:12|-1|1|4","89:3-89:12|-1|1|4","91:12-91:21|-1|1|4","147:3-147:12|-1|1|4"],"spell":"50:7-50:16|-1|1|2","extent":"50:1-156:2|-1|1|0","bases":[1],"derived":[],"types":[],"funcs":[0,1,2,3,4,5,6,7,9,11,13,15,17,18,20,21,23,25,26,27,29,31,32,33,34,35,36,37,39,40],"vars":[2,3,5],"instances":[],"uses":["56:3-56:12|0|2|4","60:3-60:12|0|2|4","65:3-65:12|0|2|4","75:3-75:12|0|2|4","84:10-84:19|-1|1|4","87:3-87:12|0|2|4","87:19-87:28|-1|1|4","89:3-89:12|0|2|4","89:20-89:29|-1|1|4","147:3-147:12|0|2|4"]},{"id":1,"usr":13254383881040800599,"detailed_name":"VolumetricMesh","short_name_offset":0,"short_name_size":14,"kind":0,"hover":"","comments":"","declarations":["50:26-50:40|-1|1|4"],"bases":[],"derived":[0],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["50:26-50:40|-1|1|4","90:11-90:25|-1|1|4","104:10-104:24|-1|1|4","105:11-105:25|-1|1|4","146:16-146:30|-1|1|4","147:38-147:52|-1|1|4"]},{"id":2,"usr":6452970833977951007,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["56:36-56:50|-1|1|4"]},{"id":3,"usr":6523739416730091428,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["77:31-77:39|-1|1|4"]},{"id":4,"usr":11670709523018807195,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["78:26-78:29|-1|1|4"]},{"id":5,"usr":3476891218940017344,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["79:29-79:35|-1|1|4"]},{"id":6,"usr":17530214843340823407,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["100:28-100:32|-1|1|4"]},{"id":7,"usr":9338545533713239102,"detailed_name":"VolumetricMesh::elementType","short_name_offset":16,"short_name_size":11,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[1,1],"uses":["104:26-104:37|-1|1|4","105:27-105:38|-1|1|4","146:32-146:43|-1|1|4"]},{"id":8,"usr":22,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2,2,3],"uses":[]},{"id":9,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[4,5],"uses":[]},{"id":10,"usr":16508570864431269473,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":["155:16-155:40|-1|1|4"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]}],"funcs":[{"id":0,"usr":5780922307927668744,"detailed_name":"CubicMesh::CubicMesh(const char *filename, VolumetricMesh::fileFormatType fileFormat = ASCII, int verbose = 1)","short_name_offset":0,"short_name_size":9,"kind":9,"storage":1,"hover":"","comments":"loads the mesh from a file \nASCII: .veg text input formut, see documentation and the provided examples\nBINARY: .vegb binary input format","declarations":[{"spell":"56:3-56:12|0|2|1","param_spellings":["56:26-56:34","56:51-56:61","56:75-56:82"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":8340421732428354216,"detailed_name":"CubicMesh::CubicMesh(void *binaryStream, int memoryLoad = 0)","short_name_offset":0,"short_name_size":9,"kind":9,"storage":1,"hover":"","comments":"load from a stream\nif memoryLoad is 0, binaryStream is FILE* (load from a file), otherwise, it is char* (load from a memory buffer)","declarations":[{"spell":"60:3-60:12|0|2|1","param_spellings":["60:20-60:32","60:38-60:48"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":767224877615620450,"detailed_name":"CubicMesh::CubicMesh(int numVertices, double *vertices, int numElements, int *elements, double E = 1.0E+6, double nu = 0.45000000000000001, double density = 1000)","short_name_offset":0,"short_name_size":9,"kind":9,"storage":1,"hover":"","comments":"constructs a mesh from the given vertices and elements, with a single region and material\n\"vertices\" is double-precision array of length 3 x numVertices \n\"elements\" is an integer array of length 8 x numElements","declarations":[{"spell":"65:3-65:12|0|2|1","param_spellings":["65:17-65:28","65:39-65:47","66:17-66:28","66:36-66:44","67:20-67:21","67:34-67:36","67:50-67:57"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":6321073814957973663,"detailed_name":"CubicMesh::CubicMesh(int numVertices, double *vertices, int numElements, int *elements, int numMaterials, VolumetricMesh::Material **materials, int numSets, VolumetricMesh::Set **sets, int numRegions, VolumetricMesh::Region **regions)","short_name_offset":0,"short_name_size":9,"kind":9,"storage":1,"hover":"","comments":"constructs a mesh from the given vertices and elements, \nwith an arbitrary number of sets, regions and materials\n\"vertices\" is double-precision array of length 3 x numVertices \n\"elements\" is an integer array of length 8 x numElements\n\"materials\", \"sets\" and \"regions\" will be copied internally (deep copy), so they\ncan be released after calling this constructor","declarations":[{"spell":"75:3-75:12|0|2|1","param_spellings":["75:17-75:28","75:39-75:47","76:17-76:28","76:36-76:44","77:17-77:29","77:43-77:52","78:17-78:24","78:33-78:37","79:17-79:27","79:39-79:46"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":3540637285970289301,"detailed_name":"static CubicMesh *CubicMesh::createFromUniformGrid(int resolution, int numVoxels, int *voxels, double E = 1.0E+6, double nu = 0.45000000000000001, double density = 1000)","short_name_offset":29,"short_name_size":21,"kind":254,"storage":3,"hover":"","comments":"constructs a voxel mesh with the given voxels, as a subset of a regular 3D grid\n'voxels' gives the grid indices (3 per voxel) of the voxels that are to be included in the mesh\n'voxels' has length 3 x numVoxels","declarations":[{"spell":"84:22-84:43|0|2|1","param_spellings":["84:48-84:58","84:64-84:73","84:81-84:87","84:96-84:97","84:110-84:112","84:126-84:133"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":4338323986248430732,"detailed_name":"CubicMesh::CubicMesh(const CubicMesh &mesh, int numElements, int *elements, int *vertexMap = __null)","short_name_offset":0,"short_name_size":9,"kind":9,"storage":1,"hover":"","comments":"creates a mesh consisting of the specified element subset of the given CubicMesh","declarations":[{"spell":"87:3-87:12|0|2|1","param_spellings":["87:31-87:35","87:41-87:52","87:60-87:68","87:90-87:99"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":11145048897817013269,"detailed_name":"CubicMesh::CubicMesh(const CubicMesh &CubicMesh)","short_name_offset":0,"short_name_size":9,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"89:3-89:12|0|2|1","param_spellings":["89:32-89:41"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":12630454780505812567,"detailed_name":"virtual VolumetricMesh *CubicMesh::clone()","short_name_offset":35,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"90:28-90:33|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[8],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":5789708012432074957,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[7],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":7329500504346375950,"detailed_name":"virtual CubicMesh::~CubicMesh() noexcept","short_name_offset":19,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"91:11-91:21|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[10],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":977862231372417989,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[9],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":14296729799822028839,"detailed_name":"virtual int CubicMesh::saveToAscii(const char *filename) const","short_name_offset":23,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"saves the mesh to a text file (.veg format, see examples and documentation)","declarations":[{"spell":"94:15-94:26|0|2|1","param_spellings":["94:40-94:48"]}],"declaring_type":0,"bases":[12],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":3802407123097088353,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[11],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":11795131576537552646,"detailed_name":"virtual int CubicMesh::saveToBinary(const char *filename, unsigned int *bytesWritten = __null) const","short_name_offset":23,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"saves the mesh to binary format\nreturns: 0 = success, non-zero = error\noutput: if bytesWritten is non-NULL, it will contain the number of bytes written","declarations":[{"spell":"99:15-99:27|0|2|1","param_spellings":["99:41-99:49","99:66-99:78"]}],"declaring_type":0,"bases":[14],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":4779524934507786368,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[13],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":14603202718262397107,"detailed_name":"virtual int CubicMesh::saveToBinary(FILE *binaryOutputStream, unsigned int *bytesWritten = __null, bool countBytesOnly = false) const","short_name_offset":23,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"100:15-100:27|0|2|1","param_spellings":["100:35-100:53","100:70-100:82","100:96-100:110"]}],"declaring_type":0,"bases":[16],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":13478017806923436553,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[15],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":15975360318088056744,"detailed_name":"static VolumetricMesh::elementType CubicMesh::elementType()","short_name_offset":23,"short_name_size":11,"kind":254,"storage":3,"hover":"","comments":"=== misc queries ===","declarations":[],"spell":"104:38-104:49|0|2|2","extent":"104:3-104:76|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":["105:71-105:82|18|3|36"],"callees":[]},{"id":18,"usr":17383502042274564743,"detailed_name":"virtual VolumetricMesh::elementType CubicMesh::getElementType() const","short_name_offset":47,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"105:39-105:53|0|2|2","extent":"105:3-105:87|0|2|0","declaring_type":0,"bases":[19],"derived":[],"vars":[],"uses":[],"callees":["105:71-105:82|17|3|36"]},{"id":19,"usr":3808529572280549777,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[18],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":14508135186647951079,"detailed_name":"inline double CubicMesh::getCubeSize() const","short_name_offset":25,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"107:17-107:28|0|2|2","extent":"107:3-107:57|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":12495079761526974296,"detailed_name":"virtual double CubicMesh::getElementVolume(int el) const","short_name_offset":26,"short_name_size":16,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"109:18-109:34|0|2|1","param_spellings":["109:39-109:41"]}],"declaring_type":0,"bases":[22],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":7449606707413777339,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[21],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":17419712057959004491,"detailed_name":"virtual void CubicMesh::computeElementMassMatrix(int el, double *massMatrix) const","short_name_offset":24,"short_name_size":24,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"110:16-110:40|0|2|1","param_spellings":["110:45-110:47","110:58-110:68"]}],"declaring_type":0,"bases":[24],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":9890119378399949434,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[23],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":6586332731212687855,"detailed_name":"virtual void CubicMesh::getElementInertiaTensor(int el, int &inertiaTensor) const","short_name_offset":24,"short_name_size":23,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"111:16-111:39|0|2|1","param_spellings":["111:44-111:46","111:56-111:69"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":26,"usr":8255217794145730793,"detailed_name":"virtual bool CubicMesh::containsVertex(int element, int pos) const","short_name_offset":24,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"113:16-113:30|0|2|1","param_spellings":["113:35-113:42","113:50-113:53"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":27,"usr":9092182428692831401,"detailed_name":"virtual int CubicMesh::getNumElementEdges() const","short_name_offset":23,"short_name_size":18,"kind":6,"storage":1,"hover":"","comments":"edge queries","declarations":[{"spell":"116:15-116:33|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[28],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":28,"usr":7125507881319006858,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[27],"vars":[],"uses":[],"callees":[]},{"id":29,"usr":5973329824299764189,"detailed_name":"virtual void CubicMesh::getElementEdges(int el, int *edgeBuffer) const","short_name_offset":24,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"117:16-117:31|0|2|1","param_spellings":["117:36-117:38","117:46-117:56"]}],"declaring_type":0,"bases":[30],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":30,"usr":13260311294822452649,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[29],"vars":[],"uses":[],"callees":[]},{"id":31,"usr":17617280872204453697,"detailed_name":"void CubicMesh::subdivide()","short_name_offset":16,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"subdivides the cube mesh","declarations":[{"spell":"120:8-120:17|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":32,"usr":1994491105604084698,"detailed_name":"virtual void CubicMesh::computeBarycentricWeights(int el, const int &pos, double *weights) const","short_name_offset":24,"short_name_size":25,"kind":6,"storage":1,"hover":"","comments":"=== interpolation ===","declarations":[{"spell":"124:16-124:41|0|2|1","param_spellings":["124:46-124:48","124:64-124:67","124:78-124:85"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":33,"usr":13263609214218897070,"detailed_name":"int CubicMesh::interpolateData(double *volumetricMeshVertexData, int numLocations, int r, double *interpolationLocations, double *destMatrix, double zeroThreshold = -1.) const","short_name_offset":15,"short_name_size":15,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"126:7-126:22|0|2|1","param_spellings":["126:32-126:56","126:62-126:74","126:80-126:81","126:92-126:114","126:125-126:135","126:144-126:157"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":34,"usr":214637509531728024,"detailed_name":"int CubicMesh::normalCorrection(double *vertexData, int numLocations, int r, double *interpolationLocations, double *staticNormals, double *normalCorrection, double zeroThreshold = -1.) const","short_name_offset":15,"short_name_size":16,"kind":6,"storage":1,"hover":"","comments":"computes approximation to the normal correction for the given deformations\nvertexData size must a matrix of size 3 * nElements x r\ndestMatrix must be a vector of length 3 * numLocations x r\nstaticNormals must be a vector of length 3 * numLocations\nreturns the number of vertices that were not contained inside any element\nvertices more than distanceThreshold away from any element vertex are assigned zero data","declarations":[{"spell":"134:7-134:23|0|2|1","param_spellings":["134:33-134:43","134:49-134:61","134:67-134:68","134:79-134:101","134:112-134:125","134:136-134:152","134:161-134:174"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":35,"usr":10520965961878045110,"detailed_name":"virtual void CubicMesh::interpolateGradient(int element, const double *U, int numFields, int pos, double *grad) const","short_name_offset":24,"short_name_size":19,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"136:16-136:35|0|2|1","param_spellings":["136:40-136:47","136:64-136:65","136:71-136:80","136:88-136:91","136:102-136:106"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":36,"usr":6121058365659921536,"detailed_name":"void CubicMesh::setParallelepipedMode(int parallelepipedMode)","short_name_offset":16,"short_name_size":21,"kind":6,"storage":1,"hover":"","comments":"advanced, to ensure computeBarycentricWeights, containsVertex, generateInterpolationWeights, generateContainingElements work even when elements are cubes, transformed via a general linear transformation\nparallelepiped=1 : the elements are cubes transformed via a linear transformation (i.e., they are parallelepipeds)\nparallelepiped=0 : (default) the elements are axis-aligned cubes","declarations":[{"spell":"141:8-141:29|0|2|1","param_spellings":["141:34-141:52"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":37,"usr":6115582132656874038,"detailed_name":"CubicMesh::CubicMesh(int numElementVertices)","short_name_offset":0,"short_name_size":9,"kind":9,"storage":1,"hover":"","comments":"","declarations":[],"spell":"147:3-147:12|0|2|2","extent":"147:3-147:75|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[4],"uses":[],"callees":["147:38-147:72|38|3|292"]},{"id":38,"usr":8821835650383318366,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["147:38-147:72|37|3|292"],"callees":[]},{"id":39,"usr":7779326073341259477,"detailed_name":"void CubicMesh::SetInverseCubeSize()","short_name_offset":16,"short_name_size":18,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"148:8-148:26|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":40,"usr":14991613588272002087,"detailed_name":"void CubicMesh::computeAlphaBetaGamma(int el, int pos, double *alpha, double *beta, double *gamma) const","short_name_offset":16,"short_name_size":21,"kind":6,"storage":1,"hover":"","comments":"computes the normalized location of \"pos\" inside el\nwhen inside the element, one has 0 <= alpha <= 1, 0 <= beta <= 1, 0 <= gamma <= 1","declarations":[{"spell":"153:8-153:29|0|2|1","param_spellings":["153:34-153:36","153:44-153:47","153:58-153:63","153:74-153:78","153:89-153:94"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":15639331645577008064,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["56:64-56:69|0|2|4"],"kind":0,"storage":0},{"id":1,"usr":10154908053498038939,"detailed_name":"const VolumetricMesh::elementType CubicMesh::elementType_","short_name_offset":45,"short_name_size":12,"hover":"","comments":"","declarations":["146:44-146:56|0|2|1"],"spell":"146:44-146:56|17|3|2","extent":"146:3-146:56|17|3|0","type":7,"uses":["104:61-104:73|17|3|12"],"kind":8,"storage":3},{"id":2,"usr":7932704296732014212,"detailed_name":"double CubicMesh::cubeSize","short_name_offset":18,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"144:10-144:18|0|2|2","extent":"144:3-144:18|0|2|0","type":8,"uses":["107:46-107:54|20|3|12"],"kind":8,"storage":0},{"id":3,"usr":15470027066531551518,"detailed_name":"double CubicMesh::invCubeSize","short_name_offset":18,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"145:10-145:21|0|2|2","extent":"145:3-145:21|0|2|0","type":8,"uses":[],"kind":8,"storage":0},{"id":4,"usr":8670427817570993353,"detailed_name":"int numElementVertices","short_name_offset":4,"short_name_size":18,"hover":"","comments":"","declarations":[],"spell":"147:17-147:35|37|3|2","extent":"147:13-147:35|37|3|0","type":9,"uses":["147:53-147:71|37|3|12"],"kind":253,"storage":1},{"id":5,"usr":13156014770437063093,"detailed_name":"int CubicMesh::parallelepipedMode","short_name_offset":15,"short_name_size":18,"hover":"","comments":"normally this is 0; in advanced usage, it can be 1 (see above)","declarations":[],"spell":"149:7-149:25|0|2|2","extent":"149:3-149:25|0|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":6,"usr":14759019979972376798,"detailed_name":"_CUBICMESH_H_","short_name_offset":0,"short_name_size":13,"hover":"#define _CUBICMESH_H_","comments":"","declarations":[],"spell":"45:9-45:22|-1|1|2","extent":"45:9-45:22|-1|1|0","uses":[],"kind":255,"storage":0},{"id":7,"usr":291038054068649371,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["87:102-87:106|-1|1|4","99:81-99:85|-1|1|4","100:85-100:89|-1|1|4"],"kind":0,"storage":0}]}