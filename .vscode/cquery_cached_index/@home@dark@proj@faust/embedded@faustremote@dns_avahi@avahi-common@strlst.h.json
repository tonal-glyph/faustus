15
{"last_modification_time":1548168587,"language":1,"import_file":"/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/strlst.c","args":["clang","-working-directory=/home/dark/proj/faust/","/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/strlst.c","-resource-dir=/usr/lib/clang/7.0.1","-Wno-unknown-warning-option","-fparse-all-comments","-isystem/usr/local/include","-isystem/usr/lib/clang/7.0.1/include","-isystem/usr/include"],"includes":[{"line":24,"resolved_path":"/usr/include/sys/types.h"},{"line":25,"resolved_path":"/usr/lib/clang/7.0.1/include/inttypes.h"},{"line":26,"resolved_path":"/usr/lib/clang/7.0.1/include/stdarg.h"},{"line":28,"resolved_path":"/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/cdecl.h"},{"line":29,"resolved_path":"/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/gccmacro.h"}],"dependencies":["/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/strlst.c","/usr/include/string.h","/usr/include/bits/libc-header-start.h","/usr/include/features.h","/usr/include/sys/cdefs.h","/usr/include/gnu/stubs.h","/usr/include/bits/types/locale_t.h","/usr/include/strings.h","/usr/include/assert.h","/usr/include/stdio.h","/usr/include/bits/types.h","/usr/include/bits/types/__fpos_t.h","/usr/include/bits/types/__fpos64_t.h","/usr/include/bits/types/struct_FILE.h","/usr/include/stdlib.h","/usr/include/bits/floatn.h","/usr/include/bits/floatn-common.h","/usr/include/sys/types.h","/usr/include/bits/types/clock_t.h","/usr/include/bits/types/clockid_t.h","/usr/include/bits/types/time_t.h","/usr/include/bits/types/timer_t.h","/usr/include/bits/stdint-intn.h","/usr/include/endian.h","/usr/include/bits/byteswap.h","/usr/include/bits/uintn-identity.h","/usr/include/sys/select.h","/usr/include/bits/select.h","/usr/include/bits/types/sigset_t.h","/usr/include/bits/types/struct_timeval.h","/usr/include/bits/types/struct_timespec.h","/usr/include/bits/pthreadtypes.h","/usr/include/bits/thread-shared-types.h","/usr/include/bits/pthreadtypes-arch.h","/usr/include/alloca.h","/usr/lib/clang/7.0.1/include/inttypes.h","/usr/include/inttypes.h","/usr/lib/clang/7.0.1/include/stdint.h","/usr/include/stdint.h","/usr/include/bits/stdint-uintn.h","/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/gccmacro.h","/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/malloc.h","/usr/lib/clang/7.0.1/include/limits.h","/usr/include/limits.h","/usr/include/bits/posix1_lim.h","/usr/include/bits/local_lim.h","/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/defs.h","/usr/lib/clang/7.0.1/include/stddef.h","/usr/include/bits/types/__locale_t.h","/usr/lib/clang/7.0.1/include/stdarg.h","/usr/include/bits/types/__mbstate_t.h","/usr/include/bits/types/__FILE.h","/usr/include/bits/types/FILE.h","/usr/include/bits/sys_errlist.h","/usr/include/bits/types/__sigset_t.h","/usr/include/stdc-predef.h","/usr/include/bits/wordsize.h","/usr/include/gnu/stubs-64.h","/usr/include/bits/typesizes.h","/usr/include/bits/stdio_lim.h","/usr/include/bits/waitflags.h","/usr/include/bits/waitstatus.h","/usr/include/bits/endian.h","/usr/include/bits/stdlib-float.h","/usr/include/bits/wchar.h","/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/cdecl.h","/usr/include/linux/limits.h","/usr/include/bits/posix2_lim.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":8136012846094303451,"detailed_name":"AvahiStringList","short_name_offset":0,"short_name_size":15,"kind":23,"hover":"","comments":"Linked list of strings that can contain any number of binary\ncharacters, including NUL bytes. An empty list is created by\nassigning a NULL to a pointer to AvahiStringList. The string list\nis stored in reverse order, so that appending to the string list is\neffectively a prepending to the linked list.  This object is used\nprimarily for storing DNS TXT record data.","declarations":[],"spell":"40:16-40:31|-1|1|2","extent":"40:9-44:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[0,1,2],"instances":[0],"uses":["41:12-41:27|-1|1|4"]},{"id":1,"usr":12929961224203091547,"detailed_name":"AvahiStringList","short_name_offset":0,"short_name_size":15,"kind":252,"hover":"","comments":"","declarations":[],"spell":"44:3-44:18|-1|1|2","extent":"40:1-44:18|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["44:3-44:18|-1|1|4","51:1-51:16|-1|1|4","55:1-55:16|-1|1|4","61:1-61:16|-1|1|4","64:29-64:44|-1|1|4","73:1-73:16|-1|1|4","73:40-73:55|-1|1|4","76:1-76:16|-1|1|4","76:47-76:62|-1|1|4","80:1-80:16|-1|1|4","80:48-80:63|-1|1|4","85:1-85:16|-1|1|4","85:50-85:65|-1|1|4","92:1-92:16|-1|1|4","92:49-92:64|-1|1|4","97:1-97:16|-1|1|4","97:45-97:60|-1|1|4","102:1-102:16|-1|1|4","102:48-102:63|-1|1|4","112:35-112:50|-1|1|4","117:36-117:51|-1|1|4","120:60-120:75|-1|1|4","124:35-124:50|-1|1|4","124:61-124:76|-1|1|4","127:1-127:16|-1|1|4","127:47-127:62|-1|1|4","130:1-130:16|-1|1|4","130:44-130:59|-1|1|4","133:41-133:56|-1|1|4","140:1-140:16|-1|1|4","140:45-140:60|-1|1|4","143:37-143:52|-1|1|4","146:35-146:50|-1|1|4","153:1-153:16|-1|1|4","153:41-153:56|-1|1|4","160:32-160:47|-1|1|4","164:1-164:16|-1|1|4","164:45-164:60|-1|1|4","167:1-167:16|-1|1|4","167:55-167:70|-1|1|4","174:47-174:62|-1|1|4"]},{"id":2,"usr":5778908825573379114,"detailed_name":"size_t","short_name_offset":0,"short_name_size":6,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[1],"uses":["42:5-42:11|-1|1|4","85:91-85:97|-1|1|4","92:69-92:75|-1|1|4","117:1-117:7|-1|1|4","117:69-117:75|-1|1|4","120:47-120:53|-1|1|4","146:1-146:7|-1|1|4","160:78-160:84|-1|1|4","167:114-167:120|-1|1|4"]},{"id":3,"usr":12339929197612516034,"detailed_name":"uint8_t","short_name_offset":0,"short_name_size":7,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2],"uses":["43:5-43:12|-1|1|4","85:76-85:83|-1|1|4","143:1-143:8|-1|1|4","167:98-167:105|-1|1|4"]},{"id":4,"usr":6839408168893055231,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["55:43-55:50|-1|1|4","80:88-80:95|-1|1|4","102:68-102:75|-1|1|4"]},{"id":5,"usr":16199156163178427820,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["174:1-174:9|-1|1|4"]}],"funcs":[{"id":0,"usr":12433554031598833424,"detailed_name":"AvahiStringList *avahi_string_list_new(const char *txt, ...) __attribute__((sentinel(0, 0)))","short_name_offset":17,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"Create a new string list by taking a variable list of NUL\nterminated strings. The strings are copied using g_strdup(). The\nargument list must be terminated by a NULL pointer.","declarations":[{"spell":"51:18-51:39|-1|1|1","param_spellings":["51:52-51:55"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":6584895329382705071,"detailed_name":"AvahiStringList *avahi_string_list_new_va(va_list va)","short_name_offset":17,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"\\cond fulldocs */\nSame as avahi_string_list_new() but pass a va_list structure","declarations":[{"spell":"55:18-55:42|-1|1|1","param_spellings":["55:51-55:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":12945992296738025438,"detailed_name":"AvahiStringList *avahi_string_list_new_from_array(const char **array, int length)","short_name_offset":17,"short_name_size":32,"kind":12,"storage":1,"hover":"","comments":"Create a new string list from a string array. The strings are\ncopied using g_strdup(). length should contain the length of the\narray, or -1 if the array is NULL terminated","declarations":[{"spell":"61:18-61:50|-1|1|1","param_spellings":["61:64-61:69","61:75-61:81"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":6286532997679112437,"detailed_name":"void avahi_string_list_free(AvahiStringList *l)","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"Free a string list","declarations":[{"spell":"64:6-64:28|-1|1|1","param_spellings":["64:46-64:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":591708987595754658,"detailed_name":"AvahiStringList *avahi_string_list_add(AvahiStringList *l, const char *text)","short_name_offset":17,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"Append a NUL terminated string to the specified string list. The\npassed string is copied using g_strdup(). Returns the new list\nstart.","declarations":[{"spell":"73:18-73:39|-1|1|1","param_spellings":["73:57-73:58","73:72-73:76"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":8452214308293706564,"detailed_name":"AvahiStringList *avahi_string_list_add_printf(AvahiStringList *l, const char *format, ...) __attribute__((format(printf, 2, 3)))","short_name_offset":17,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"Append a new NUL terminated formatted string to the specified string list","declarations":[{"spell":"76:18-76:46|-1|1|1","param_spellings":["76:64-76:65","76:79-76:85"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":5542544970611129286,"detailed_name":"AvahiStringList *avahi_string_list_add_vprintf(AvahiStringList *l, const char *format, va_list va)","short_name_offset":17,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"\\cond fulldocs */\nAppend a new NUL terminated formatted string to the specified string list","declarations":[{"spell":"80:18-80:47|-1|1|1","param_spellings":["80:65-80:66","80:80-80:86","80:96-80:98"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":5172785068238438657,"detailed_name":"AvahiStringList *avahi_string_list_add_arbitrary(AvahiStringList *l, const uint8_t *text, size_t size)","short_name_offset":17,"short_name_size":31,"kind":12,"storage":1,"hover":"","comments":"Append an arbitrary length byte string to the list. Returns the\nnew list start.","declarations":[{"spell":"85:18-85:49|-1|1|1","param_spellings":["85:67-85:68","85:85-85:89","85:98-85:102"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":7198191789258005136,"detailed_name":"AvahiStringList *avahi_string_list_add_anonymous(AvahiStringList *l, size_t size)","short_name_offset":17,"short_name_size":31,"kind":12,"storage":1,"hover":"","comments":"Append a new entry to the string list. The string is not filled\nwith data. The caller should fill in string data afterwards by writing\nit to l->text, where l is the pointer returned by this function. This\nfunction exists solely to optimize a few operations where otherwise\nsuperfluous string copying would be necessary.","declarations":[{"spell":"92:17-92:48|-1|1|1","param_spellings":["92:66-92:67","92:76-92:80"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":531067189113905431,"detailed_name":"AvahiStringList *avahi_string_list_add_many(AvahiStringList *r, ...) __attribute__((sentinel(0, 0)))","short_name_offset":17,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"Same as avahi_string_list_add(), but takes a variable number of\nNUL terminated strings. The argument list must be terminated by a\nNULL pointer. Returns the new list start.","declarations":[{"spell":"97:18-97:44|-1|1|1","param_spellings":["97:62-97:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":1352868914102899529,"detailed_name":"AvahiStringList *avahi_string_list_add_many_va(AvahiStringList *r, va_list va)","short_name_offset":17,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"\\cond fulldocs */\nSame as avahi_string_list_add_many(), but use a va_list\nstructure. Returns the new list start.","declarations":[{"spell":"102:18-102:47|-1|1|1","param_spellings":["102:65-102:66","102:76-102:78"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":11935737482087453182,"detailed_name":"char *avahi_string_list_to_string(AvahiStringList *l)","short_name_offset":6,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"Convert the string list object to a single character string,\nseperated by spaces and enclosed in \"\". avahi_free() the result! This\nfunction doesn't work well with strings that contain NUL bytes.","declarations":[{"spell":"112:7-112:34|-1|1|1","param_spellings":["112:52-112:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":17563669153404607703,"detailed_name":"size_t avahi_string_list_serialize(AvahiStringList *l, void *data, size_t size)","short_name_offset":7,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"\\cond fulldocs */\nSerialize the string list object in a way that is compatible with\nthe storing of DNS TXT records. Strings longer than 255 bytes are truncated.","declarations":[{"spell":"117:8-117:35|-1|1|1","param_spellings":["117:53-117:54","117:63-117:67","117:76-117:80"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":7744924454545617686,"detailed_name":"int avahi_string_list_parse(const void *data, size_t size, AvahiStringList **ret)","short_name_offset":4,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"Inverse of avahi_string_list_serialize()","declarations":[{"spell":"120:5-120:28|-1|1|1","param_spellings":["120:41-120:45","120:54-120:58","120:78-120:81"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":17821544575374976624,"detailed_name":"int avahi_string_list_equal(const AvahiStringList *a, const AvahiStringList *b)","short_name_offset":4,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"Compare to string lists","declarations":[{"spell":"124:5-124:28|-1|1|1","param_spellings":["124:52-124:53","124:78-124:79"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":11006429612545058915,"detailed_name":"AvahiStringList *avahi_string_list_copy(const AvahiStringList *l)","short_name_offset":17,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"Copy a string list","declarations":[{"spell":"127:18-127:40|-1|1|1","param_spellings":["127:64-127:65"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":2265286968041102744,"detailed_name":"AvahiStringList *avahi_string_list_reverse(AvahiStringList *l)","short_name_offset":17,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"Reverse the string list.","declarations":[{"spell":"130:18-130:43|-1|1|1","param_spellings":["130:61-130:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":11643907552325998736,"detailed_name":"unsigned int avahi_string_list_length(const AvahiStringList *l)","short_name_offset":13,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"Return the number of elements in the string list","declarations":[{"spell":"133:10-133:34|-1|1|1","param_spellings":["133:58-133:59"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":16472000007888473583,"detailed_name":"AvahiStringList *avahi_string_list_get_next(AvahiStringList *l)","short_name_offset":17,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"Returns the next item in the string list","declarations":[{"spell":"140:18-140:44|-1|1|1","param_spellings":["140:62-140:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":3310879849478183548,"detailed_name":"uint8_t *avahi_string_list_get_text(AvahiStringList *l)","short_name_offset":9,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"Returns the text for the current item","declarations":[{"spell":"143:10-143:36|-1|1|1","param_spellings":["143:54-143:55"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":17415751927465592921,"detailed_name":"size_t avahi_string_list_get_size(AvahiStringList *l)","short_name_offset":7,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"Returns the size of the current text","declarations":[{"spell":"146:8-146:34|-1|1|1","param_spellings":["146:52-146:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":17775468811321143663,"detailed_name":"AvahiStringList *avahi_string_list_find(AvahiStringList *l, const char *key)","short_name_offset":17,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"Find the string list entry for the given DNS-SD TXT key","declarations":[{"spell":"153:18-153:40|-1|1|1","param_spellings":["153:58-153:59","153:73-153:76"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":5034605272846688229,"detailed_name":"int avahi_string_list_get_pair(AvahiStringList *l, char **key, char **value, size_t *size)","short_name_offset":4,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"Return the DNS-SD TXT key and value for the specified string list\nitem. If size is not NULL it will be filled with the length of\nvalue. (for strings containing NUL bytes). If the entry doesn't\ncontain a value *value will be set to NULL. You need to\navahi_free() the strings returned in *key and *value.","declarations":[{"spell":"160:5-160:31|-1|1|1","param_spellings":["160:49-160:50","160:59-160:62","160:71-160:76","160:86-160:90"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":9225033312218677896,"detailed_name":"AvahiStringList *avahi_string_list_add_pair(AvahiStringList *l, const char *key, const char *value)","short_name_offset":17,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"Add a new DNS-SD TXT key value pair to the string list. value may\nbe NULL in case you want to specify a key without a value","declarations":[{"spell":"164:18-164:44|-1|1|1","param_spellings":["164:62-164:63","164:77-164:80","164:94-164:99"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":14761919190176220715,"detailed_name":"AvahiStringList *avahi_string_list_add_pair_arbitrary(AvahiStringList *l, const char *key, const uint8_t *value, size_t size)","short_name_offset":17,"short_name_size":36,"kind":12,"storage":1,"hover":"","comments":"Same as avahi_string_list_add_pair() but allow strings containing NUL bytes in *value.","declarations":[{"spell":"167:18-167:54|-1|1|1","param_spellings":["167:72-167:73","167:87-167:90","167:107-167:112","167:121-167:125"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":1644826651321350760,"detailed_name":"uint32_t avahi_string_list_get_service_cookie(AvahiStringList *l)","short_name_offset":9,"short_name_size":36,"kind":12,"storage":1,"hover":"","comments":"\\cond fulldocs */\nTry to find a magic service cookie in the specified DNS-SD string\nlist. Or return AVAHI_SERVICE_COOKIE_INVALID if none is found.","declarations":[{"spell":"174:10-174:46|-1|1|1","param_spellings":["174:64-174:65"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":223237734655251237,"detailed_name":"struct AvahiStringList *AvahiStringList::next","short_name_offset":41,"short_name_size":4,"hover":"","comments":"Pointer to the next linked list element","declarations":[],"spell":"41:29-41:33|0|2|2","extent":"41:5-41:33|0|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":1,"usr":4679377017598910951,"detailed_name":"size_t AvahiStringList::size","short_name_offset":24,"short_name_size":4,"hover":"","comments":"Size of text[]","declarations":[],"spell":"42:12-42:16|0|2|2","extent":"42:5-42:16|0|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":2,"usr":6359895701117550270,"detailed_name":"uint8_t [1] AvahiStringList::text","short_name_offset":29,"short_name_size":4,"hover":"","comments":"Character data","declarations":[],"spell":"43:13-43:17|0|2|2","extent":"43:5-43:20|0|2|0","type":3,"uses":[],"kind":8,"storage":0},{"id":3,"usr":1739023972329331149,"detailed_name":"footxtlisthfoo","short_name_offset":0,"short_name_size":14,"hover":"#define footxtlisthfoo","comments":"","declarations":[],"spell":"2:9-2:23|-1|1|2","extent":"2:9-2:23|-1|1|0","uses":[],"kind":255,"storage":0},{"id":4,"usr":13934000849307764093,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["32:1-32:19|-1|1|4"],"kind":0,"storage":0},{"id":5,"usr":5378783820426252469,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["51:62-51:80|-1|1|4","97:70-97:88|-1|1|4"],"kind":0,"storage":0},{"id":6,"usr":14486972146509524945,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["76:92-76:115|-1|1|4"],"kind":0,"storage":0},{"id":7,"usr":5853952557760378306,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["177:1-177:17|-1|1|4"],"kind":0,"storage":0}]}