15
{"last_modification_time":1548168587,"language":1,"import_file":"/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/simple-watch.c","args":["clang","-working-directory=/home/dark/proj/faust/","/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/simple-watch.c","-resource-dir=/usr/lib/clang/7.0.1","-Wno-unknown-warning-option","-fparse-all-comments","-isystem/usr/local/include","-isystem/usr/lib/clang/7.0.1/include","-isystem/usr/include"],"includes":[{"line":24,"resolved_path":"/usr/include/sys/poll.h"},{"line":25,"resolved_path":"/usr/include/sys/time.h"},{"line":27,"resolved_path":"/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/cdecl.h"}],"dependencies":["/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/simple-watch.c","/usr/include/sys/poll.h","/usr/include/features.h","/usr/include/sys/cdefs.h","/usr/include/gnu/stubs.h","/usr/include/assert.h","/usr/include/string.h","/usr/include/bits/libc-header-start.h","/usr/include/bits/types/locale_t.h","/usr/include/strings.h","/usr/include/errno.h","/usr/include/bits/errno.h","/usr/include/linux/errno.h","/usr/include/asm/errno.h","/usr/include/asm-generic/errno.h","/usr/include/unistd.h","/usr/include/bits/environments.h","/usr/include/bits/types.h","/usr/include/bits/getopt_posix.h","/usr/include/fcntl.h","/usr/include/bits/fcntl.h","/usr/include/bits/types/struct_timespec.h","/usr/include/stdio.h","/usr/include/bits/types/__fpos_t.h","/usr/include/bits/types/__fpos64_t.h","/usr/include/bits/types/struct_FILE.h","/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/llist.h","/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/malloc.h","/usr/include/sys/types.h","/usr/include/bits/types/clock_t.h","/usr/include/bits/types/clockid_t.h","/usr/include/bits/types/time_t.h","/usr/include/bits/types/timer_t.h","/usr/include/bits/stdint-intn.h","/usr/include/endian.h","/usr/include/bits/byteswap.h","/usr/include/bits/uintn-identity.h","/usr/include/sys/select.h","/usr/include/bits/select.h","/usr/include/bits/types/sigset_t.h","/usr/include/bits/types/struct_timeval.h","/usr/include/bits/pthreadtypes.h","/usr/include/bits/thread-shared-types.h","/usr/include/bits/pthreadtypes-arch.h","/usr/lib/clang/7.0.1/include/limits.h","/usr/include/limits.h","/usr/include/bits/posix1_lim.h","/usr/include/bits/local_lim.h","/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/gccmacro.h","/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/timeval.h","/usr/lib/clang/7.0.1/include/inttypes.h","/usr/include/inttypes.h","/usr/lib/clang/7.0.1/include/stdint.h","/usr/include/stdint.h","/usr/include/bits/stdint-uintn.h","/usr/include/sys/time.h","/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/simple-watch.h","/usr/lib/clang/7.0.1/include/stddef.h","/usr/include/bits/types/__locale_t.h","/usr/include/bits/confname.h","/usr/include/bits/getopt_core.h","/usr/include/bits/stat.h","/usr/lib/clang/7.0.1/include/stdarg.h","/usr/include/bits/types/__mbstate_t.h","/usr/include/bits/types/__FILE.h","/usr/include/bits/types/FILE.h","/usr/include/bits/sys_errlist.h","/usr/include/bits/types/__sigset_t.h","/usr/include/stdc-predef.h","/usr/include/bits/wordsize.h","/usr/include/gnu/stubs-64.h","/usr/include/bits/poll.h","/usr/include/asm-generic/errno-base.h","/usr/include/bits/posix_opt.h","/usr/include/bits/typesizes.h","/usr/include/bits/fcntl-linux.h","/usr/include/bits/stdio_lim.h","/home/dark/proj/faust/embedded/faustremote/dns_avahi/avahi-common/cdecl.h","/usr/include/bits/endian.h","/usr/include/linux/limits.h","/usr/include/bits/posix2_lim.h","/usr/include/bits/wchar.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":4235633049850181211,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["33:16-33:26|-1|1|4"]},{"id":1,"usr":6543587030919763136,"detailed_name":"AvahiWatch","short_name_offset":0,"short_name_size":10,"kind":252,"hover":"typedef struct AvahiWatch AvahiWatch","comments":"An I/O watch object","declarations":[],"spell":"33:27-33:37|-1|1|2","extent":"33:1-33:37|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["33:27-33:37|-1|1|4","50:36-50:46|-1|1|4","68:5-68:15|-1|1|4","71:26-71:36|-1|1|4","74:41-74:51|-1|1|4","77:24-77:34|-1|1|4"]},{"id":2,"usr":15530799885508943337,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["36:16-36:28|-1|1|4"]},{"id":3,"usr":566313301478878166,"detailed_name":"AvahiTimeout","short_name_offset":0,"short_name_size":12,"kind":252,"hover":"typedef struct AvahiTimeout AvahiTimeout","comments":"A timeout watch object","declarations":[],"spell":"36:29-36:41|-1|1|2","extent":"36:1-36:41|-1|1|0","alias_of":2,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["36:29-36:41|-1|1|4","53:38-53:50|-1|1|4","84:5-84:17|-1|1|4","88:28-88:40|-1|1|4","91:26-91:38|-1|1|4"]},{"id":4,"usr":6947093152214091826,"detailed_name":"AvahiPoll","short_name_offset":0,"short_name_size":9,"kind":23,"hover":"","comments":"Defines an abstracted event polling API. This may be used to\nconnect Avahi to other main loops. This is loosely based on Unix\npoll(2). A consumer will call watch_new() for all file descriptors it\nwants to listen for events on. In addition he can call timeout_new()\nto define time based events .","declarations":[],"spell":"60:8-60:17|-1|1|2","extent":"60:1-92:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[4,5,6,7,8,9,10,11],"instances":[],"uses":["39:16-39:25|-1|1|4"]},{"id":5,"usr":6706779819942363667,"detailed_name":"AvahiPoll","short_name_offset":0,"short_name_size":9,"kind":252,"hover":"typedef struct AvahiPoll AvahiPoll","comments":"An event polling abstraction object","declarations":[],"spell":"39:26-39:35|-1|1|2","extent":"39:1-39:35|-1|1|0","alias_of":4,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["39:26-39:35|-1|1|4","68:36-68:45|-1|1|4","84:40-84:49|-1|1|4"]},{"id":6,"usr":13872345975897921756,"detailed_name":"(anon enum)","short_name_offset":0,"short_name_size":11,"kind":10,"hover":"","comments":"Type of watch events","declarations":[],"spell":"42:9-42:13|-1|1|2","extent":"42:9-47:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":7,"usr":10168348749290986917,"detailed_name":"AvahiWatchEvent","short_name_offset":0,"short_name_size":15,"kind":252,"hover":"","comments":"","declarations":[],"spell":"47:3-47:18|-1|1|2","extent":"42:1-47:18|-1|1|0","alias_of":6,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["47:3-47:18|-1|1|4","50:59-50:74|-1|1|4","68:60-68:75|-1|1|4","71:41-71:56|-1|1|4","74:5-74:20|-1|1|4"]},{"id":8,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":9,"usr":13838176792705659279,"detailed_name":"<fundamental>","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":10,"usr":9058817527721694014,"detailed_name":"AvahiWatchCallback","short_name_offset":0,"short_name_size":18,"kind":252,"hover":"typedef void (*AvahiWatchCallback)(AvahiWatch *w, int fd, AvahiWatchEvent event, void *userdata)","comments":"Called whenever an I/O event happens  on an I/O watch","declarations":[],"spell":"50:16-50:34|-1|1|2","extent":"50:1-50:97|-1|1|0","alias_of":9,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["50:16-50:34|-1|1|4","68:83-68:101|-1|1|4"]},{"id":11,"usr":16752512603248000424,"detailed_name":"AvahiTimeoutCallback","short_name_offset":0,"short_name_size":20,"kind":252,"hover":"typedef void (*AvahiTimeoutCallback)(AvahiTimeout *t, void *userdata)","comments":"Called when the timeout is reached","declarations":[],"spell":"53:16-53:36|-1|1|2","extent":"53:1-53:70|-1|1|0","alias_of":9,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["53:16-53:36|-1|1|4","84:82-84:102|-1|1|4"]},{"id":12,"usr":2,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[4],"uses":[]},{"id":13,"usr":9845685975729767257,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["84:69-84:76|-1|1|4","88:57-88:64|-1|1|4"]}],"funcs":[],"vars":[{"id":0,"usr":9883533858882185606,"detailed_name":"(anon enum)::AVAHI_WATCH_IN","short_name_offset":13,"short_name_size":14,"hover":"(anon enum)::AVAHI_WATCH_IN = 1","comments":"Input event","declarations":[],"spell":"43:5-43:19|6|2|2","extent":"43:5-43:28|6|2|0","type":8,"uses":[],"kind":22,"storage":0},{"id":1,"usr":5479376752221575261,"detailed_name":"(anon enum)::AVAHI_WATCH_OUT","short_name_offset":13,"short_name_size":15,"hover":"(anon enum)::AVAHI_WATCH_OUT = 4","comments":"Output event","declarations":[],"spell":"44:5-44:20|6|2|2","extent":"44:5-44:30|6|2|0","type":8,"uses":[],"kind":22,"storage":0},{"id":2,"usr":17697467103710354468,"detailed_name":"(anon enum)::AVAHI_WATCH_ERR","short_name_offset":13,"short_name_size":15,"hover":"(anon enum)::AVAHI_WATCH_ERR = 8","comments":"Error event","declarations":[],"spell":"45:5-45:20|6|2|2","extent":"45:5-45:30|6|2|0","type":8,"uses":[],"kind":22,"storage":0},{"id":3,"usr":15440153867331231590,"detailed_name":"(anon enum)::AVAHI_WATCH_HUP","short_name_offset":13,"short_name_size":15,"hover":"(anon enum)::AVAHI_WATCH_HUP = 16","comments":"Hangup event","declarations":[],"spell":"46:5-46:20|6|2|2","extent":"46:5-46:30|6|2|0","type":8,"uses":[],"kind":22,"storage":0},{"id":4,"usr":13764632703995997452,"detailed_name":"void *AvahiPoll::userdata","short_name_offset":17,"short_name_size":8,"hover":"","comments":"Some abstract user data usable by the provider of the API","declarations":[],"spell":"63:11-63:19|4|2|2","extent":"63:5-63:19|4|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":5,"usr":18194090627587078917,"detailed_name":"AvahiWatch *(*)(const AvahiPoll *, int, AvahiWatchEvent, AvahiWatchCallback, void *) AvahiPoll::watch_new","short_name_offset":96,"short_name_size":9,"hover":"","comments":"Create a new watch for the specified file descriptor and for\nthe specified events. The API will call the callback function\nwhenever any of the events happens.","declarations":[],"spell":"68:19-68:28|4|2|2","extent":"68:5-68:127|4|2|0","uses":[],"kind":8,"storage":0},{"id":6,"usr":9210243471801824568,"detailed_name":"void (*)(AvahiWatch *, AvahiWatchEvent) AvahiPoll::watch_update","short_name_offset":51,"short_name_size":12,"hover":"","comments":"Update the events to wait for. It is safe to call this function from an AvahiWatchCallback","declarations":[],"spell":"71:12-71:24|4|2|2","extent":"71:5-71:63|4|2|0","uses":[],"kind":8,"storage":0},{"id":7,"usr":16348267816901265678,"detailed_name":"AvahiWatchEvent (*)(AvahiWatch *) AvahiPoll::watch_get_events","short_name_offset":45,"short_name_size":16,"hover":"","comments":"Return the events that happened. It is safe to call this function from an AvahiWatchCallback","declarations":[],"spell":"74:23-74:39|4|2|2","extent":"74:5-74:55|4|2|0","uses":[],"kind":8,"storage":0},{"id":8,"usr":772511601204259613,"detailed_name":"void (*)(AvahiWatch *) AvahiPoll::watch_free","short_name_offset":34,"short_name_size":10,"hover":"","comments":"Free a watch. It is safe to call this function from an AvahiWatchCallback","declarations":[],"spell":"77:12-77:22|4|2|2","extent":"77:5-77:38|4|2|0","uses":[],"kind":8,"storage":0},{"id":9,"usr":1833914719661121868,"detailed_name":"AvahiTimeout *(*)(const AvahiPoll *, const struct timeval *, AvahiTimeoutCallback, void *) AvahiPoll::timeout_new","short_name_offset":102,"short_name_size":11,"hover":"","comments":"Set a wakeup time for the polling loop. The API will call the\ncallback function when the absolute time *tv is reached. If tv is\nNULL, the timeout is disabled. After the timeout expired the\ncallback function will be called and the timeout is disabled. You\ncan reenable it by calling timeout_update()","declarations":[],"spell":"84:21-84:32|4|2|2","extent":"84:5-84:128|4|2|0","uses":[],"kind":8,"storage":0},{"id":10,"usr":15828963137564818206,"detailed_name":"void (*)(AvahiTimeout *, const struct timeval *) AvahiPoll::timeout_update","short_name_offset":60,"short_name_size":14,"hover":"","comments":"Update the absolute expiration time for a timeout, If tv is\nNULL, the timeout is disabled. It is safe to call this function from an AvahiTimeoutCallback","declarations":[],"spell":"88:12-88:26|4|2|2","extent":"88:5-88:69|4|2|0","uses":[],"kind":8,"storage":0},{"id":11,"usr":6776936012794029061,"detailed_name":"void (*)(AvahiTimeout *) AvahiPoll::timeout_free","short_name_offset":36,"short_name_size":12,"hover":"","comments":"Free a timeout. It is safe to call this function from an AvahiTimeoutCallback","declarations":[],"spell":"91:12-91:24|4|2|2","extent":"91:5-91:42|4|2|0","uses":[],"kind":8,"storage":0},{"id":12,"usr":5181150596160789321,"detailed_name":"foowatchhfoo","short_name_offset":0,"short_name_size":12,"hover":"#define foowatchhfoo","comments":"","declarations":[],"spell":"2:9-2:21|-1|1|2","extent":"2:9-2:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":13,"usr":13934000849307764093,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["30:1-30:19|-1|1|4"],"kind":0,"storage":0},{"id":14,"usr":4836827392636162545,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["43:22-43:28|-1|1|4"],"kind":0,"storage":0},{"id":15,"usr":9759617633721126326,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["44:23-44:30|-1|1|4"],"kind":0,"storage":0},{"id":16,"usr":14250799103837464609,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["45:23-45:30|-1|1|4"],"kind":0,"storage":0},{"id":17,"usr":4525538111730015914,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["46:23-46:30|-1|1|4"],"kind":0,"storage":0},{"id":18,"usr":5853952557760378306,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["94:1-94:17|-1|1|4"],"kind":0,"storage":0}]}