15
{"last_modification_time":1548168586,"language":2,"import_file":"/home/dark/proj/faust/compiler/generator/llvm/machine/llvm-machine-dsp.h","args":["clang++","-working-directory=/home/dark/proj/faust/","/home/dark/proj/faust/compiler/generator/llvm/machine/llvm-machine-dsp.h","-resource-dir=/usr/lib/clang/7.0.1","-Wno-unknown-warning-option","-fparse-all-comments","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/x86_64-pc-linux-gnu","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/backward","-isystem/usr/local/include","-isystem/usr/lib/clang/7.0.1/include","-isystem/usr/include"],"includes":[{"line":28,"resolved_path":"/usr/include/c++/8.2.1/string"},{"line":29,"resolved_path":"/usr/include/c++/8.2.1/vector"},{"line":30,"resolved_path":"/usr/local/include/faust/dsp/dsp.h"},{"line":31,"resolved_path":"/usr/local/include/faust/gui/meta.h"}],"dependencies":["/usr/include/c++/8.2.1/string","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++config.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/os_defines.h","/usr/include/features.h","/usr/include/sys/cdefs.h","/usr/include/gnu/stubs.h","/usr/include/c++/8.2.1/bits/stringfwd.h","/usr/include/c++/8.2.1/bits/memoryfwd.h","/usr/include/c++/8.2.1/bits/char_traits.h","/usr/include/c++/8.2.1/bits/stl_algobase.h","/usr/include/c++/8.2.1/bits/functexcept.h","/usr/include/c++/8.2.1/bits/cpp_type_traits.h","/usr/include/c++/8.2.1/ext/type_traits.h","/usr/include/c++/8.2.1/ext/numeric_traits.h","/usr/include/c++/8.2.1/bits/stl_pair.h","/usr/include/c++/8.2.1/bits/move.h","/usr/include/c++/8.2.1/bits/concept_check.h","/usr/include/c++/8.2.1/type_traits","/usr/include/c++/8.2.1/bits/stl_iterator_base_types.h","/usr/include/c++/8.2.1/bits/stl_iterator_base_funcs.h","/usr/include/c++/8.2.1/bits/stl_iterator.h","/usr/include/c++/8.2.1/bits/ptr_traits.h","/usr/include/c++/8.2.1/debug/debug.h","/usr/include/c++/8.2.1/bits/postypes.h","/usr/include/c++/8.2.1/cwchar","/usr/include/wchar.h","/usr/include/bits/libc-header-start.h","/usr/include/bits/floatn.h","/usr/include/bits/floatn-common.h","/usr/include/bits/types/mbstate_t.h","/usr/include/bits/types/locale_t.h","/usr/include/c++/8.2.1/cstdint","/usr/lib/clang/7.0.1/include/stdint.h","/usr/include/stdint.h","/usr/include/bits/types.h","/usr/include/bits/stdint-intn.h","/usr/include/bits/stdint-uintn.h","/usr/include/c++/8.2.1/bits/allocator.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++allocator.h","/usr/include/c++/8.2.1/ext/new_allocator.h","/usr/include/c++/8.2.1/new","/usr/include/c++/8.2.1/exception","/usr/include/c++/8.2.1/bits/exception.h","/usr/include/c++/8.2.1/bits/exception_ptr.h","/usr/include/c++/8.2.1/bits/cxxabi_init_exception.h","/usr/lib/clang/7.0.1/include/stddef.h","/usr/include/c++/8.2.1/typeinfo","/usr/include/c++/8.2.1/bits/hash_bytes.h","/usr/include/c++/8.2.1/bits/nested_exception.h","/usr/include/c++/8.2.1/bits/localefwd.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++locale.h","/usr/include/c++/8.2.1/clocale","/usr/include/locale.h","/usr/include/c++/8.2.1/iosfwd","/usr/include/c++/8.2.1/cctype","/usr/include/ctype.h","/usr/include/endian.h","/usr/include/bits/byteswap.h","/usr/include/bits/uintn-identity.h","/usr/include/c++/8.2.1/bits/ostream_insert.h","/usr/include/c++/8.2.1/bits/stl_function.h","/usr/include/c++/8.2.1/bits/range_access.h","/usr/include/c++/8.2.1/initializer_list","/usr/include/c++/8.2.1/bits/basic_string.h","/usr/include/c++/8.2.1/ext/atomicity.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/gthr.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/gthr-default.h","/usr/include/pthread.h","/usr/include/sched.h","/usr/include/bits/types/time_t.h","/usr/include/bits/types/struct_timespec.h","/usr/include/bits/sched.h","/usr/include/time.h","/usr/include/bits/time.h","/usr/include/bits/timex.h","/usr/include/bits/types/struct_timeval.h","/usr/include/bits/types/clock_t.h","/usr/include/bits/types/struct_tm.h","/usr/include/bits/types/clockid_t.h","/usr/include/bits/types/timer_t.h","/usr/include/bits/types/struct_itimerspec.h","/usr/include/bits/pthreadtypes.h","/usr/include/bits/thread-shared-types.h","/usr/include/bits/pthreadtypes-arch.h","/usr/include/bits/setjmp.h","/usr/include/c++/8.2.1/ext/alloc_traits.h","/usr/include/c++/8.2.1/bits/alloc_traits.h","/usr/include/c++/8.2.1/ext/string_conversions.h","/usr/include/c++/8.2.1/cstdlib","/usr/include/stdlib.h","/usr/include/sys/types.h","/usr/include/sys/select.h","/usr/include/bits/select.h","/usr/include/bits/types/sigset_t.h","/usr/include/alloca.h","/usr/include/c++/8.2.1/bits/std_abs.h","/usr/include/c++/8.2.1/cstdio","/usr/include/stdio.h","/usr/include/bits/types/__fpos_t.h","/usr/include/bits/types/__fpos64_t.h","/usr/include/bits/types/struct_FILE.h","/usr/include/bits/types/cookie_io_functions_t.h","/usr/include/c++/8.2.1/cerrno","/usr/include/errno.h","/usr/include/bits/errno.h","/usr/include/linux/errno.h","/usr/include/asm/errno.h","/usr/include/asm-generic/errno.h","/usr/include/c++/8.2.1/bits/functional_hash.h","/usr/include/c++/8.2.1/bits/basic_string.tcc","/usr/include/c++/8.2.1/vector","/usr/include/c++/8.2.1/bits/stl_construct.h","/usr/include/c++/8.2.1/bits/stl_uninitialized.h","/usr/include/c++/8.2.1/bits/stl_vector.h","/usr/include/c++/8.2.1/bits/stl_bvector.h","/usr/local/include/faust/dsp/dsp.h","/usr/lib/clang/7.0.1/include/xmmintrin.h","/usr/lib/clang/7.0.1/include/mm_malloc.h","/usr/include/c++/8.2.1/stdlib.h","/usr/lib/clang/7.0.1/include/emmintrin.h","/usr/include/c++/8.2.1/bits/predefined_ops.h","/usr/lib/clang/7.0.1/include/stdarg.h","/usr/include/bits/types/wint_t.h","/usr/include/bits/types/__mbstate_t.h","/usr/include/bits/types/__FILE.h","/usr/include/bits/types/FILE.h","/usr/include/bits/types/__locale_t.h","/usr/lib/clang/7.0.1/include/__stddef_max_align_t.h","/usr/include/c++/8.2.1/bits/cxxabi_forced.h","/usr/include/c++/8.2.1/backward/binders.h","/usr/include/bits/types/struct_sched_param.h","/usr/include/bits/cpu-set.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/atomic_word.h","/usr/include/bits/types/__sigset_t.h","/usr/include/bits/sys_errlist.h","/usr/include/bits/types/error_t.h","/usr/include/c++/8.2.1/bits/vector.tcc","/usr/lib/clang/7.0.1/include/mmintrin.h","/usr/local/include/faust/gui/meta.h","/usr/include/stdc-predef.h","/usr/include/bits/wordsize.h","/usr/include/gnu/stubs-64.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/cpu_defines.h","/usr/include/c++/8.2.1/bits/exception_defines.h","/usr/include/c++/8.2.1/debug/assertions.h","/usr/include/bits/wchar.h","/usr/include/bits/typesizes.h","/usr/include/bits/locale.h","/usr/include/bits/endian.h","/usr/include/bits/waitflags.h","/usr/include/bits/waitstatus.h","/usr/include/bits/stdlib-float.h","/usr/include/bits/stdio_lim.h","/usr/include/asm-generic/errno-base.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":16059057116524021817,"detailed_name":"llvm_dsp_factory","short_name_offset":0,"short_name_size":16,"kind":5,"hover":"","comments":"\nDSP factory class.","declarations":[],"spell":"44:7-44:23|-1|1|2","extent":"44:1-57:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[0,1,2,3],"vars":[],"instances":[],"uses":["76:1-76:17|-1|1|4","78:12-78:28|-1|1|4","96:1-96:17|-1|1|4","100:12-100:28|-1|1|4","109:23-109:39|-1|1|4","120:27-120:43|-1|1|4","129:29-129:45|-1|1|4","138:29-138:45|-1|1|4","147:30-147:46|-1|1|4","185:1-185:17|-1|1|4","187:12-187:28|-1|1|4","198:1-198:17|-1|1|4","200:12-200:28|-1|1|4","202:44-202:60|-1|1|4","211:25-211:41|-1|1|4","239:29-239:45|-1|1|4"]},{"id":1,"usr":4160338041907786,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["47:10-47:16|-1|1|4","50:10-50:16|-1|1|4","53:10-53:16|-1|1|4","56:10-56:16|-1|1|4","64:6-64:12|-1|1|4","76:54-76:60|-1|1|4","96:57-96:63|-1|1|4","96:86-96:92|-1|1|4","97:77-97:83|-1|1|4","97:98-97:104|-1|1|4","161:18-161:24|-1|1|4","185:56-185:62|-1|1|4","198:60-198:66|-1|1|4","255:6-255:12|-1|1|4","255:37-255:43|-1|1|4"]},{"id":2,"usr":5401847601697785946,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["47:5-47:8|0|2|4","50:5-50:8|0|2|4","53:5-53:8|0|2|4","56:5-56:8|0|2|4","64:1-64:4|-1|1|4","76:49-76:52|-1|1|4","96:52-96:55|-1|1|4","96:81-96:84|-1|1|4","97:72-97:75|-1|1|4","97:93-97:96|-1|1|4","161:1-161:4|-1|1|4","161:13-161:16|-1|1|4","185:51-185:54|-1|1|4","198:55-198:58|-1|1|4","255:1-255:4|-1|1|4","255:32-255:35|-1|1|4"]},{"id":3,"usr":10956461108384510180,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["161:6-161:12|-1|1|4"]},{"id":4,"usr":12394725812682639261,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["211:52-211:56|-1|1|4","218:19-218:23|-1|1|4"]},{"id":5,"usr":7198585061366288975,"detailed_name":"llvm_dsp","short_name_offset":0,"short_name_size":8,"kind":5,"hover":"","comments":"\nInstance class with related methods.","declarations":[],"spell":"216:7-216:15|-1|1|2","extent":"216:1-230:2|-1|1|0","bases":[6],"derived":[],"types":[],"funcs":[25,27,29,31,33,35,37],"vars":[],"instances":[],"uses":["229:13-229:21|-1|1|4","239:1-239:9|-1|1|4","246:24-246:32|-1|1|4"]},{"id":6,"usr":1412586585224299744,"detailed_name":"dsp","short_name_offset":0,"short_name_size":3,"kind":0,"hover":"","comments":"","declarations":["216:25-216:28|-1|1|4"],"bases":[],"derived":[5],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["216:25-216:28|-1|1|4"]},{"id":7,"usr":14861958301987055888,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["225:37-225:39|-1|1|4"]}],"funcs":[{"id":0,"usr":18444832467023106372,"detailed_name":"std::string llvm_dsp_factory::getName()","short_name_offset":30,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"Return Factory name","declarations":[{"spell":"47:17-47:24|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":17611923481766154272,"detailed_name":"std::string llvm_dsp_factory::getTarget()","short_name_offset":30,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"Return Factory LLVM target","declarations":[{"spell":"50:17-50:26|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":13355569504216629036,"detailed_name":"std::string llvm_dsp_factory::getSHAKey()","short_name_offset":30,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"Return Factory SHA key","declarations":[{"spell":"53:17-53:26|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":10828389633632417776,"detailed_name":"std::string llvm_dsp_factory::getDSPCode()","short_name_offset":30,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"Return Factory expanded DSP code","declarations":[{"spell":"56:17-56:27|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":1123069409382777229,"detailed_name":"std::string getDSPMachineTarget()","short_name_offset":12,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\nGet the target (triple + CPU) of the DSP machine.\n\n@return the target as a string.","declarations":[{"spell":"64:13-64:32|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":12065548238189573786,"detailed_name":"char *getCDSPMachineTarget()","short_name_offset":6,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"66:18-66:38|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":13953020614969288623,"detailed_name":"llvm_dsp_factory *getDSPFactoryFromSHAKey(const std::string &sha_key)","short_name_offset":18,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"\nGet the Faust DSP factory associated with a given SHA key (created from the 'expanded' DSP source),\nif already allocated in the factories cache.\n\n@param sha_key - the SHA key for an already created factory, kept in the factory cache\n\n@return a valid DSP factory if one is associated with the SHA key, otherwise a null pointer.","declarations":[{"spell":"76:19-76:42|-1|1|1","param_spellings":["76:62-76:69"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":614318148976107877,"detailed_name":"llvm_dsp_factory *getCDSPFactoryFromSHAKey(const char *sha_key)","short_name_offset":18,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"78:30-78:54|-1|1|1","param_spellings":["78:67-78:74"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":10126131816800922479,"detailed_name":"llvm_dsp_factory *createDSPFactoryFromString(const std::string &name_app, const std::string &dsp_content, int argc, const char *argv[], const std::string &target, std::string &error_msg, int opt_level = 3)","short_name_offset":18,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"\nCreate a Faust DSP factory from a DSP source code as a string. Note that the library keeps an internal cache of all\nallocated factories so that the compilation of same DSP code (that is same source code and\nsame set of 'normalized' compilations options) will return the same (reference counted) factory pointer.\n\n@param name_app - the name of the Faust program\n@param dsp_content - the Faust program as a string\n@param argc - the number of parameters in argv array\n@param argv - the array of parameters (Warning : aux file generation options will be filtrated (-svg, ...) --> use\ngenerateAuxFiles)\n@param target - the LLVM machine target (using empty string will take current machine settings)\n@param error_msg - the error string to be filled\n@param opt_level - LLVM IR to IR optimization level (from -1 to 4, -1 means 'maximum possible value')\n\n@return a valid DSP factory on success, otherwise a null pointer.","declarations":[{"spell":"96:19-96:45|-1|1|1","param_spellings":["96:65-96:73","96:94-96:105","96:111-96:115","97:58-97:62","97:85-97:91","97:106-97:115","98:50-98:59"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":3466930993184559831,"detailed_name":"llvm_dsp_factory *createCDSPFactoryFromString(const char *name_app, const char *dsp_content, int argc, const char *argv[], const char *target, char *error_msg, int opt_level)","short_name_offset":18,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"100:30-100:57|-1|1|1","param_spellings":["100:70-100:78","100:92-100:103","100:109-100:113","101:70-101:74","101:90-101:96","101:104-101:113","102:62-102:71"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":7990375840355789802,"detailed_name":"void deleteDSPFactory(llvm_dsp_factory *factory)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\nDestroy a Faust DSP factory, that is decrements it's reference counter, possible really deleting the pointer.\n\n@param factory - the DSP factory to be deleted.","declarations":[{"spell":"109:6-109:22|-1|1|1","param_spellings":["109:41-109:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":4671162424018033811,"detailed_name":"char *getCName(llvm_dsp_factory *factory)","short_name_offset":6,"short_name_size":8,"kind":12,"storage":1,"hover":"","comments":"\nGet the name of the Faust DSP factory : will be the name declared in the DSP source file or string, or if not\navailable, the DSP 'filename' given in createDSPFactoryFromFile or the DSP 'name_app' given in\ncreateDSPFactoryFromString.\n\n@param factory - the DSP factory\n\n@return the name as a string.","declarations":[{"spell":"120:18-120:26|-1|1|1","param_spellings":["120:45-120:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":14733292455732112174,"detailed_name":"char *getCTarget(llvm_dsp_factory *factory)","short_name_offset":6,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\nGet the LLVM target of the Faust DSP factory.\n\n@param factory - the DSP factory\n\n@return the LLVM target as a string.","declarations":[{"spell":"129:18-129:28|-1|1|1","param_spellings":["129:47-129:54"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":8768644853830248161,"detailed_name":"char *getCSHAKey(llvm_dsp_factory *factory)","short_name_offset":6,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\nGet the SHA Key of the Faust DSP factory.\n\n@param factory - the DSP factory\n\n@return the SHA key as a string.","declarations":[{"spell":"138:18-138:28|-1|1|1","param_spellings":["138:47-138:54"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":14406021420632112771,"detailed_name":"char *getCDSPCode(llvm_dsp_factory *factory)","short_name_offset":6,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\nGet the expanded DSP code of the Faust DSP factory.\n\n@param factory - the DSP factory\n\n@return the expanded DSP code as a string.","declarations":[{"spell":"147:18-147:29|-1|1|1","param_spellings":["147:48-147:55"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":17402352059777698968,"detailed_name":"void deleteAllDSPFactories()","short_name_offset":5,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"\nDestroy all Faust DSP factories kept in the library cache. Beware : all kept factory pointers (in local variables of\nso...) thus become invalid.","declarations":[{"spell":"154:6-154:27|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":6979791524120903160,"detailed_name":"std::vector<std::string> getAllDSPFactories()","short_name_offset":25,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\nReturn Faust DSP factories of the library cache as a vector of their SHA keys.\n\n@return the Faust DSP factories.","declarations":[{"spell":"161:26-161:44|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":12617739008935909292,"detailed_name":"bool startMTDSPFactories()","short_name_offset":5,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\nStart multi-thread access mode (since by default the library is not 'multi-thread' safe).\n\n@return true is 'multi-thread' safe access is started.","declarations":[{"spell":"168:6-168:25|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":1806498928072775020,"detailed_name":"void stopMTDSPFactories()","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\nStop multi-thread access mode.","declarations":[{"spell":"174:6-174:24|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":13801262176553926081,"detailed_name":"llvm_dsp_factory *readDSPFactoryFromMachine(const std::string &machine_code)","short_name_offset":18,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"\nCreate a Faust DSP factory from a machine code string. Note that the library keeps an internal cache of all\nallocated factories so that the compilation of same DSP code (that is the same machine code string) will return\nthe same (reference counted) factory pointer.\n\n@param machine_code - the machine code string\n\n@return the Faust DSP factory on success, otherwise a null pointer.","declarations":[{"spell":"185:19-185:44|-1|1|1","param_spellings":["185:64-185:76"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":18282691814853138403,"detailed_name":"llvm_dsp_factory *readCDSPFactoryFromMachine(const char *machine_code)","short_name_offset":18,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"187:30-187:56|-1|1|1","param_spellings":["187:69-187:81"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":3052914981299227744,"detailed_name":"llvm_dsp_factory *readDSPFactoryFromMachineFile(const std::string &machine_code_path)","short_name_offset":18,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"\nCreate a Faust DSP factory from a machine code file. Note that the library keeps an internal cache of all\nallocated factories so that the compilation of same DSP code (that is the same machine code file) will return\nthe same (reference counted) factory pointer.\n\n@param machine_code_path - the machine code file pathname\n\n@return the Faust DSP factory on success, otherwise a null pointer.","declarations":[{"spell":"198:19-198:48|-1|1|1","param_spellings":["198:68-198:85"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":10893249283431546526,"detailed_name":"llvm_dsp_factory *readCDSPFactoryFromMachineFile(const char *machine_code_path)","short_name_offset":18,"short_name_size":30,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"200:30-200:60|-1|1|1","param_spellings":["200:73-200:90"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":6373792907929848764,"detailed_name":"char *writeCDSPFactoryToMachine(llvm_dsp_factory *factory, const char *target)","short_name_offset":6,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"202:18-202:43|-1|1|1","param_spellings":["202:62-202:69","202:83-202:89"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":14216006075355313092,"detailed_name":"void metadataDSPFactory(llvm_dsp_factory *factory, Meta *meta)","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\nCall global declarations with the given meta object.\n\n@param factory - the Faust DSP factory\n@param meta - the meta object to be used.","declarations":[{"spell":"211:6-211:24|-1|1|1","param_spellings":["211:43-211:50","211:58-211:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":9692589048452983629,"detailed_name":"void llvm_dsp::metadata(Meta *m)","short_name_offset":15,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"218:10-218:18|5|2|1","param_spellings":["218:25-218:26"]}],"declaring_type":5,"bases":[26],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":26,"usr":10036395101489700026,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[25],"vars":[],"uses":[],"callees":[]},{"id":27,"usr":888819832611857843,"detailed_name":"virtual int llvm_dsp::getNumInputs()","short_name_offset":22,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"220:17-220:29|5|2|1","param_spellings":[]}],"declaring_type":5,"bases":[28],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":28,"usr":8166858084765330288,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[27],"vars":[],"uses":[],"callees":[]},{"id":29,"usr":7363516978112953537,"detailed_name":"virtual int llvm_dsp::getNumOutputs()","short_name_offset":22,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"221:17-221:30|5|2|1","param_spellings":[]}],"declaring_type":5,"bases":[30],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":30,"usr":10915293769377553914,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[29],"vars":[],"uses":[],"callees":[]},{"id":31,"usr":17959145756467244823,"detailed_name":"virtual void llvm_dsp::init(int samplingFreq)","short_name_offset":23,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"223:18-223:22|5|2|1","param_spellings":["223:27-223:39"]}],"declaring_type":5,"bases":[32],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":32,"usr":8249320112437756862,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[31],"vars":[],"uses":[],"callees":[]},{"id":33,"usr":14821640257154504326,"detailed_name":"virtual void llvm_dsp::buildUserInterface(UI *inter)","short_name_offset":23,"short_name_size":18,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"225:18-225:36|5|2|1","param_spellings":["225:41-225:46"]}],"declaring_type":5,"bases":[34],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":34,"usr":7471016111462688623,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[33],"vars":[],"uses":[],"callees":[]},{"id":35,"usr":6274206391826003662,"detailed_name":"virtual void llvm_dsp::compute(int count, float **input, float **output)","short_name_offset":23,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"227:18-227:25|5|2|1","param_spellings":["227:30-227:35","227:50-227:55","227:70-227:76"]}],"declaring_type":5,"bases":[36],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":36,"usr":17357818318548881244,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[35],"vars":[],"uses":[],"callees":[]},{"id":37,"usr":5740197838370857317,"detailed_name":"virtual llvm_dsp *llvm_dsp::copy()","short_name_offset":28,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"229:23-229:27|5|2|1","param_spellings":[]}],"declaring_type":5,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":38,"usr":12593678012831845871,"detailed_name":"llvm_dsp *createDSPInstance(llvm_dsp_factory *factory)","short_name_offset":10,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\nCreate a Faust DSP instance.\n\n@param factory - the Faust DSP factory\n\n@return the Faust DSP instance on success, otherwise a null pointer.","declarations":[{"spell":"239:11-239:28|-1|1|1","param_spellings":["239:47-239:54"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":39,"usr":17454086506729234248,"detailed_name":"void deleteDSPInstance(llvm_dsp *dsp)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\nDestroy a Faust DSP instance.\n\n@param dsp - the DSP instance to be deleted.","declarations":[{"spell":"246:6-246:23|-1|1|1","param_spellings":["246:34-246:37"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":40,"usr":2761965340764186220,"detailed_name":"std::string generateSHA1(const std::string &data)","short_name_offset":12,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\nCompute a SHA1 key from a string\n\n@param data - the string to be converted in SHA1 key\n\n@return the computed SHA1 key.","declarations":[{"spell":"255:13-255:25|-1|1|1","param_spellings":["255:45-255:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":41,"usr":17323576687059576331,"detailed_name":"void freeCMemory(void *ptr)","short_name_offset":5,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\nThe free function to be used on memory returned by getCDSPMachineTarget, getCName, getCSHAKey, getCDSPCode,\ngetCLibraryList, getAllCDSPFactories, writeCDSPFactoryToBitcode, writeCDSPFactoryToIR, writeCDSPFactoryToMachine,\nexpandCDSPFromString and expandCDSPFromFile.\nThis is MANDATORY on Windows when otherwise all nasty runtime version related crashes can occur.\n\n@param ptr - the pointer to be deleted.","declarations":[{"spell":"265:17-265:28|-1|1|1","param_spellings":["265:35-265:38"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":11971919431308462121,"detailed_name":"LLVM_DSP_H","short_name_offset":0,"short_name_size":10,"hover":"#define LLVM_DSP_H","comments":"","declarations":[],"spell":"23:9-23:19|-1|1|2","extent":"23:9-23:19|-1|1|0","uses":[],"kind":255,"storage":0},{"id":1,"usr":7277618245108900484,"detailed_name":"FAUSTFLOAT","short_name_offset":0,"short_name_size":10,"hover":"#define FAUSTFLOAT float","comments":"","declarations":[],"spell":"26:9-26:19|-1|1|2","extent":"26:9-26:25|-1|1|0","uses":["227:37-227:47|-1|1|4","227:57-227:67|-1|1|4"],"kind":255,"storage":0}]}