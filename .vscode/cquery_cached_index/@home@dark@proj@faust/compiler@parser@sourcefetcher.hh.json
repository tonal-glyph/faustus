15
{"last_modification_time":1548168586,"language":1,"import_file":"/home/dark/proj/faust/compiler/parser/sourcefetcher.cpp","args":["clang++","-working-directory=/home/dark/proj/faust/","/home/dark/proj/faust/compiler/parser/sourcefetcher.cpp","-resource-dir=/usr/lib/clang/7.0.1","-Wno-unknown-warning-option","-fparse-all-comments","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/x86_64-pc-linux-gnu","-isystem/usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/8.2.1/../../../../include/c++/8.2.1/backward","-isystem/usr/local/include","-isystem/usr/lib/clang/7.0.1/include","-isystem/usr/include"],"includes":[],"dependencies":["/home/dark/proj/faust/compiler/parser/sourcefetcher.cpp","/usr/include/c++/8.2.1/cstdlib","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/c++config.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/os_defines.h","/usr/include/features.h","/usr/include/sys/cdefs.h","/usr/include/gnu/stubs.h","/usr/include/stdlib.h","/usr/include/bits/libc-header-start.h","/usr/include/bits/floatn.h","/usr/include/bits/floatn-common.h","/usr/include/bits/types/locale_t.h","/usr/include/sys/types.h","/usr/include/bits/types.h","/usr/include/bits/types/clock_t.h","/usr/include/bits/types/clockid_t.h","/usr/include/bits/types/time_t.h","/usr/include/bits/types/timer_t.h","/usr/include/bits/stdint-intn.h","/usr/include/endian.h","/usr/include/bits/byteswap.h","/usr/include/bits/uintn-identity.h","/usr/include/sys/select.h","/usr/include/bits/select.h","/usr/include/bits/types/sigset_t.h","/usr/include/bits/types/struct_timeval.h","/usr/include/bits/types/struct_timespec.h","/usr/include/bits/pthreadtypes.h","/usr/include/bits/thread-shared-types.h","/usr/include/bits/pthreadtypes-arch.h","/usr/include/alloca.h","/usr/include/c++/8.2.1/bits/std_abs.h","/usr/include/c++/8.2.1/stdlib.h","/usr/include/stdio.h","/usr/include/bits/types/__fpos_t.h","/usr/include/bits/types/__fpos64_t.h","/usr/include/bits/types/struct_FILE.h","/usr/include/bits/types/cookie_io_functions_t.h","/usr/include/string.h","/usr/include/strings.h","/usr/include/ctype.h","/usr/include/errno.h","/usr/include/bits/errno.h","/usr/include/linux/errno.h","/usr/include/asm/errno.h","/usr/include/asm-generic/errno.h","/usr/include/netdb.h","/usr/include/netinet/in.h","/usr/include/bits/stdint-uintn.h","/usr/include/sys/socket.h","/usr/include/bits/types/struct_iovec.h","/usr/include/bits/socket.h","/usr/include/asm/socket.h","/usr/include/asm-generic/socket.h","/usr/include/asm/sockios.h","/usr/include/rpc/netdb.h","/usr/include/bits/types/sigevent_t.h","/usr/include/unistd.h","/usr/include/bits/environments.h","/usr/include/bits/getopt_posix.h","/usr/include/sys/time.h","/usr/lib/clang/7.0.1/include/stddef.h","/usr/include/bits/types/__locale_t.h","/usr/include/bits/types/__sigset_t.h","/usr/lib/clang/7.0.1/include/stdarg.h","/usr/include/bits/types/__mbstate_t.h","/usr/include/bits/types/__FILE.h","/usr/include/bits/types/FILE.h","/usr/include/bits/sys_errlist.h","/usr/include/bits/types/error_t.h","/usr/include/bits/socket_type.h","/usr/include/bits/sockaddr.h","/usr/include/bits/types/struct_osockaddr.h","/usr/include/bits/in.h","/usr/include/bits/types/__sigval_t.h","/usr/include/bits/netdb.h","/usr/include/bits/confname.h","/usr/include/bits/getopt_core.h","/usr/include/stdc-predef.h","/usr/include/bits/wordsize.h","/usr/include/gnu/stubs-64.h","/usr/include/c++/8.2.1/x86_64-pc-linux-gnu/bits/cpu_defines.h","/usr/include/bits/waitflags.h","/usr/include/bits/waitstatus.h","/usr/include/bits/typesizes.h","/usr/include/bits/endian.h","/usr/include/bits/stdlib-float.h","/usr/include/bits/stdio_lim.h","/usr/include/asm-generic/errno-base.h","/usr/include/asm-generic/sockios.h","/usr/include/bits/posix_opt.h"],"skipped_by_preprocessor":["53:1-55:6"],"types":[],"funcs":[{"id":0,"usr":15982451397644501077,"detailed_name":"int http_fetch(const char *url, char **fileBuf) __attribute__((visibility(\"default\")))","short_name_offset":4,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\n Download the page, registering a hit. If you pass it a NULL for fileBuf,\n  'url' will be requested but will not remain in memory (useful for\n  simply registering a hit).  Otherwise necessary space will be allocated\n  and will be pointed to by fileBuf, and has to be dealoocated after use.  \n  *  Note that a NULL byte is added to the data, so the actual buffer \n  *  will be the file size + 1. \n Returns:\n\t# of bytes downloaded, or\n\t-1 on error","declarations":[{"spell":"80:12-80:22|-1|1|1","param_spellings":["80:35-80:38","80:47-80:54"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":8963145046774675162,"detailed_name":"int http_setUserAgent(const char *newAgent)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n Changes the User Agent (shown to the web server with each request)\n\tSend it NULL to avoid telling the server a User Agent\n\tBy default, the User Agent is sent (The default one unless changed)\n Returns:\n\t0 on success, or\n\t-1 on error (previous value for agent remains unchanged)","declarations":[{"spell":"90:5-90:22|-1|1|1","param_spellings":["90:35-90:43"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":11275389880932069368,"detailed_name":"int http_setReferer(const char *newReferer)","short_name_offset":4,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n Changes the Referer (shown to the web server with each request)\n\tSend it NULL to avoid thelling the server a Referer\n\tBy default, no Referer is sent\n Returns:\n\t0 on success, or\n\t-1 on error","declarations":[{"spell":"100:5-100:20|-1|1|1","param_spellings":["100:33-100:43"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":16330975775553678001,"detailed_name":"void http_setTimeout(int seconds)","short_name_offset":5,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n Changes the maximum amount of time that HTTP Fetcher will wait on\n\tdata.  If this many seconds elapses without more data from the\n\tserver, http_fetch will return with an error.\n If you pass a value less than 0, reads will not time out, potentially\n\twaiting forever (or until data shows up, whichever comes first)","declarations":[{"spell":"109:6-109:21|-1|1|1","param_spellings":["109:26-109:33"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":13703099527320593987,"detailed_name":"void http_setRedirects(int redirects)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n Changes the number of HTTP redirects HTTP Fetcher will automatically\n\tfollow.  If a request returns a status code of 3XX and contains\n\ta \"Location:\" field, the library will transparently follow up to\n\tthe specified number of redirects.  With this implementation\n\t(which is just a stopgap, really) the caller won't be aware of any\n\tredirection and will assume the returned document came from the original\n\tURL.\n To disable redirects, pass a 0.  To follow unlimited redirects (probably\n  unwise), pass a negative value.  The default is to follow 3 redirects.","declarations":[{"spell":"122:6-122:23|-1|1|1","param_spellings":["122:28-122:37"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":7332665855438104855,"detailed_name":"int http_parseFilename(const char *url, char **filename)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\n Takes a url and puts the filename portion of it into 'filename'.\n Returns:\n\t0 on success, or\n\t1 when url contains no end filename (i.e., \"www.foo.com/\")\n\tand **filename should not be assumed to point to anything), or\n\t-1 on error","declarations":[{"spell":"132:5-132:23|-1|1|1","param_spellings":["132:36-132:39","132:48-132:56"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":3995681015419399813,"detailed_name":"void http_perror(const char *string)","short_name_offset":5,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\n Works like perror.  If an HTTP Fetcher function ever returns an\n\terror (-1), this will print a descriptive message to standard output","declarations":[{"spell":"138:6-138:17|-1|1|1","param_spellings":["138:30-138:36"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":17141131628639370842,"detailed_name":"const char *http_strerror()","short_name_offset":12,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\n Returns a pointer to the current error description message.  The\n\tmessage pointed to is only good until the next call to http_strerror(),\n\tso if you need to hold on to the message for a while you should make\n\ta copy of it.","declarations":[{"spell":"146:13-146:26|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":11135083659330940910,"detailed_name":"int _http_read_header(int sock, char *headerPtr)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n Reads the metadata of an HTTP response.  On success returns the number\n Returns:\n\t# of bytes read on success, or\n\t-1 on error","declarations":[{"spell":"158:5-158:22|-1|1|1","param_spellings":["158:27-158:31","158:39-158:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":16849263632583974361,"detailed_name":"int makeSocket(char *host)","short_name_offset":4,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"\n Opens a TCP socket and returns the descriptor\n Returns:\n\tsocket descriptor, or\n\t-1 on error","declarations":[{"spell":"166:5-166:15|-1|1|1","param_spellings":["166:22-166:26"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":2856988118325321548,"detailed_name":"int _checkBufSize(char **buf, int *bufsize, int more)","short_name_offset":4,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\n Determines if the given NULL-terminated buffer is large enough to\n\tconcatenate the given number of characters.  If not, it attempts to\n\tgrow the buffer to fit.\n Returns:\n\t0 on success, or\n\t-1 on error (original buffer is unchanged).","declarations":[{"spell":"176:5-176:18|-1|1|1","param_spellings":["176:26-176:29","176:36-176:43","176:49-176:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":9894622137305105565,"detailed_name":"HTTP_FETCHER_H","short_name_offset":0,"short_name_size":14,"hover":"#define HTTP_FETCHER_H","comments":"","declarations":[],"spell":"21:9-21:23|-1|1|2","extent":"21:9-21:23|-1|1|0","uses":[],"kind":255,"storage":0},{"id":1,"usr":11837470621286213400,"detailed_name":"FETCHER_ERROR","short_name_offset":0,"short_name_size":13,"hover":"#define FETCHER_ERROR 0","comments":"","declarations":[],"spell":"24:9-24:22|-1|1|2","extent":"24:9-24:24|-1|1|0","uses":[],"kind":255,"storage":0},{"id":2,"usr":6652369315755406455,"detailed_name":"ERRNO","short_name_offset":0,"short_name_size":5,"hover":"#define ERRNO   1","comments":"","declarations":[],"spell":"25:9-25:14|-1|1|2","extent":"25:9-25:18|-1|1|0","uses":[],"kind":255,"storage":0},{"id":3,"usr":13274705623155417439,"detailed_name":"H_ERRNO","short_name_offset":0,"short_name_size":7,"hover":"#define H_ERRNO   2","comments":"","declarations":[],"spell":"26:9-26:16|-1|1|2","extent":"26:9-26:20|-1|1|0","uses":[],"kind":255,"storage":0},{"id":4,"usr":9366425342520576655,"detailed_name":"HF_SUCCESS","short_name_offset":0,"short_name_size":10,"hover":"#define HF_SUCCESS  0","comments":"","declarations":[],"spell":"29:9-29:19|-1|1|2","extent":"29:9-29:22|-1|1|0","uses":[],"kind":255,"storage":0},{"id":5,"usr":14230845710606226482,"detailed_name":"HF_METAERROR","short_name_offset":0,"short_name_size":12,"hover":"#define HF_METAERROR 1","comments":"","declarations":[],"spell":"30:9-30:21|-1|1|2","extent":"30:9-30:23|-1|1|0","uses":[],"kind":255,"storage":0},{"id":6,"usr":5101962929951823584,"detailed_name":"HF_NULLURL","short_name_offset":0,"short_name_size":10,"hover":"#define HF_NULLURL  2","comments":"","declarations":[],"spell":"31:9-31:19|-1|1|2","extent":"31:9-31:22|-1|1|0","uses":[],"kind":255,"storage":0},{"id":7,"usr":10968069508514279593,"detailed_name":"HF_HEADTIMEOUT","short_name_offset":0,"short_name_size":14,"hover":"#define HF_HEADTIMEOUT 3","comments":"","declarations":[],"spell":"32:9-32:23|-1|1|2","extent":"32:9-32:25|-1|1|0","uses":[],"kind":255,"storage":0},{"id":8,"usr":1669497455908585191,"detailed_name":"HF_DATATIMEOUT","short_name_offset":0,"short_name_size":14,"hover":"#define HF_DATATIMEOUT 4","comments":"","declarations":[],"spell":"33:9-33:23|-1|1|2","extent":"33:9-33:25|-1|1|0","uses":[],"kind":255,"storage":0},{"id":9,"usr":6639911065586055994,"detailed_name":"HF_FRETURNCODE","short_name_offset":0,"short_name_size":14,"hover":"#define HF_FRETURNCODE 5","comments":"","declarations":[],"spell":"34:9-34:23|-1|1|2","extent":"34:9-34:25|-1|1|0","uses":[],"kind":255,"storage":0},{"id":10,"usr":18231100442734768468,"detailed_name":"HF_CRETURNCODE","short_name_offset":0,"short_name_size":14,"hover":"#define HF_CRETURNCODE 6","comments":"","declarations":[],"spell":"35:9-35:23|-1|1|2","extent":"35:9-35:25|-1|1|0","uses":[],"kind":255,"storage":0},{"id":11,"usr":15318637965058458989,"detailed_name":"HF_STATUSCODE","short_name_offset":0,"short_name_size":13,"hover":"#define HF_STATUSCODE 7","comments":"","declarations":[],"spell":"36:9-36:22|-1|1|2","extent":"36:9-36:24|-1|1|0","uses":[],"kind":255,"storage":0},{"id":12,"usr":5138481126804444040,"detailed_name":"HF_CONTENTLEN","short_name_offset":0,"short_name_size":13,"hover":"#define HF_CONTENTLEN 8","comments":"","declarations":[],"spell":"37:9-37:22|-1|1|2","extent":"37:9-37:24|-1|1|0","uses":[],"kind":255,"storage":0},{"id":13,"usr":15419112967407254656,"detailed_name":"HF_HERROR","short_name_offset":0,"short_name_size":9,"hover":"#define HF_HERROR  9","comments":"","declarations":[],"spell":"38:9-38:18|-1|1|2","extent":"38:9-38:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":14,"usr":10013623062246500933,"detailed_name":"HF_CANTREDIRECT","short_name_offset":0,"short_name_size":15,"hover":"#define HF_CANTREDIRECT 10","comments":"","declarations":[],"spell":"39:9-39:24|-1|1|2","extent":"39:9-39:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":15,"usr":3310916956903513213,"detailed_name":"HF_MAXREDIRECTS","short_name_offset":0,"short_name_size":15,"hover":"#define HF_MAXREDIRECTS 11","comments":"","declarations":[],"spell":"40:9-40:24|-1|1|2","extent":"40:9-40:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":16,"usr":7760856195775273676,"detailed_name":"PORT_NUMBER","short_name_offset":0,"short_name_size":11,"hover":"#define PORT_NUMBER    80","comments":"","declarations":[],"spell":"42:9-42:20|-1|1|2","extent":"42:9-42:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":17,"usr":11741273582616178221,"detailed_name":"HTTP_VERSION","short_name_offset":0,"short_name_size":12,"hover":"#define HTTP_VERSION    \"HTTP/1.0\"","comments":"","declarations":[],"spell":"43:9-43:21|-1|1|2","extent":"43:9-43:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":18,"usr":14179247303562744453,"detailed_name":"DEFAULT_USER_AGENT","short_name_offset":0,"short_name_size":18,"hover":"#define DEFAULT_USER_AGENT  \"HTTP Fetcher\"","comments":"","declarations":[],"spell":"44:9-44:27|-1|1|2","extent":"44:9-44:43|-1|1|0","uses":[],"kind":255,"storage":0},{"id":19,"usr":9239628425896425755,"detailed_name":"DEFAULT_READ_TIMEOUT","short_name_offset":0,"short_name_size":20,"hover":"#define DEFAULT_READ_TIMEOUT 5","comments":"","declarations":[],"spell":"46:9-46:29|-1|1|2","extent":"46:9-46:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":20,"usr":14946360888712579839,"detailed_name":"REQUEST_BUF_SIZE","short_name_offset":0,"short_name_size":16,"hover":"#define REQUEST_BUF_SIZE   1024","comments":"","declarations":[],"spell":"48:9-48:25|-1|1|2","extent":"48:9-48:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":21,"usr":6720879671566763115,"detailed_name":"HEADER_BUF_SIZE","short_name_offset":0,"short_name_size":15,"hover":"#define HEADER_BUF_SIZE   1024","comments":"","declarations":[],"spell":"49:9-49:24|-1|1|2","extent":"49:9-49:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":22,"usr":2556336083574009980,"detailed_name":"DEFAULT_PAGE_BUF_SIZE","short_name_offset":0,"short_name_size":21,"hover":"#define DEFAULT_PAGE_BUF_SIZE   (1024 * 200)","comments":"","declarations":[],"spell":"50:9-50:30|-1|1|2","extent":"50:9-50:45|-1|1|0","uses":[],"kind":255,"storage":0},{"id":23,"usr":15078126429896270400,"detailed_name":"DEFAULT_REDIRECTS","short_name_offset":0,"short_name_size":17,"hover":"#define DEFAULT_REDIRECTS       3","comments":"","declarations":[],"spell":"51:9-51:26|-1|1|2","extent":"51:9-51:34|-1|1|0","uses":[],"kind":255,"storage":0},{"id":24,"usr":1478253876441130588,"detailed_name":"EXPORT","short_name_offset":0,"short_name_size":6,"hover":"#define EXPORT __attribute__ ((visibility(\"default\")))","comments":"","declarations":[],"spell":"56:10-56:16|-1|1|2","extent":"56:10-56:56|-1|1|0","uses":["80:1-80:7|-1|1|4"],"kind":255,"storage":0}]}