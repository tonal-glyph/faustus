initSidebarItems({"constant":[["BIG_ENDIAN",""],["BYTE_ORDER",""],["EXIT_FAILURE",""],["EXIT_SUCCESS",""],["FD_SETSIZE",""],["LITTLE_ENDIAN",""],["PDP_ENDIAN",""],["RAND_MAX",""],["WCONTINUED",""],["WEXITED",""],["WNOHANG",""],["WNOWAIT",""],["WSTOPPED",""],["WUNTRACED",""],["_ALLOCA_H",""],["_ATFILE_SOURCE",""],["_BITS_BYTESWAP_H",""],["_BITS_PTHREADTYPES_ARCH_H",""],["_BITS_PTHREADTYPES_COMMON_H",""],["_BITS_STDINT_INTN_H",""],["_BITS_TIME64_H",""],["_BITS_TYPESIZES_H",""],["_BITS_TYPES_H",""],["_BITS_UINTN_IDENTITY_H",""],["_DEFAULT_SOURCE",""],["_ENDIAN_H",""],["_FEATURES_H",""],["_POSIX_C_SOURCE",""],["_POSIX_SOURCE",""],["_STDC_PREDEF_H",""],["_STDLIB_H",""],["_STRUCT_TIMESPEC",""],["_SYS_CDEFS_H",""],["_SYS_SELECT_H",""],["_SYS_TYPES_H",""],["_THREAD_SHARED_TYPES_H",""],["__BIG_ENDIAN",""],["__BIT_TYPES_DEFINED__",""],["__BYTE_ORDER",""],["__FD_SETSIZE",""],["__FD_ZERO_STOS",""],["__FLOAT_WORD_ORDER",""],["__GLIBC_MINOR__",""],["__GLIBC_USE_DEPRECATED_GETS",""],["__GLIBC_USE_DEPRECATED_SCANF",""],["__GLIBC_USE_IEC_60559_BFP_EXT",""],["__GLIBC_USE_IEC_60559_FUNCS_EXT",""],["__GLIBC_USE_IEC_60559_TYPES_EXT",""],["__GLIBC_USE_LIB_EXT2",""],["__GLIBC__",""],["__GNU_LIBRARY__",""],["__HAVE_DISTINCT_FLOAT128",""],["__HAVE_DISTINCT_FLOAT128X",""],["__HAVE_DISTINCT_FLOAT16",""],["__HAVE_DISTINCT_FLOAT32",""],["__HAVE_DISTINCT_FLOAT32X",""],["__HAVE_DISTINCT_FLOAT64",""],["__HAVE_DISTINCT_FLOAT64X",""],["__HAVE_FLOAT128",""],["__HAVE_FLOAT128X",""],["__HAVE_FLOAT16",""],["__HAVE_FLOAT32",""],["__HAVE_FLOAT32X",""],["__HAVE_FLOAT64",""],["__HAVE_FLOAT64X",""],["__HAVE_FLOAT64X_LONG_DOUBLE",""],["__HAVE_FLOATN_NOT_TYPEDEF",""],["__HAVE_GENERIC_SELECTION",""],["__INO_T_MATCHES_INO64_T",""],["__LITTLE_ENDIAN",""],["__OFF_T_MATCHES_OFF64_T",""],["__PDP_ENDIAN",""],["__PTHREAD_MUTEX_HAVE_PREV",""],["__PTHREAD_MUTEX_LOCK_ELISION",""],["__PTHREAD_MUTEX_NUSERS_AFTER_KIND",""],["__PTHREAD_MUTEX_USE_UNION",""],["__PTHREAD_RWLOCK_INT_FLAGS_SHARED",""],["__RLIM_T_MATCHES_RLIM64_T",""],["__SIZEOF_PTHREAD_ATTR_T",""],["__SIZEOF_PTHREAD_BARRIERATTR_T",""],["__SIZEOF_PTHREAD_BARRIER_T",""],["__SIZEOF_PTHREAD_CONDATTR_T",""],["__SIZEOF_PTHREAD_COND_T",""],["__SIZEOF_PTHREAD_MUTEXATTR_T",""],["__SIZEOF_PTHREAD_MUTEX_T",""],["__SIZEOF_PTHREAD_RWLOCKATTR_T",""],["__SIZEOF_PTHREAD_RWLOCK_T",""],["__STDC_IEC_559_COMPLEX__",""],["__STDC_IEC_559__",""],["__STDC_ISO_10646__",""],["__SYSCALL_WORDSIZE",""],["__TIMESIZE",""],["__USE_ATFILE",""],["__USE_EXTERN_INLINES",""],["__USE_FORTIFY_LEVEL",""],["__USE_ISOC11",""],["__USE_ISOC95",""],["__USE_ISOC99",""],["__USE_MISC",""],["__USE_POSIX",""],["__USE_POSIX199309",""],["__USE_POSIX199506",""],["__USE_POSIX2",""],["__USE_POSIX_IMPLICITLY",""],["__USE_XOPEN2K",""],["__USE_XOPEN2K8",""],["__WALL",""],["__WCLONE",""],["__WCOREFLAG",""],["__WNOTHREAD",""],["__WORDSIZE",""],["__WORDSIZE_TIME64_COMPAT32",""],["__W_CONTINUED",""],["__bool_true_false_are_defined",""],["__clock_t_defined",""],["__clockid_t_defined",""],["__glibc_c99_flexarr_available",""],["__have_pthread_attr_t",""],["__ldiv_t_defined",""],["__lldiv_t_defined",""],["__sigset_t_defined",""],["__time_t_defined",""],["__timer_t_defined",""],["__timeval_defined",""],["false_",""],["true_",""]],"fn":[["_Exit",""],["__ctype_get_mb_cur_max",""],["a64l",""],["abort",""],["abs",""],["aligned_alloc",""],["alloca",""],["at_quick_exit",""],["atexit",""],["atof",""],["atoi",""],["atol",""],["atoll",""],["bsearch",""],["buildUserInterfaceCDSPInstance",""],["calloc",""],["clearenv",""],["cloneCDSPInstance",""],["computeCDSPInstance",""],["createCDSPFactoryFromFile","Create a Faust DSP factory from a DSP source code as a file. Note that the library keeps an internal cache of all allocated factories so that the compilation of the same DSP code (that is same source code and same set of 'normalized' compilations options) will return the same (reference counted) factory pointer. You will have to explicitly use deleteCDSPFactory to properly decrement reference counter when the factory is no more needed."],["createCDSPFactoryFromString","Create a Faust DSP factory from a DSP source code as a string. Note that the library keeps an internal cache of all allocated factories so that the compilation of the same DSP code (that is same source code and same set of 'normalized' compilations options) will return the same (reference counted) factory pointer. You will have to explicitly use deleteCDSPFactory to properly decrement reference counter when the factory is no more needed."],["createCDSPInstance","Create a Faust DSP instance."],["deleteAllCDSPFactories","Delete all Faust DSP factories kept in the library cache. Beware : all kept factory pointers (in local variables...) thus become invalid."],["deleteCDSPFactory","Delete a Faust DSP factory, that is decrements it's reference counter, possibly really deleting the internal pointer. Possibly also delete DSP pointers associated with this factory, if they were not explicitly deleted with deleteCDSPInstance. Beware : all kept factories and DSP pointers (in local variables...) thus become invalid."],["deleteCDSPInstance","Delete a Faust DSP instance."],["div",""],["drand48",""],["drand48_r",""],["ecvt",""],["ecvt_r",""],["erand48",""],["erand48_r",""],["exit",""],["fcvt",""],["fcvt_r",""],["free",""],["gcvt",""],["getAllCDSPFactories","Return Faust DSP factories of the library cache as a null-terminated array of their SHA keys."],["getCDSPCode","Get the expanded DSP code of the Faust DSP factory."],["getCDSPFactoryCompileOptions","Get the compile options of the Faust DSP factory."],["getCDSPFactoryFromSHAKey","Get the Faust DSP factory associated with a given SHA key (created from the 'expanded' DSP source), if already allocated in the factories cache and increment it's reference counter. You will have to explicitly use deleteCDSPFactory to properly decrement the reference counter when the factory is no more needed."],["getCDSPFactoryIncludePathnames","Get the list of all used includes as a null-terminated array."],["getCDSPFactoryLibraryList","Get the Faust DSP factory list of library dependancies as a null-terminated array."],["getCDSPMachineTarget","Get the target (triple + CPU) of the machine."],["getCLibFaustVersion","Get the library version."],["getCName","Returns factory name :  either the name declared in DSP with [declare name \"foo\"] syntax  or 'filename' (if createDSPFactoryFromFile is used)  or 'name_app' (if createDSPFactoryFromString is used)"],["getCSHAKey","Get the SHA Key of the Faust DSP factory."],["getCTarget","Get the LLVM target of the Faust DSP factory."],["getNumInputsCDSPInstance","Instance functions."],["getNumOutputsCDSPInstance",""],["getSampleRateCDSPInstance",""],["getenv",""],["getloadavg",""],["getsubopt",""],["initCDSPInstance",""],["initstate",""],["initstate_r",""],["instanceClearCDSPInstance",""],["instanceConstantsCDSPInstance",""],["instanceInitCDSPInstance",""],["instanceResetUserInterfaceCDSPInstance",""],["jrand48",""],["jrand48_r",""],["l64a",""],["labs",""],["lcong48",""],["lcong48_r",""],["ldiv",""],["llabs",""],["lldiv",""],["lrand48",""],["lrand48_r",""],["malloc",""],["mblen",""],["mbstowcs",""],["mbtowc",""],["metadataCDSPInstance",""],["mkdtemp",""],["mkstemp",""],["mkstemps",""],["mktemp",""],["mrand48",""],["mrand48_r",""],["nrand48",""],["nrand48_r",""],["on_exit",""],["posix_memalign",""],["pselect",""],["putenv",""],["qecvt",""],["qecvt_r",""],["qfcvt",""],["qfcvt_r",""],["qgcvt",""],["qsort",""],["quick_exit",""],["rand",""],["rand_r",""],["random",""],["random_r",""],["readCDSPFactoryFromBitcode","Create a Faust DSP factory from a base64 encoded LLVM bitcode string. Note that the library keeps an internal cache of all allocated factories so that the compilation of the same DSP code (that is the same LLVM bitcode string) will return the same (reference counted) factory pointer. You will have to explicitly use deleteCDSPFactory to properly decrement reference counter when the factory is no more needed."],["readCDSPFactoryFromBitcodeFile","Create a Faust DSP factory from a LLVM bitcode file. Note that the library keeps an internal cache of all allocated factories so that the compilation of the same DSP code (that is the same LLVM bitcode file) will return the same (reference counted) factory pointer. You will have to explicitly use deleteCDSPFactory to properly decrement reference counter when the factory is no more needed."],["readCDSPFactoryFromIR","Create a Faust DSP factory from a LLVM IR (textual) string. Note that the library keeps an internal cache of all allocated factories so that the compilation of the same DSP code (that is the same LLVM IR string) will return the same (reference counted) factory pointer. You will have to explicitly use deleteCDSPFactory to properly decrement reference counter when the factory is no more needed."],["readCDSPFactoryFromIRFile","Create a Faust DSP factory from a LLVM IR (textual) file. Note that the library keeps an internal cache of all allocated factories so that the compilation of the same DSP code (that is the same LLVM IR file) will return the same (reference counted) factory pointer. You will have to explicitly use deleteCDSPFactory to properly decrement reference counter when the factory is no more needed."],["readCDSPFactoryFromMachine","Create a Faust DSP factory from a base64 encoded machine code string. Note that the library keeps an internal cache of all allocated factories so that the compilation of the same DSP code (that is the same machine code string) will return the same (reference counted) factory pointer. You will have to explicitly use deleteCDSPFactory to properly decrement reference counter when the factory is no more needed."],["readCDSPFactoryFromMachineFile","Create a Faust DSP factory from a machine code file. Note that the library keeps an internal cache of all allocated factories so that the compilation of the same DSP code (that is the same machine code file) will return the same (reference counted) factory pointer. You will have to explicitly use deleteCDSPFactory to properly decrement reference counter when the factory is no more needed."],["realloc",""],["reallocarray",""],["realpath",""],["rpmatch",""],["seed48",""],["seed48_r",""],["select",""],["setCMemoryManager",""],["setenv",""],["setstate",""],["setstate_r",""],["srand",""],["srand48",""],["srand48_r",""],["srandom",""],["srandom_r",""],["startMTCDSPFactories","Start multi-thread access mode (since by default the library is not 'multi-thread' safe)."],["stopMTCDSPFactories","Stop multi-thread access mode."],["strtod",""],["strtof",""],["strtol",""],["strtold",""],["strtoll",""],["strtoq",""],["strtoul",""],["strtoull",""],["strtouq",""],["system",""],["unsetenv",""],["valloc",""],["wcstombs",""],["wctomb",""],["writeCDSPFactoryToBitcode","Write a Faust DSP factory into a base64 encoded LLVM bitcode string."],["writeCDSPFactoryToBitcodeFile","Write a Faust DSP factory into a LLVM bitcode file."],["writeCDSPFactoryToIR","Write a Faust DSP factory into a LLVM IR (textual) string."],["writeCDSPFactoryToIRFile","Write a Faust DSP factory into a LLVM IR (textual) file."],["writeCDSPFactoryToMachine","Write a Faust DSP factory into a base64 encoded machine code string."],["writeCDSPFactoryToMachineFile","Write a Faust DSP factory into a machine code file."]],"struct":[["ManagerGlue",""],["MetaGlue",""],["Soundfile",""],["UIGlue",""],["__fsid_t",""],["__pthread_cond_s",""],["__pthread_cond_s__bindgen_ty_1__bindgen_ty_1",""],["__pthread_cond_s__bindgen_ty_2__bindgen_ty_1",""],["__pthread_internal_list",""],["__pthread_mutex_s",""],["__pthread_rwlock_arch_t",""],["__sigset_t",""],["div_t",""],["drand48_data",""],["dsp_imp",""],["fd_set",""],["ldiv_t",""],["lldiv_t",""],["llvm_dsp",""],["llvm_dsp_factory",""],["random_data",""],["timespec",""],["timeval",""]],"type":[["_Float32",""],["_Float32x",""],["_Float64",""],["_Float64x",""],["__blkcnt64_t",""],["__blkcnt_t",""],["__blksize_t",""],["__caddr_t",""],["__clock_t",""],["__clockid_t",""],["__compar_fn_t",""],["__daddr_t",""],["__dev_t",""],["__fd_mask",""],["__fsblkcnt64_t",""],["__fsblkcnt_t",""],["__fsfilcnt64_t",""],["__fsfilcnt_t",""],["__fsword_t",""],["__gid_t",""],["__id_t",""],["__ino64_t",""],["__ino_t",""],["__int16_t",""],["__int32_t",""],["__int64_t",""],["__int8_t",""],["__int_least16_t",""],["__int_least32_t",""],["__int_least64_t",""],["__int_least8_t",""],["__intmax_t",""],["__intptr_t",""],["__key_t",""],["__loff_t",""],["__mode_t",""],["__nlink_t",""],["__off64_t",""],["__off_t",""],["__pid_t",""],["__pthread_list_t",""],["__quad_t",""],["__rlim64_t",""],["__rlim_t",""],["__sig_atomic_t",""],["__socklen_t",""],["__ssize_t",""],["__suseconds_t",""],["__syscall_slong_t",""],["__syscall_ulong_t",""],["__time_t",""],["__timer_t",""],["__u_char",""],["__u_int",""],["__u_long",""],["__u_quad_t",""],["__u_short",""],["__uid_t",""],["__uint16_t",""],["__uint32_t",""],["__uint64_t",""],["__uint8_t",""],["__uint_least16_t",""],["__uint_least32_t",""],["__uint_least64_t",""],["__uint_least8_t",""],["__uintmax_t",""],["__useconds_t",""],["addButtonFun",""],["addCheckButtonFun",""],["addHorizontalBargraphFun",""],["addHorizontalSliderFun",""],["addNumEntryFun",""],["addSoundFileFun",""],["addVerticalBargraphFun",""],["addVerticalSliderFun",""],["allocateFun",""],["blkcnt_t",""],["blksize_t",""],["buildUserInterfaceFun",""],["caddr_t",""],["clearFun",""],["clock_t",""],["clockid_t",""],["closeBoxFun",""],["computeFun",""],["daddr_t",""],["declareFun",""],["deleteDspFun",""],["destroyFun",""],["dev_t",""],["fd_mask",""],["fsblkcnt_t",""],["fsfilcnt_t",""],["fsid_t",""],["getJSONFun",""],["getNumInputsFun",""],["getNumOutputsFun",""],["getSampleRateFun",""],["gid_t",""],["id_t",""],["initFun",""],["ino_t",""],["key_t",""],["loff_t",""],["metaDeclareFun",""],["metadataFun",""],["mode_t",""],["newDspFun",""],["nlink_t",""],["off_t",""],["openHorizontalBoxFun",""],["openTabBoxFun",""],["openVerticalBoxFun",""],["pid_t",""],["pthread_key_t",""],["pthread_once_t",""],["pthread_spinlock_t",""],["pthread_t",""],["quad_t",""],["register_t",""],["setDefaultSoundFun",""],["sigset_t",""],["suseconds_t",""],["time_t",""],["timer_t",""],["u_char",""],["u_int",""],["u_int16_t",""],["u_int32_t",""],["u_int64_t",""],["u_int8_t",""],["u_long",""],["u_quad_t",""],["u_short",""],["uid_t",""],["uint",""],["ulong",""],["ushort",""],["wchar_t",""]],"union":[["__pthread_cond_s__bindgen_ty_1",""],["__pthread_cond_s__bindgen_ty_2",""],["pthread_attr_t",""],["pthread_barrier_t",""],["pthread_barrierattr_t",""],["pthread_cond_t",""],["pthread_condattr_t",""],["pthread_mutex_t",""],["pthread_mutexattr_t",""],["pthread_rwlock_t",""],["pthread_rwlockattr_t",""]]});