/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */
#ifndef SWIGJAVA
#define SWIGJAVA
#endif
#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
    struct SwigMovePointer {
        T *ptr;
        SwigMovePointer(T *p) : ptr(p) { }
        ~SwigMovePointer() { delete ptr; }
        SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    } pointer;
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
    SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
    SwigValueWrapper() : pointer(0) { }
    SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
    operator T&() const { return *pointer.ptr; }
    T *operator&() { return pointer.ptr; }
};
template <typename T> T SwigValueInit() {
    return T();
}
#endif
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */
/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif
/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif
/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif
#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif
#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif
/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif
/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif
/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif
/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif
/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif
/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif
/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif
/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif
/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
    typedef long long __int64;
#endif
/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif
#include <jni.h>
#include <stdlib.h>
#include <string.h>
/* Support for throwing Java exceptions */
typedef enum {
    SWIG_JavaOutOfMemoryError = 1,
    SWIG_JavaIOException,
    SWIG_JavaRuntimeException,
    SWIG_JavaIndexOutOfBoundsException,
    SWIG_JavaArithmeticException,
    SWIG_JavaIllegalArgumentException,
    SWIG_JavaNullPointerException,
    SWIG_JavaDirectorPureVirtual,
    SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;
typedef struct {
    SWIG_JavaExceptionCodes code;
    const char *java_exception;
} SWIG_JavaExceptions_t;
static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
    jclass excep;
    static const SWIG_JavaExceptions_t java_exceptions[] = {
        { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
        { SWIG_JavaIOException, "java/io/IOException" },
        { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
        { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
        { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
        { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
        { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
        { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
        { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
        { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
    };
    const SWIG_JavaExceptions_t *except_ptr = java_exceptions;
    while (except_ptr->code != code && except_ptr->code)
        except_ptr++;
    jenv->ExceptionClear();
    excep = jenv->FindClass(except_ptr->java_exception);
    if (excep)
        jenv->ThrowNew(excep, msg);
}
/* Contract support */
#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else
#include "faust/dsp/llvm-c-dsp.h"
#include "faust/dsp/libfaust-c.h"
#include "libfaust_ext.h"
#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_SHA1_1CTX_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
    SHA1_CTX *arg1 = (SHA1_CTX *) 0 ;
    unsigned char *arg2 ;
    (void)jenv;
    (void)jcls;
    (void)jarg1_;
    arg1 = *(SHA1_CTX **)&jarg1;
    arg2 = *(unsigned char **)&jarg2;
    {
        size_t ii;
        unsigned char *b = (unsigned char *) arg1->data;
        for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((unsigned char *) arg2 + ii);
    }
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_SHA1_1CTX_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
    jlong jresult = 0 ;
    SHA1_CTX *arg1 = (SHA1_CTX *) 0 ;
    unsigned char *result = 0 ;
    (void)jenv;
    (void)jcls;
    (void)jarg1_;
    arg1 = *(SHA1_CTX **)&jarg1;
    result = (unsigned char *)(unsigned char *) ((arg1)->data);
    *(unsigned char **)&jresult = result;
    return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_SHA1_1CTX_1datalen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
    SHA1_CTX *arg1 = (SHA1_CTX *) 0 ;
    unsigned int arg2 ;
    (void)jenv;
    (void)jcls;
    (void)jarg1_;
    arg1 = *(SHA1_CTX **)&jarg1;
    arg2 = (unsigned int)jarg2;
    if (arg1) (arg1)->datalen = arg2;
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_SHA1_1CTX_1datalen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
    jlong jresult = 0 ;
    SHA1_CTX *arg1 = (SHA1_CTX *) 0 ;
    unsigned int result;
    (void)jenv;
    (void)jcls;
    (void)jarg1_;
    arg1 = *(SHA1_CTX **)&jarg1;
    result = (unsigned int) ((arg1)->datalen);
    jresult = (jlong)result;
    return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_SHA1_1CTX_1bitlen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
    SHA1_CTX *arg1 = (SHA1_CTX *) 0 ;
    unsigned int *arg2 ;
    (void)jenv;
    (void)jcls;
    (void)jarg1_;
    arg1 = *(SHA1_CTX **)&jarg1;
    arg2 = *(unsigned int **)&jarg2;
    {
        size_t ii;
        unsigned int *b = (unsigned int *) arg1->bitlen;
        for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((unsigned int *) arg2 + ii);
    }
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_SHA1_1CTX_1bitlen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
    jlong jresult = 0 ;
    SHA1_CTX *arg1 = (SHA1_CTX *) 0 ;
    unsigned int *result = 0 ;
    (void)jenv;
    (void)jcls;
    (void)jarg1_;
    arg1 = *(SHA1_CTX **)&jarg1;
    result = (unsigned int *)(unsigned int *) ((arg1)->bitlen);
    *(unsigned int **)&jresult = result;
    return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_SHA1_1CTX_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
    SHA1_CTX *arg1 = (SHA1_CTX *) 0 ;
    unsigned int *arg2 ;
    (void)jenv;
    (void)jcls;
    (void)jarg1_;
    arg1 = *(SHA1_CTX **)&jarg1;
    arg2 = *(unsigned int **)&jarg2;
    {
        size_t ii;
        unsigned int *b = (unsigned int *) arg1->state;
        for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((unsigned int *) arg2 + ii);
    }
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_SHA1_1CTX_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
    jlong jresult = 0 ;
    SHA1_CTX *arg1 = (SHA1_CTX *) 0 ;
    unsigned int *result = 0 ;
    (void)jenv;
    (void)jcls;
    (void)jarg1_;
    arg1 = *(SHA1_CTX **)&jarg1;
    result = (unsigned int *)(unsigned int *) ((arg1)->state);
    *(unsigned int **)&jresult = result;
    return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_SHA1_1CTX_1k_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
    SHA1_CTX *arg1 = (SHA1_CTX *) 0 ;
    unsigned int *arg2 ;
    (void)jenv;
    (void)jcls;
    (void)jarg1_;
    arg1 = *(SHA1_CTX **)&jarg1;
    arg2 = *(unsigned int **)&jarg2;
    {
        size_t ii;
        unsigned int *b = (unsigned int *) arg1->k;
        for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((unsigned int *) arg2 + ii);
    }
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_SHA1_1CTX_1k_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
    jlong jresult = 0 ;
    SHA1_CTX *arg1 = (SHA1_CTX *) 0 ;
    unsigned int *result = 0 ;
    (void)jenv;
    (void)jcls;
    (void)jarg1_;
    arg1 = *(SHA1_CTX **)&jarg1;
    result = (unsigned int *)(unsigned int *) ((arg1)->k);
    *(unsigned int **)&jresult = result;
    return jresult;
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_new_1SHA1_1CTX(JNIEnv *jenv, jclass jcls) {
    jlong jresult = 0 ;
    SHA1_CTX *result = 0 ;
    (void)jenv;
    (void)jcls;
    result = (SHA1_CTX *)new SHA1_CTX();
    *(SHA1_CTX **)&jresult = result;
    return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_delete_1SHA1_1CTX(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    SHA1_CTX *arg1 = (SHA1_CTX *) 0 ;
    (void)jenv;
    (void)jcls;
    arg1 = *(SHA1_CTX **)&jarg1;
    delete arg1;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_sha1_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
    SHA1_CTX *arg1 = (SHA1_CTX *) 0 ;
    unsigned char *arg2 ;
    (void)jenv;
    (void)jcls;
    (void)jarg1_;
    arg1 = *(SHA1_CTX **)&jarg1;
    arg2 = *(unsigned char **)&jarg2;
    sha1_transform(arg1,arg2);
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_sha1_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
    SHA1_CTX *arg1 = (SHA1_CTX *) 0 ;
    (void)jenv;
    (void)jcls;
    (void)jarg1_;
    arg1 = *(SHA1_CTX **)&jarg1;
    sha1_init(arg1);
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_sha1_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
    SHA1_CTX *arg1 = (SHA1_CTX *) 0 ;
    unsigned char *arg2 ;
    unsigned int arg3 ;
    (void)jenv;
    (void)jcls;
    (void)jarg1_;
    arg1 = *(SHA1_CTX **)&jarg1;
    arg2 = *(unsigned char **)&jarg2;
    arg3 = (unsigned int)jarg3;
    sha1_update(arg1,arg2,arg3);
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_sha1_1final(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
    SHA1_CTX *arg1 = (SHA1_CTX *) 0 ;
    unsigned char *arg2 ;
    (void)jenv;
    (void)jcls;
    (void)jarg1_;
    arg1 = *(SHA1_CTX **)&jarg1;
    arg2 = *(unsigned char **)&jarg2;
    sha1_final(arg1,arg2);
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_generateCSHA1(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    (void)jenv;
    (void)jcls;
    arg1 = 0;
    if (jarg1) {
        arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
        if (!arg1) return ;
    }
    arg2 = 0;
    if (jarg2) {
        arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
        if (!arg2) return ;
    }
    generateCSHA1((char const *)arg1,arg2);
    if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
    if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}
SWIGEXPORT jstring JNICALL Java_com_grame_faust_FaustJNI_expandCDSPFromFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jstring jarg4, jstring jarg5) {
    jstring jresult = 0 ;
    char *arg1 = (char *) 0 ;
    int arg2 ;
    char **arg3 ;
    char *arg4 = (char *) 0 ;
    char *arg5 = (char *) 0 ;
    char *result = 0 ;
    (void)jenv;
    (void)jcls;
    arg1 = 0;
    if (jarg1) {
        arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
        if (!arg1) return 0;
    }
    arg2 = (int)jarg2;
    arg3 = *(char ***)&jarg3;
    arg4 = 0;
    if (jarg4) {
        arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
        if (!arg4) return 0;
    }
    arg5 = 0;
    if (jarg5) {
        arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
        if (!arg5) return 0;
    }
    result = (char *)expandCDSPFromFile((char const *)arg1,arg2,(char const *(*))arg3,arg4,arg5);
    if (result) jresult = jenv->NewStringUTF((const char *)result);
    if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
    if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
    if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
    return jresult;
}
SWIGEXPORT jstring JNICALL Java_com_grame_faust_FaustJNI_expandCDSPFromString(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jlong jarg4, jstring jarg5, jstring jarg6) {
  jstring jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *result = 0 ;
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3;
  arg4 = *(char ***)&jarg4;
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (char *)expandCDSPFromString((char const *)arg1,(char const *)arg2,arg3,(char const *(*))arg4,arg5,arg6);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}
SWIGEXPORT jboolean JNICALL Java_com_grame_faust_FaustJNI_generateCAuxFilesFromFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char **arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2;
  arg3 = *(char ***)&jarg3;
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (bool)generateCAuxFilesFromFile((char const *)arg1,arg2,(char const *(*))arg3,arg4);
  jresult = (jboolean)result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}
SWIGEXPORT jboolean JNICALL Java_com_grame_faust_FaustJNI_generateCAuxFilesFromString(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jlong jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3;
  arg4 = *(char ***)&jarg4;
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (bool)generateCAuxFilesFromString((char const *)arg1,(char const *)arg2,arg3,(char const *(*))arg4,arg5);
  jresult = (jboolean)result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_freeCMemory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void *arg1 = (void *) 0 ;
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1;
  freeCMemory(arg1);
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_new_1llvm_1dsp_1factory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  llvm_dsp_factory *result = 0 ;
  (void)jenv;
  (void)jcls;
  result = (llvm_dsp_factory *)new llvm_dsp_factory();
  *(llvm_dsp_factory **)&jresult = result;
  return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_delete_1llvm_1dsp_1factory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  delete arg1;
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_new_1llvm_1dsp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  llvm_dsp *result = 0 ;
  (void)jenv;
  (void)jcls;
  result = (llvm_dsp *)new llvm_dsp();
  *(llvm_dsp **)&jresult = result;
  return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_delete_1llvm_1dsp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  llvm_dsp *arg1 = (llvm_dsp *) 0 ;
  (void)jenv;
  (void)jcls;
  arg1 = *(llvm_dsp **)&jarg1;
  delete arg1;
}
SWIGEXPORT jstring JNICALL Java_com_grame_faust_FaustJNI_getCLibFaustVersion(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  (void)jenv;
  (void)jcls;
  result = (char *)getCLibFaustVersion();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}
SWIGEXPORT jstring JNICALL Java_com_grame_faust_FaustJNI_getCDSPMachineTarget(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  (void)jenv;
  (void)jcls;
  result = (char *)getCDSPMachineTarget();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_getCDSPFactoryFromSHAKey(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  llvm_dsp_factory *result = 0 ;
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (llvm_dsp_factory *)getCDSPFactoryFromSHAKey((char const *)arg1);
  *(llvm_dsp_factory **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_createCDSPFactoryFromFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jstring jarg4, jstring jarg5, jint jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char **arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int arg6 ;
  llvm_dsp_factory *result = 0 ;
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2;
  arg3 = *(char ***)&jarg3;
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (int)jarg6;
  result = (llvm_dsp_factory *)createCDSPFactoryFromFile((char const *)arg1,arg2,(char const *(*))arg3,(char const *)arg4,arg5,arg6);
  *(llvm_dsp_factory **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_createCDSPFactoryFromString(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jlong jarg4, jstring jarg5, jstring jarg6, jint jarg7) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char **arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  int arg7 ;
  llvm_dsp_factory *result = 0 ;
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3;
  arg4 = *(char ***)&jarg4;
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (int)jarg7;
  result = (llvm_dsp_factory *)createCDSPFactoryFromString((char const *)arg1,(char const *)arg2,arg3,(char const *(*))arg4,(char const *)arg5,arg6,arg7);
  *(llvm_dsp_factory **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}
SWIGEXPORT jboolean JNICALL Java_com_grame_faust_FaustJNI_deleteCDSPFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  bool result;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  result = (bool)deleteCDSPFactory(arg1);
  jresult = (jboolean)result;
  return jresult;
}
SWIGEXPORT jstring JNICALL Java_com_grame_faust_FaustJNI_getCName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  char *result = 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  result = (char *)getCName(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}
SWIGEXPORT jstring JNICALL Java_com_grame_faust_FaustJNI_getCSHAKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  char *result = 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  result = (char *)getCSHAKey(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}
SWIGEXPORT jstring JNICALL Java_com_grame_faust_FaustJNI_getCDSPCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  char *result = 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  result = (char *)getCDSPCode(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}
SWIGEXPORT jstring JNICALL Java_com_grame_faust_FaustJNI_getCTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  char *result = 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  result = (char *)getCTarget(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_getCDSPFactoryLibraryList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  char **result = 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  result = (char **)getCDSPFactoryLibraryList(arg1);
  *(char ***)&jresult = result;
  return jresult;
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_getCDSPFactoryIncludePathnames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  char **result = 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  result = (char **)getCDSPFactoryIncludePathnames(arg1);
  *(char ***)&jresult = result;
  return jresult;
}
SWIGEXPORT jstring JNICALL Java_com_grame_faust_FaustJNI_getCDSPFactoryCompileOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  char *result = 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  result = (char *)getCDSPFactoryCompileOptions(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_deleteAllCDSPFactories(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  deleteAllCDSPFactories();
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_getAllCDSPFactories(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  char **result = 0 ;
  (void)jenv;
  (void)jcls;
  result = (char **)getAllCDSPFactories();
  *(char ***)&jresult = result;
  return jresult;
}
SWIGEXPORT jboolean JNICALL Java_com_grame_faust_FaustJNI_startMTCDSPFactories(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  (void)jenv;
  (void)jcls;
  result = (bool)startMTCDSPFactories();
  jresult = (jboolean)result;
  return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_stopMTCDSPFactories(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  stopMTCDSPFactories();
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_readCDSPFactoryFromBitcode(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  llvm_dsp_factory *result = 0 ;
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3;
  result = (llvm_dsp_factory *)readCDSPFactoryFromBitcode((char const *)arg1,(char const *)arg2,arg3);
  *(llvm_dsp_factory **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}
SWIGEXPORT jstring JNICALL Java_com_grame_faust_FaustJNI_writeCDSPFactoryToBitcode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  char *result = 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  result = (char *)writeCDSPFactoryToBitcode(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_readCDSPFactoryFromBitcodeFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  llvm_dsp_factory *result = 0 ;
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3;
  result = (llvm_dsp_factory *)readCDSPFactoryFromBitcodeFile((char const *)arg1,(char const *)arg2,arg3);
  *(llvm_dsp_factory **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_writeCDSPFactoryToBitcodeFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  char *arg2 = (char *) 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  writeCDSPFactoryToBitcodeFile(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_readCDSPFactoryFromIR(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  llvm_dsp_factory *result = 0 ;
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3;
  result = (llvm_dsp_factory *)readCDSPFactoryFromIR((char const *)arg1,(char const *)arg2,arg3);
  *(llvm_dsp_factory **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}
SWIGEXPORT jstring JNICALL Java_com_grame_faust_FaustJNI_writeCDSPFactoryToIR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  char *result = 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  result = (char *)writeCDSPFactoryToIR(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_readCDSPFactoryFromIRFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  llvm_dsp_factory *result = 0 ;
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3;
  result = (llvm_dsp_factory *)readCDSPFactoryFromIRFile((char const *)arg1,(char const *)arg2,arg3);
  *(llvm_dsp_factory **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_writeCDSPFactoryToIRFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  char *arg2 = (char *) 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  writeCDSPFactoryToIRFile(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_readCDSPFactoryFromMachine(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  llvm_dsp_factory *result = 0 ;
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (llvm_dsp_factory *)readCDSPFactoryFromMachine((char const *)arg1,(char const *)arg2);
  *(llvm_dsp_factory **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}
SWIGEXPORT jstring JNICALL Java_com_grame_faust_FaustJNI_writeCDSPFactoryToMachine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)writeCDSPFactoryToMachine(arg1,(char const *)arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_readCDSPFactoryFromMachineFile(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  llvm_dsp_factory *result = 0 ;
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (llvm_dsp_factory *)readCDSPFactoryFromMachineFile((char const *)arg1,(char const *)arg2);
  *(llvm_dsp_factory **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_writeCDSPFactoryToMachineFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  writeCDSPFactoryToMachineFile(arg1,(char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}
SWIGEXPORT jint JNICALL Java_com_grame_faust_FaustJNI_getNumInputsCDSPInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm_dsp *arg1 = (llvm_dsp *) 0 ;
  int result;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp **)&jarg1;
  result = (int)getNumInputsCDSPInstance(arg1);
  jresult = (jint)result;
  return jresult;
}
SWIGEXPORT jint JNICALL Java_com_grame_faust_FaustJNI_getNumOutputsCDSPInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm_dsp *arg1 = (llvm_dsp *) 0 ;
  int result;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp **)&jarg1;
  result = (int)getNumOutputsCDSPInstance(arg1);
  jresult = (jint)result;
  return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_buildUserInterfaceCDSPInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm_dsp *arg1 = (llvm_dsp *) 0 ;
  UIGlue *arg2 = (UIGlue *) 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp **)&jarg1;
  arg2 = *(UIGlue **)&jarg2;
  buildUserInterfaceCDSPInstance(arg1,arg2);
}
SWIGEXPORT jint JNICALL Java_com_grame_faust_FaustJNI_getSampleRateCDSPInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  llvm_dsp *arg1 = (llvm_dsp *) 0 ;
  int result;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp **)&jarg1;
  result = (int)getSampleRateCDSPInstance(arg1);
  jresult = (jint)result;
  return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_initCDSPInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm_dsp *arg1 = (llvm_dsp *) 0 ;
  int arg2 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp **)&jarg1;
  arg2 = (int)jarg2;
  initCDSPInstance(arg1,arg2);
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_instanceInitCDSPInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm_dsp *arg1 = (llvm_dsp *) 0 ;
  int arg2 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp **)&jarg1;
  arg2 = (int)jarg2;
  instanceInitCDSPInstance(arg1,arg2);
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_instanceConstantsCDSPInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  llvm_dsp *arg1 = (llvm_dsp *) 0 ;
  int arg2 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp **)&jarg1;
  arg2 = (int)jarg2;
  instanceConstantsCDSPInstance(arg1,arg2);
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_instanceResetUserInterfaceCDSPInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm_dsp *arg1 = (llvm_dsp *) 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp **)&jarg1;
  instanceResetUserInterfaceCDSPInstance(arg1);
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_instanceClearCDSPInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm_dsp *arg1 = (llvm_dsp *) 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp **)&jarg1;
  instanceClearCDSPInstance(arg1);
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_cloneCDSPInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm_dsp *arg1 = (llvm_dsp *) 0 ;
  llvm_dsp *result = 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp **)&jarg1;
  result = (llvm_dsp *)cloneCDSPInstance(arg1);
  *(llvm_dsp **)&jresult = result;
  return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_metadataCDSPInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm_dsp *arg1 = (llvm_dsp *) 0 ;
  MetaGlue *arg2 = (MetaGlue *) 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp **)&jarg1;
  arg2 = *(MetaGlue **)&jarg2;
  metadataCDSPInstance(arg1,arg2);
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_computeCDSPInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  llvm_dsp *arg1 = (llvm_dsp *) 0 ;
  int arg2 ;
  FAUSTFLOAT **arg3 = (FAUSTFLOAT **) 0 ;
  FAUSTFLOAT **arg4 = (FAUSTFLOAT **) 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = *(FAUSTFLOAT ***)&jarg3;
  arg4 = *(FAUSTFLOAT ***)&jarg4;
  computeCDSPInstance(arg1,arg2,arg3,arg4);
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_setCMemoryManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  ManagerGlue *arg2 = (ManagerGlue *) 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  arg2 = *(ManagerGlue **)&jarg2;
  setCMemoryManager(arg1,arg2);
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_createCDSPInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  llvm_dsp_factory *arg1 = (llvm_dsp_factory *) 0 ;
  llvm_dsp *result = 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp_factory **)&jarg1;
  result = (llvm_dsp *)createCDSPInstance(arg1);
  *(llvm_dsp **)&jresult = result;
  return jresult;
}
SWIGEXPORT void JNICALL Java_com_grame_faust_FaustJNI_deleteCDSPInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  llvm_dsp *arg1 = (llvm_dsp *) 0 ;
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(llvm_dsp **)&jarg1;
  deleteCDSPInstance(arg1);
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_createCDSPFactoryFromFileAux(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jint jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  llvm_dsp_factory *result = 0 ;
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4;
  result = (llvm_dsp_factory *)createCDSPFactoryFromFileAux((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  *(llvm_dsp_factory **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}
SWIGEXPORT jlong JNICALL Java_com_grame_faust_FaustJNI_createCDSPFactoryFromStringAux(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  llvm_dsp_factory *result = 0 ;
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (int)jarg5;
  result = (llvm_dsp_factory *)createCDSPFactoryFromStringAux((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  *(llvm_dsp_factory **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}
SWIGEXPORT jstring JNICALL Java_com_grame_faust_FaustJNI_getCDSPLastError(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  (void)jenv;
  (void)jcls;
  result = (char *)getCDSPLastError();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}
#ifdef __cplusplus
}
#endif
